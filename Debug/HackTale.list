
HackTale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009550  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009908  08009908  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009908  08009908  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009908  08009908  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001218  200001e0  08009af0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f8  08009af0  000213f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199b4  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003963  00000000  00000000  00039bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003d520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003e890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001977d  00000000  00000000  0003fa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123c9  00000000  00000000  000591e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008be92  00000000  00000000  0006b5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  000f74bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009674 	.word	0x08009674

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08009674 	.word	0x08009674

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2f>:
 8000918:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800091c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000920:	bf24      	itt	cs
 8000922:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000926:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092a:	d90d      	bls.n	8000948 <__aeabi_d2f+0x30>
 800092c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000930:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000934:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000938:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800093c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000940:	bf08      	it	eq
 8000942:	f020 0001 	biceq.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800094c:	d121      	bne.n	8000992 <__aeabi_d2f+0x7a>
 800094e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000952:	bfbc      	itt	lt
 8000954:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000958:	4770      	bxlt	lr
 800095a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000962:	f1c2 0218 	rsb	r2, r2, #24
 8000966:	f1c2 0c20 	rsb	ip, r2, #32
 800096a:	fa10 f30c 	lsls.w	r3, r0, ip
 800096e:	fa20 f002 	lsr.w	r0, r0, r2
 8000972:	bf18      	it	ne
 8000974:	f040 0001 	orrne.w	r0, r0, #1
 8000978:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000980:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000984:	ea40 000c 	orr.w	r0, r0, ip
 8000988:	fa23 f302 	lsr.w	r3, r3, r2
 800098c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000990:	e7cc      	b.n	800092c <__aeabi_d2f+0x14>
 8000992:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000996:	d107      	bne.n	80009a8 <__aeabi_d2f+0x90>
 8000998:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800099c:	bf1e      	ittt	ne
 800099e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009a6:	4770      	bxne	lr
 80009a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_frsub>:
 80009b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009bc:	e002      	b.n	80009c4 <__addsf3>
 80009be:	bf00      	nop

080009c0 <__aeabi_fsub>:
 80009c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c4 <__addsf3>:
 80009c4:	0042      	lsls	r2, r0, #1
 80009c6:	bf1f      	itttt	ne
 80009c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009cc:	ea92 0f03 	teqne	r2, r3
 80009d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d8:	d06a      	beq.n	8000ab0 <__addsf3+0xec>
 80009da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009e2:	bfc1      	itttt	gt
 80009e4:	18d2      	addgt	r2, r2, r3
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	4048      	eorgt	r0, r1
 80009ea:	4041      	eorgt	r1, r0
 80009ec:	bfb8      	it	lt
 80009ee:	425b      	neglt	r3, r3
 80009f0:	2b19      	cmp	r3, #25
 80009f2:	bf88      	it	hi
 80009f4:	4770      	bxhi	lr
 80009f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a02:	bf18      	it	ne
 8000a04:	4240      	negne	r0, r0
 8000a06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a12:	bf18      	it	ne
 8000a14:	4249      	negne	r1, r1
 8000a16:	ea92 0f03 	teq	r2, r3
 8000a1a:	d03f      	beq.n	8000a9c <__addsf3+0xd8>
 8000a1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a20:	fa41 fc03 	asr.w	ip, r1, r3
 8000a24:	eb10 000c 	adds.w	r0, r0, ip
 8000a28:	f1c3 0320 	rsb	r3, r3, #32
 8000a2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a34:	d502      	bpl.n	8000a3c <__addsf3+0x78>
 8000a36:	4249      	negs	r1, r1
 8000a38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a40:	d313      	bcc.n	8000a6a <__addsf3+0xa6>
 8000a42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a46:	d306      	bcc.n	8000a56 <__addsf3+0x92>
 8000a48:	0840      	lsrs	r0, r0, #1
 8000a4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4e:	f102 0201 	add.w	r2, r2, #1
 8000a52:	2afe      	cmp	r2, #254	; 0xfe
 8000a54:	d251      	bcs.n	8000afa <__addsf3+0x136>
 8000a56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5e:	bf08      	it	eq
 8000a60:	f020 0001 	biceq.w	r0, r0, #1
 8000a64:	ea40 0003 	orr.w	r0, r0, r3
 8000a68:	4770      	bx	lr
 8000a6a:	0049      	lsls	r1, r1, #1
 8000a6c:	eb40 0000 	adc.w	r0, r0, r0
 8000a70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a74:	f1a2 0201 	sub.w	r2, r2, #1
 8000a78:	d1ed      	bne.n	8000a56 <__addsf3+0x92>
 8000a7a:	fab0 fc80 	clz	ip, r0
 8000a7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a82:	ebb2 020c 	subs.w	r2, r2, ip
 8000a86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a8a:	bfaa      	itet	ge
 8000a8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a90:	4252      	neglt	r2, r2
 8000a92:	4318      	orrge	r0, r3
 8000a94:	bfbc      	itt	lt
 8000a96:	40d0      	lsrlt	r0, r2
 8000a98:	4318      	orrlt	r0, r3
 8000a9a:	4770      	bx	lr
 8000a9c:	f092 0f00 	teq	r2, #0
 8000aa0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa4:	bf06      	itte	eq
 8000aa6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aaa:	3201      	addeq	r2, #1
 8000aac:	3b01      	subne	r3, #1
 8000aae:	e7b5      	b.n	8000a1c <__addsf3+0x58>
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d021      	beq.n	8000b04 <__addsf3+0x140>
 8000ac0:	ea92 0f03 	teq	r2, r3
 8000ac4:	d004      	beq.n	8000ad0 <__addsf3+0x10c>
 8000ac6:	f092 0f00 	teq	r2, #0
 8000aca:	bf08      	it	eq
 8000acc:	4608      	moveq	r0, r1
 8000ace:	4770      	bx	lr
 8000ad0:	ea90 0f01 	teq	r0, r1
 8000ad4:	bf1c      	itt	ne
 8000ad6:	2000      	movne	r0, #0
 8000ad8:	4770      	bxne	lr
 8000ada:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ade:	d104      	bne.n	8000aea <__addsf3+0x126>
 8000ae0:	0040      	lsls	r0, r0, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae8:	4770      	bx	lr
 8000aea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aee:	bf3c      	itt	cc
 8000af0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af4:	4770      	bxcc	lr
 8000af6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	4770      	bx	lr
 8000b04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b08:	bf16      	itet	ne
 8000b0a:	4608      	movne	r0, r1
 8000b0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b10:	4601      	movne	r1, r0
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	bf06      	itte	eq
 8000b16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b1a:	ea90 0f01 	teqeq	r0, r1
 8000b1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_ui2f>:
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e004      	b.n	8000b34 <__aeabi_i2f+0x8>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_i2f>:
 8000b2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b30:	bf48      	it	mi
 8000b32:	4240      	negmi	r0, r0
 8000b34:	ea5f 0c00 	movs.w	ip, r0
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b40:	4601      	mov	r1, r0
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	e01c      	b.n	8000b82 <__aeabi_l2f+0x2a>

08000b48 <__aeabi_ul2f>:
 8000b48:	ea50 0201 	orrs.w	r2, r0, r1
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	e00a      	b.n	8000b6c <__aeabi_l2f+0x14>
 8000b56:	bf00      	nop

08000b58 <__aeabi_l2f>:
 8000b58:	ea50 0201 	orrs.w	r2, r0, r1
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__aeabi_l2f+0x14>
 8000b66:	4240      	negs	r0, r0
 8000b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6c:	ea5f 0c01 	movs.w	ip, r1
 8000b70:	bf02      	ittt	eq
 8000b72:	4684      	moveq	ip, r0
 8000b74:	4601      	moveq	r1, r0
 8000b76:	2000      	moveq	r0, #0
 8000b78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b86:	fabc f28c 	clz	r2, ip
 8000b8a:	3a08      	subs	r2, #8
 8000b8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b90:	db10      	blt.n	8000bb4 <__aeabi_l2f+0x5c>
 8000b92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b96:	4463      	add	r3, ip
 8000b98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	f020 0001 	biceq.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	f102 0220 	add.w	r2, r2, #32
 8000bb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_f2iz>:
 8000bd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bdc:	d30f      	bcc.n	8000bfe <__aeabi_f2iz+0x2a>
 8000bde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000be2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_f2iz+0x30>
 8000be8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bf4:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf8:	bf18      	it	ne
 8000bfa:	4240      	negne	r0, r0
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr
 8000c04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c08:	d101      	bne.n	8000c0e <__aeabi_f2iz+0x3a>
 8000c0a:	0242      	lsls	r2, r0, #9
 8000c0c:	d105      	bne.n	8000c1a <__aeabi_f2iz+0x46>
 8000c0e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <lcd_disp_seg>:
#define LCD_SEG_DP1 (1*32+21)
#define LCD_SEG_DP2 (1*32+5)
#define LCD_SEG_DP3 (1*32+24)
#define LCD_SEG_NEG (1*32+25)

void lcd_disp_seg(int seg, int on) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	uint32_t com = (seg / 32) * 2;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da00      	bge.n	8000c32 <lcd_disp_seg+0x12>
 8000c30:	331f      	adds	r3, #31
 8000c32:	115b      	asrs	r3, r3, #5
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
	seg = seg % 32;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	425a      	negs	r2, r3
 8000c3c:	f003 031f 	and.w	r3, r3, #31
 8000c40:	f002 021f 	and.w	r2, r2, #31
 8000c44:	bf58      	it	pl
 8000c46:	4253      	negpl	r3, r2
 8000c48:	607b      	str	r3, [r7, #4]
	HAL_LCD_Write(&hlcd, com, ~(1ul << seg), on << seg);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	68f9      	ldr	r1, [r7, #12]
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <lcd_disp_seg+0x50>)
 8000c62:	f002 f993 	bl	8002f8c <HAL_LCD_Write>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200004a0 	.word	0x200004a0

08000c74 <lcd_disp_digit>:

// number -1 means clear
void lcd_disp_digit(int position, int number) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0dc      	sub	sp, #368	; 0x170
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	6018      	str	r0, [r3, #0]
 8000c7e:	463b      	mov	r3, r7
 8000c80:	6019      	str	r1, [r3, #0]
	// masks are not in the lut, masks would always be the same as digit 8
	uint32_t digit_lut[3*10*3] = {
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4a5a      	ldr	r2, [pc, #360]	; (8000df0 <lcd_disp_digit+0x17c>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000c90:	461a      	mov	r2, r3
 8000c92:	f007 fc1f 	bl	80084d4 <memcpy>
		(1 << 22) | (1 << 20),
		(1 << 19) | (1 << 20),
		(1 << 20) | (1 << 22),
	};

	if (number != -1) {
 8000c96:	463b      	mov	r3, r7
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9e:	d06b      	beq.n	8000d78 <lcd_disp_digit+0x104>
		// set
		HAL_LCD_Write(&hlcd, 0, ~digit_lut[position*30+8*3+0],
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	f103 0218 	add.w	r2, r3, #24
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	43d9      	mvns	r1, r3
				digit_lut[position*30+number*3+0]);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	463b      	mov	r3, r7
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	18c2      	adds	r2, r0, r3
		HAL_LCD_Write(&hlcd, 0, ~digit_lut[position*30+8*3+0],
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	460a      	mov	r2, r1
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4844      	ldr	r0, [pc, #272]	; (8000df4 <lcd_disp_digit+0x180>)
 8000ce2:	f002 f953 	bl	8002f8c <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~digit_lut[position*30+8*3+1],
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4613      	mov	r3, r2
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	f103 0219 	add.w	r2, r3, #25
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	43d9      	mvns	r1, r3
				digit_lut[position*30+number*3+1]);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4613      	mov	r3, r2
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	463b      	mov	r3, r7
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	4403      	add	r3, r0
 8000d1a:	1c5a      	adds	r2, r3, #1
		HAL_LCD_Write(&hlcd, 2, ~digit_lut[position*30+8*3+1],
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	460a      	mov	r2, r1
 8000d26:	2102      	movs	r1, #2
 8000d28:	4832      	ldr	r0, [pc, #200]	; (8000df4 <lcd_disp_digit+0x180>)
 8000d2a:	f002 f92f 	bl	8002f8c <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 4, ~digit_lut[position*30+8*3+2],
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4613      	mov	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	f103 021a 	add.w	r2, r3, #26
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	43d9      	mvns	r1, r3
				digit_lut[position*30+number*3+2]);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	463b      	mov	r3, r7
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	4403      	add	r3, r0
 8000d62:	1c9a      	adds	r2, r3, #2
		HAL_LCD_Write(&hlcd, 4, ~digit_lut[position*30+8*3+2],
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4820      	ldr	r0, [pc, #128]	; (8000df4 <lcd_disp_digit+0x180>)
 8000d72:	f002 f90b 	bl	8002f8c <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 0, ~digit_lut[position*30+8*3+0], 0);
		HAL_LCD_Write(&hlcd, 2, ~digit_lut[position*30+8*3+1], 0);
		HAL_LCD_Write(&hlcd, 4, ~digit_lut[position*30+8*3+2], 0);
	}

}
 8000d76:	e035      	b.n	8000de4 <lcd_disp_digit+0x170>
		HAL_LCD_Write(&hlcd, 0, ~digit_lut[position*30+8*3+0], 0);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	f103 0218 	add.w	r2, r3, #24
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	43da      	mvns	r2, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	4817      	ldr	r0, [pc, #92]	; (8000df4 <lcd_disp_digit+0x180>)
 8000d98:	f002 f8f8 	bl	8002f8c <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~digit_lut[position*30+8*3+1], 0);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	f103 0219 	add.w	r2, r3, #25
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	43da      	mvns	r2, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <lcd_disp_digit+0x180>)
 8000dbc:	f002 f8e6 	bl	8002f8c <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 4, ~digit_lut[position*30+8*3+2], 0);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	f103 021a 	add.w	r2, r3, #26
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <lcd_disp_digit+0x180>)
 8000de0:	f002 f8d4 	bl	8002f8c <HAL_LCD_Write>
}
 8000de4:	bf00      	nop
 8000de6:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	0800968c 	.word	0x0800968c
 8000df4:	200004a0 	.word	0x200004a0

08000df8 <lcd_disp_number>:

void lcd_disp_number(int num) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	int thousands = num / 1000;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a38      	ldr	r2, [pc, #224]	; (8000ee4 <lcd_disp_number+0xec>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1192      	asrs	r2, r2, #6
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
	int hundreds = num % 1000 / 100;
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <lcd_disp_number+0xec>)
 8000e14:	fb83 1302 	smull	r1, r3, r3, r2
 8000e18:	1199      	asrs	r1, r3, #6
 8000e1a:	17d3      	asrs	r3, r2, #31
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <lcd_disp_number+0xf0>)
 8000e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2e:	1152      	asrs	r2, r2, #5
 8000e30:	17db      	asrs	r3, r3, #31
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	613b      	str	r3, [r7, #16]
	int tens = num % 100 / 10;
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <lcd_disp_number+0xf0>)
 8000e3a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e3e:	1159      	asrs	r1, r3, #5
 8000e40:	17d3      	asrs	r3, r2, #31
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	2164      	movs	r1, #100	; 0x64
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <lcd_disp_number+0xf4>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	1092      	asrs	r2, r2, #2
 8000e54:	17db      	asrs	r3, r3, #31
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	60fb      	str	r3, [r7, #12]
	int ones = num % 10;
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <lcd_disp_number+0xf4>)
 8000e5e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e62:	1099      	asrs	r1, r3, #2
 8000e64:	17d3      	asrs	r3, r2, #31
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	460b      	mov	r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	60bb      	str	r3, [r7, #8]
	if (thousands)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d004      	beq.n	8000e84 <lcd_disp_number+0x8c>
		lcd_disp_seg(LCD_SEG_THOUSANDS, 1);
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	2018      	movs	r0, #24
 8000e7e:	f7ff fecf 	bl	8000c20 <lcd_disp_seg>
 8000e82:	e003      	b.n	8000e8c <lcd_disp_number+0x94>
	else
		lcd_disp_seg(LCD_SEG_THOUSANDS, 0);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2018      	movs	r0, #24
 8000e88:	f7ff feca 	bl	8000c20 <lcd_disp_seg>

	if ((thousands != 0) || (hundreds != 0))
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <lcd_disp_number+0xa0>
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <lcd_disp_number+0xaa>
		lcd_disp_digit(0, hundreds);
 8000e98:	6939      	ldr	r1, [r7, #16]
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff feea 	bl	8000c74 <lcd_disp_digit>
 8000ea0:	e004      	b.n	8000eac <lcd_disp_number+0xb4>
	else
		lcd_disp_digit(0, -1);
 8000ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fee4 	bl	8000c74 <lcd_disp_digit>

	if ((thousands != 0) || (hundreds != 0) || (tens != 0))
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <lcd_disp_number+0xc6>
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <lcd_disp_number+0xc6>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <lcd_disp_number+0xd0>
		lcd_disp_digit(1, tens);
 8000ebe:	68f9      	ldr	r1, [r7, #12]
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fed7 	bl	8000c74 <lcd_disp_digit>
 8000ec6:	e004      	b.n	8000ed2 <lcd_disp_number+0xda>
	else
		lcd_disp_digit(1, -1);
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fed1 	bl	8000c74 <lcd_disp_digit>

	lcd_disp_digit(2, ones);
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff fecd 	bl	8000c74 <lcd_disp_digit>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	10624dd3 	.word	0x10624dd3
 8000ee8:	51eb851f 	.word	0x51eb851f
 8000eec:	66666667 	.word	0x66666667

08000ef0 <tmp_read>:

uint16_t tmp_read(uint8_t addr) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t startAddr = addr; // Temperature Register
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	737b      	strb	r3, [r7, #13]
	uint8_t buffer[2];

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x48 << 1, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK)
 8000efe:	f107 020d 	add.w	r2, r7, #13
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	2190      	movs	r1, #144	; 0x90
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <tmp_read+0x64>)
 8000f0e:	f001 f955 	bl	80021bc <HAL_I2C_Master_Transmit>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <tmp_read+0x2c>
		return 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e017      	b.n	8000f4c <tmp_read+0x5c>
	if (HAL_I2C_Master_Receive(&hi2c1, 0x48 << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000f1c:	f107 0208 	add.w	r2, r7, #8
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	2190      	movs	r1, #144	; 0x90
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <tmp_read+0x64>)
 8000f2c:	f001 fa44 	bl	80023b8 <HAL_I2C_Master_Receive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <tmp_read+0x4a>
		return 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e008      	b.n	8000f4c <tmp_read+0x5c>

	uint16_t temp = (buffer[0] << 8) | (buffer[1] & 0xff);
 8000f3a:	7a3b      	ldrb	r3, [r7, #8]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7a7b      	ldrb	r3, [r7, #9]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	81fb      	strh	r3, [r7, #14]

	return temp;
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000042c 	.word	0x2000042c

08000f58 <tmp_write>:

void tmp_write(uint8_t addr, uint16_t value) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	80bb      	strh	r3, [r7, #4]
	//uint8_t startAddr = addr; // Temperature Register
	uint8_t buffer[3];
	buffer[0] = addr;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	733b      	strb	r3, [r7, #12]
	buffer[1] = (value >> 8) & 0xff;
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	737b      	strb	r3, [r7, #13]
	buffer[2] = value & 0xff;
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x48 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK)
 8000f7c:	f107 020c 	add.w	r2, r7, #12
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2303      	movs	r3, #3
 8000f88:	2190      	movs	r1, #144	; 0x90
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <tmp_write+0x44>)
 8000f8c:	f001 f916 	bl	80021bc <HAL_I2C_Master_Transmit>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
		return;
}
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000042c 	.word	0x2000042c

08000fa0 <temp_conv>:

int temp_conv(uint16_t temp) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
	int16_t raw = (int16_t)temp;
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	82fb      	strh	r3, [r7, #22]
	raw = raw >> 4; // 12 bit, sign extension
 8000fae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fb2:	111b      	asrs	r3, r3, #4
 8000fb4:	82fb      	strh	r3, [r7, #22]
	float ft = (float)raw * 0.0625 * 10.0f;
 8000fb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fdb6 	bl	8000b2c <__aeabi_i2f>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa3e 	bl	8000444 <__aeabi_f2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <temp_conv+0x68>)
 8000fce:	f7ff fa91 	bl	80004f4 <__aeabi_dmul>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460c      	mov	r4, r1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	4621      	mov	r1, r4
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <temp_conv+0x6c>)
 8000fe0:	f7ff fa88 	bl	80004f4 <__aeabi_dmul>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	4621      	mov	r1, r4
 8000fec:	f7ff fc94 	bl	8000918 <__aeabi_d2f>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	613b      	str	r3, [r7, #16]
	int it = (int)ft;
 8000ff4:	6938      	ldr	r0, [r7, #16]
 8000ff6:	f7ff fded 	bl	8000bd4 <__aeabi_f2iz>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60fb      	str	r3, [r7, #12]
	return it;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	3fb00000 	.word	0x3fb00000
 800100c:	40240000 	.word	0x40240000

08001010 <disp_temp>:

void disp_temp(int it) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	lcd_disp_number(abs(it));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	bfb8      	it	lt
 800101e:	425b      	neglt	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fee9 	bl	8000df8 <lcd_disp_number>
	lcd_disp_seg(LCD_SEG_NEG, (it < 0) ? 1 : 0);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0fdb      	lsrs	r3, r3, #31
 800102a:	4619      	mov	r1, r3
 800102c:	2039      	movs	r0, #57	; 0x39
 800102e:	f7ff fdf7 	bl	8000c20 <lcd_disp_seg>
	HAL_LCD_UpdateDisplayRequest(&hlcd);
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <disp_temp+0x30>)
 8001034:	f002 f863 	bl	80030fe <HAL_LCD_UpdateDisplayRequest>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200004a0 	.word	0x200004a0

08001044 <send_temp>:

void send_temp(int it) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08f      	sub	sp, #60	; 0x3c
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]
	char buf[32];
	int len = snprintf(buf, 32, "%d.%d\n", it / 10, it % 10);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <send_temp+0x60>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1092      	asrs	r2, r2, #2
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad4      	subs	r4, r2, r3
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <send_temp+0x60>)
 800105e:	fb83 2301 	smull	r2, r3, r3, r1
 8001062:	109a      	asrs	r2, r3, #2
 8001064:	17cb      	asrs	r3, r1, #31
 8001066:	1ad2      	subs	r2, r2, r3
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	1aca      	subs	r2, r1, r3
 8001072:	f107 000c 	add.w	r0, r7, #12
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	4623      	mov	r3, r4
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <send_temp+0x64>)
 800107c:	2120      	movs	r1, #32
 800107e:	f007 fa55 	bl	800852c <sniprintf>
 8001082:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (len >= 32) len = 31; // truncated
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	2b1f      	cmp	r3, #31
 8001088:	dd01      	ble.n	800108e <send_temp+0x4a>
 800108a:	231f      	movs	r3, #31
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
	CDC_Transmit_FS(buf, len);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001094:	4618      	mov	r0, r3
 8001096:	f006 fe03 	bl	8007ca0 <CDC_Transmit_FS>
}
 800109a:	bf00      	nop
 800109c:	3734      	adds	r7, #52	; 0x34
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	66666667 	.word	0x66666667
 80010a8:	080097f4 	.word	0x080097f4

080010ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	int16_t it = temp_conv(tmp_read(0x00));
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ff1b 	bl	8000ef0 <tmp_read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff6f 	bl	8000fa0 <temp_conv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	81fb      	strh	r3, [r7, #14]
	disp_temp(it);
 80010c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ffa0 	bl	8001010 <disp_temp>
	send_temp(it);
 80010d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffb5 	bl	8001044 <send_temp>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f000 fc4c 	bl	8001986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f847 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f2:	f000 f983 	bl	80013fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80010f6:	f000 f8a9 	bl	800124c <MX_I2C1_Init>
  MX_LCD_Init();
 80010fa:	f000 f8d5 	bl	80012a8 <MX_LCD_Init>
  MX_USB_DEVICE_Init();
 80010fe:	f006 fd11 	bl	8007b24 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8001102:	f000 f907 	bl	8001314 <MX_RTC_Init>
  MX_TIM2_Init();
 8001106:	f000 f92b 	bl	8001360 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_LCD_Clear(&hlcd);
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <main+0x8c>)
 800110c:	f001 ff9d 	bl	800304a <HAL_LCD_Clear>
  lcd_disp_seg(LCD_SEG_DEG, 1);
 8001110:	2101      	movs	r1, #1
 8001112:	2012      	movs	r0, #18
 8001114:	f7ff fd84 	bl	8000c20 <lcd_disp_seg>
  lcd_disp_seg(LCD_SEG_C, 1);
 8001118:	2101      	movs	r1, #1
 800111a:	2052      	movs	r0, #82	; 0x52
 800111c:	f7ff fd80 	bl	8000c20 <lcd_disp_seg>
  lcd_disp_seg(LCD_SEG_DP1, 1);
 8001120:	2101      	movs	r1, #1
 8001122:	2035      	movs	r0, #53	; 0x35
 8001124:	f7ff fd7c 	bl	8000c20 <lcd_disp_seg>
		  printf(".");
	  else
		  printf("0x%X", i);
  }*/

  uint16_t val = tmp_read(0x00);
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fee1 	bl	8000ef0 <tmp_read>
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  printf("0x%x", val);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <main+0x90>)
 8001138:	f007 f9e0 	bl	80084fc <iprintf>
  tmp_write(0x01, 0x6040);
 800113c:	f246 0140 	movw	r1, #24640	; 0x6040
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ff09 	bl	8000f58 <tmp_write>
  val = tmp_read(0x01);
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fed2 	bl	8000ef0 <tmp_read>
 800114c:	4603      	mov	r3, r0
 800114e:	80fb      	strh	r3, [r7, #6]
  printf("0x%x", val);
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <main+0x90>)
 8001156:	f007 f9d1 	bl	80084fc <iprintf>

  /* Start Channel1 */
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <main+0x94>)
 800115c:	f003 fdc6 	bl	8004cec <HAL_TIM_Base_Start_IT>
	{
	  // error?
	}

  __HAL_SYSCFG_USBPULLUP_ENABLE();
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <main+0x98>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a05      	ldr	r2, [pc, #20]	; (800117c <main+0x98>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6053      	str	r3, [r2, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116c:	e7fe      	b.n	800116c <main+0x88>
 800116e:	bf00      	nop
 8001170:	200004a0 	.word	0x200004a0
 8001174:	080097fc 	.word	0x080097fc
 8001178:	200004dc 	.word	0x200004dc
 800117c:	40010000 	.word	0x40010000

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	2234      	movs	r2, #52	; 0x34
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f007 f9ab 	bl	80084ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <SystemClock_Config+0xc8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80011b6:	4a24      	ldr	r2, [pc, #144]	; (8001248 <SystemClock_Config+0xc8>)
 80011b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011bc:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80011be:	2305      	movs	r3, #5
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80011d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80011da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fe95 	bl	8003f14 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011f0:	f000 f94a 	bl	8001488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2303      	movs	r3, #3
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f9b0 	bl	8004574 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800121a:	f000 f935 	bl	8001488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LCD;
 800121e:	2303      	movs	r3, #3
 8001220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001226:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122c:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fba9 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800123c:	f000 f924 	bl	8001488 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3758      	adds	r7, #88	; 0x58
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40007000 	.word	0x40007000

0800124c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_I2C1_Init+0x50>)
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <MX_I2C1_Init+0x54>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_I2C1_Init+0x50>)
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x58>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_I2C1_Init+0x50>)
 800126a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_I2C1_Init+0x50>)
 800128a:	f000 fe6f 	bl	8001f6c <HAL_I2C_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001294:	f000 f8f8 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000042c 	.word	0x2000042c
 80012a0:	40005400 	.word	0x40005400
 80012a4:	000186a0 	.word	0x000186a0

080012a8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_LCD_Init+0x64>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MX_LCD_Init+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_LCD_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_LCD_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_3;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_LCD_Init+0x64>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_LCD_Init+0x64>)
 80012c6:	2220      	movs	r2, #32
 80012c8:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_LCD_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_LCD_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_5;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_LCD_Init+0x64>)
 80012d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80012dc:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_3;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_LCD_Init+0x64>)
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_LCD_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_LCD_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_LCD_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_LCD_Init+0x64>)
 80012f8:	f001 fd8c 	bl	8002e14 <HAL_LCD_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_LCD_Init+0x5e>
  {
    Error_Handler();
 8001302:	f000 f8c1 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200004a0 	.word	0x200004a0
 8001310:	40002400 	.word	0x40002400

08001314 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_RTC_Init+0x44>)
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <MX_RTC_Init+0x48>)
 800131c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_RTC_Init+0x44>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_RTC_Init+0x44>)
 8001326:	227f      	movs	r2, #127	; 0x7f
 8001328:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_RTC_Init+0x44>)
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_RTC_Init+0x44>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_RTC_Init+0x44>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_RTC_Init+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_RTC_Init+0x44>)
 8001344:	f003 fc02 	bl	8004b4c <HAL_RTC_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800134e:	f000 f89b 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000480 	.word	0x20000480
 800135c:	40002800 	.word	0x40002800

08001360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_TIM2_Init+0x98>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_TIM2_Init+0x98>)
 8001386:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800138a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_TIM2_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_TIM2_Init+0x98>)
 8001394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_TIM2_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_TIM2_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_TIM2_Init+0x98>)
 80013a8:	f003 fc75 	bl	8004c96 <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013b2:	f000 f869 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_TIM2_Init+0x98>)
 80013c4:	f003 fd91 	bl	8004eea <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ce:	f000 f85b 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_TIM2_Init+0x98>)
 80013e0:	f003 ff56 	bl	8005290 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ea:	f000 f84d 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200004dc 	.word	0x200004dc

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_GPIO_Init+0x88>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <MX_GPIO_Init+0x88>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_GPIO_Init+0x88>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_GPIO_Init+0x88>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <MX_GPIO_Init+0x88>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_GPIO_Init+0x88>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_GPIO_Init+0x88>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <MX_GPIO_Init+0x88>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_GPIO_Init+0x88>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_GPIO_Init+0x88>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <MX_GPIO_Init+0x88>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_GPIO_Init+0x88>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_GPIO_Init+0x88>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <MX_GPIO_Init+0x88>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <MX_GPIO_Init+0x88>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40023800 	.word	0x40023800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_MspInit+0x58>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_MspInit+0x58>)
 80014a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014a4:	6253      	str	r3, [r2, #36]	; 0x24
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_MspInit+0x58>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_MspInit+0x58>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_MspInit+0x58>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_MspInit+0x58>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_MspInit+0x58>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_MspInit+0x58>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6253      	str	r3, [r2, #36]	; 0x24
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_MspInit+0x58>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_I2C_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d127      	bne.n	8001562 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_I2C_MspInit+0x80>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_I2C_MspInit+0x80>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_I2C_MspInit+0x80>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153a:	2304      	movs	r3, #4
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <HAL_I2C_MspInit+0x84>)
 8001546:	f000 fb9b 	bl	8001c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_I2C_MspInit+0x80>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_I2C_MspInit+0x80>)
 8001550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001554:	6253      	str	r3, [r2, #36]	; 0x24
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_I2C_MspInit+0x80>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40005400 	.word	0x40005400
 8001570:	40023800 	.word	0x40023800
 8001574:	40020400 	.word	0x40020400

08001578 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a42      	ldr	r2, [pc, #264]	; (80016a0 <HAL_LCD_MspInit+0x128>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d17e      	bne.n	8001698 <HAL_LCD_MspInit+0x120>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	4a41      	ldr	r2, [pc, #260]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	6253      	str	r3, [r2, #36]	; 0x24
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a3b      	ldr	r2, [pc, #236]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a35      	ldr	r2, [pc, #212]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_LCD_MspInit+0x12c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    PB3     ------> LCD_SEG7
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB8     ------> LCD_SEG16 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001612:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001616:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001624:	230b      	movs	r3, #11
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	481e      	ldr	r0, [pc, #120]	; (80016a8 <HAL_LCD_MspInit+0x130>)
 8001630:	f000 fb26 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6 
 8001634:	f248 73ce 	movw	r3, #34766	; 0x87ce
 8001638:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001646:	230b      	movs	r3, #11
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4816      	ldr	r0, [pc, #88]	; (80016ac <HAL_LCD_MspInit+0x134>)
 8001652:	f000 fb15 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8001656:	f64f 533b 	movw	r3, #64827	; 0xfd3b
 800165a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001668:	230b      	movs	r3, #11
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	480f      	ldr	r0, [pc, #60]	; (80016b0 <HAL_LCD_MspInit+0x138>)
 8001674:	f000 fb04 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001678:	2304      	movs	r3, #4
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001688:	230b      	movs	r3, #11
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <HAL_LCD_MspInit+0x13c>)
 8001694:	f000 faf4 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3730      	adds	r7, #48	; 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40002400 	.word	0x40002400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HAL_RTC_MspInit+0x24>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d102      	bne.n	80016d0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RTC_MspInit+0x28>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40002800 	.word	0x40002800
 80016e0:	424706d8 	.word	0x424706d8

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6253      	str	r3, [r2, #36]	; 0x24
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_TIM_Base_MspInit+0x44>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201c      	movs	r0, #28
 8001714:	f000 fa7d 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001718:	201c      	movs	r0, #28
 800171a:	f000 fa96 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <HardFault_Handler+0x4>

0800173e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <BusFault_Handler+0x4>

0800174a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <UsageFault_Handler+0x4>

08001750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f958 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <USB_LP_IRQHandler+0x10>)
 8001786:	f001 fdf2 	bl	800336e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20001188 	.word	0x20001188

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f003 faca 	bl	8004d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200004dc 	.word	0x200004dc

080017a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00a      	b.n	80017d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ba:	f3af 8000 	nop.w
 80017be:	4601      	mov	r1, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	b2ca      	uxtb	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbf0      	blt.n	80017ba <_read+0x12>
	}

return len;
 80017d8:	687b      	ldr	r3, [r7, #4]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e009      	b.n	8001808 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf1      	blt.n	80017f4 <_write+0x12>
	}
	return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_close>:

int _close(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001840:	605a      	str	r2, [r3, #4]
	return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <_isatty>:

int _isatty(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	return 1;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
	return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x50>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x16>
		heap_end = &end;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <_sbrk+0x50>)
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <_sbrk+0x54>)
 8001890:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <_sbrk+0x50>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <_sbrk+0x50>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	466a      	mov	r2, sp
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d907      	bls.n	80018b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018a6:	f006 fdeb 	bl	8008480 <__errno>
 80018aa:	4602      	mov	r2, r0
 80018ac:	230c      	movs	r3, #12
 80018ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	e006      	b.n	80018c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <_sbrk+0x50>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <_sbrk+0x50>)
 80018c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200001fc 	.word	0x200001fc
 80018d0:	200013f8 	.word	0x200013f8

080018d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <SystemInit+0x5c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <SystemInit+0x5c>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <SystemInit+0x5c>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4911      	ldr	r1, [pc, #68]	; (8001930 <SystemInit+0x5c>)
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <SystemInit+0x60>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <SystemInit+0x5c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <SystemInit+0x5c>)
 80018f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80018fa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80018fe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <SystemInit+0x5c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SystemInit+0x5c>)
 8001906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <SystemInit+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <SystemInit+0x5c>)
 8001912:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001916:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SystemInit+0x5c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x64>)
 8001920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001924:	609a      	str	r2, [r3, #8]
#endif
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	88ffc00c 	.word	0x88ffc00c
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800193c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800193e:	e003      	b.n	8001948 <LoopCopyDataInit>

08001940 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001942:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001944:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001946:	3104      	adds	r1, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800194c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800194e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001950:	d3f6      	bcc.n	8001940 <CopyDataInit>
  ldr r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001954:	e002      	b.n	800195c <LoopFillZerobss>

08001956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001958:	f842 3b04 	str.w	r3, [r2], #4

0800195c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800195e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001960:	d3f9      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001962:	f7ff ffb7 	bl	80018d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001966:	f006 fd91 	bl	800848c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196a:	f7ff fbbb 	bl	80010e4 <main>
  bx lr
 800196e:	4770      	bx	lr
  ldr r3, =_sidata
 8001970:	08009910 	.word	0x08009910
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001978:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800197c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001980:	200013f8 	.word	0x200013f8

08001984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_IRQHandler>

08001986 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f933 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f80e 	bl	80019b8 <HAL_InitTick>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	71fb      	strb	r3, [r7, #7]
 80019a6:	e001      	b.n	80019ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a8:	f7ff fd74 	bl	8001494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ac:	79fb      	ldrb	r3, [r7, #7]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_InitTick+0x68>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d022      	beq.n	8001a12 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_InitTick+0x6c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_InitTick+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f940 	bl	8001c66 <HAL_SYSTICK_Config>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10f      	bne.n	8001a0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d809      	bhi.n	8001a06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f2:	2200      	movs	r2, #0
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	f04f 30ff 	mov.w	r0, #4294967295
 80019fa:	f000 f90a 	bl	8001c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_InitTick+0x70>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e004      	b.n	8001a16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e001      	b.n	8001a16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x20>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a3c:	6013      	str	r3, [r2, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000518 	.word	0x20000518
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_GetTick+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000518 	.word	0x20000518

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4906      	ldr	r1, [pc, #24]	; (8001afc <__NVIC_EnableIRQ+0x34>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff90 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff2d 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff42 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff90 	bl	8001b54 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5f 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff35 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c96:	e14e      	b.n	8001f36 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8140 	beq.w	8001f30 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x40>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	6939      	ldr	r1, [r7, #16]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00b      	beq.n	8001d5c <HAL_GPIO_Init+0xdc>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d50:	2b11      	cmp	r3, #17
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b12      	cmp	r3, #18
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 809a 	beq.w	8001f30 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001e14:	4a4f      	ldr	r2, [pc, #316]	; (8001f54 <HAL_GPIO_Init+0x2d4>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_GPIO_Init+0x1e8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a46      	ldr	r2, [pc, #280]	; (8001f5c <HAL_GPIO_Init+0x2dc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1e4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a45      	ldr	r2, [pc, #276]	; (8001f60 <HAL_GPIO_Init+0x2e0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <HAL_GPIO_Init+0x2e4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1dc>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e006      	b.n	8001e6a <HAL_GPIO_Init+0x1ea>
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	e004      	b.n	8001e6a <HAL_GPIO_Init+0x1ea>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x1ea>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_GPIO_Init+0x1ea>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	f002 0203 	and.w	r2, r2, #3
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	4093      	lsls	r3, r2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e7a:	4936      	ldr	r1, [pc, #216]	; (8001f54 <HAL_GPIO_Init+0x2d4>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eac:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ed6:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f47f aea9 	bne.w	8001c98 <HAL_GPIO_Init+0x18>
  } 
}
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e10f      	b.n	800219e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff faac 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb0:	f002 fc76 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8001fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a7b      	ldr	r2, [pc, #492]	; (80021a8 <HAL_I2C_Init+0x23c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d807      	bhi.n	8001fd0 <HAL_I2C_Init+0x64>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_I2C_Init+0x240>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	bf94      	ite	ls
 8001fc8:	2301      	movls	r3, #1
 8001fca:	2300      	movhi	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e006      	b.n	8001fde <HAL_I2C_Init+0x72>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <HAL_I2C_Init+0x244>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0db      	b.n	800219e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4a72      	ldr	r2, [pc, #456]	; (80021b4 <HAL_I2C_Init+0x248>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a64      	ldr	r2, [pc, #400]	; (80021a8 <HAL_I2C_Init+0x23c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d802      	bhi.n	8002020 <HAL_I2C_Init+0xb4>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	e009      	b.n	8002034 <HAL_I2C_Init+0xc8>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_I2C_Init+0x24c>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	3301      	adds	r3, #1
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	430b      	orrs	r3, r1
 800203a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4956      	ldr	r1, [pc, #344]	; (80021a8 <HAL_I2C_Init+0x23c>)
 8002050:	428b      	cmp	r3, r1
 8002052:	d80d      	bhi.n	8002070 <HAL_I2C_Init+0x104>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e59      	subs	r1, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b04      	cmp	r3, #4
 800206a:	bf38      	it	cc
 800206c:	2304      	movcc	r3, #4
 800206e:	e04f      	b.n	8002110 <HAL_I2C_Init+0x1a4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d111      	bne.n	800209c <HAL_I2C_Init+0x130>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e012      	b.n	80020c2 <HAL_I2C_Init+0x156>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x15e>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e022      	b.n	8002110 <HAL_I2C_Init+0x1a4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10e      	bne.n	80020f0 <HAL_I2C_Init+0x184>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e58      	subs	r0, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	440b      	add	r3, r1
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Init+0x1a4>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	0099      	lsls	r1, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	6809      	ldr	r1, [r1, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800213e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6911      	ldr	r1, [r2, #16]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68d2      	ldr	r2, [r2, #12]
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	000186a0 	.word	0x000186a0
 80021ac:	001e847f 	.word	0x001e847f
 80021b0:	003d08ff 	.word	0x003d08ff
 80021b4:	431bde83 	.word	0x431bde83
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	460b      	mov	r3, r1
 80021ca:	817b      	strh	r3, [r7, #10]
 80021cc:	4613      	mov	r3, r2
 80021ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff fc3e 	bl	8001a50 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	f040 80e0 	bne.w	80023a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2319      	movs	r3, #25
 80021ea:	2201      	movs	r2, #1
 80021ec:	4970      	ldr	r1, [pc, #448]	; (80023b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc34 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0d3      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_I2C_Master_Transmit+0x50>
 8002208:	2302      	movs	r3, #2
 800220a:	e0cc      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d007      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	; 0x21
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fac2 	bl	8002804 <I2C_MasterRequestWrite>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e08d      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022a0:	e066      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fcae 	bl	8002c08 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06b      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d11b      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x188>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6a39      	ldr	r1, [r7, #32]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fc9e 	bl	8002c8a <I2C_WaitOnBTFFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e01a      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d194      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	00100002 	.word	0x00100002
 80023b4:	ffff0000 	.word	0xffff0000

080023b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	4613      	mov	r3, r2
 80023ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fb40 	bl	8001a50 <HAL_GetTick>
 80023d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	f040 820b 	bne.w	80027f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2319      	movs	r3, #25
 80023e6:	2201      	movs	r2, #1
 80023e8:	497c      	ldr	r1, [pc, #496]	; (80025dc <HAL_I2C_Master_Receive+0x224>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fb36 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	e1fe      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_I2C_Master_Receive+0x50>
 8002404:	2302      	movs	r3, #2
 8002406:	e1f7      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d007      	beq.n	800242e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2222      	movs	r2, #34	; 0x22
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2210      	movs	r2, #16
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a5c      	ldr	r2, [pc, #368]	; (80025e0 <HAL_I2C_Master_Receive+0x228>)
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fa3a 	bl	80028f0 <I2C_MasterRequestRead>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1b8      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	2b00      	cmp	r3, #0
 800248c:	d113      	bne.n	80024b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e18c      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d11b      	bne.n	80024f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e16c      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d11b      	bne.n	8002536 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	e14c      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800255c:	e138      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	2b03      	cmp	r3, #3
 8002564:	f200 80f1 	bhi.w	800274a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b01      	cmp	r3, #1
 800256e:	d123      	bne.n	80025b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fbc9 	bl	8002d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e139      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b6:	e10b      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d14e      	bne.n	800265e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	2200      	movs	r2, #0
 80025c8:	4906      	ldr	r1, [pc, #24]	; (80025e4 <HAL_I2C_Master_Receive+0x22c>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa46 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e10e      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000
 80025e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800265c:	e0b8      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2200      	movs	r2, #0
 8002666:	4966      	ldr	r1, [pc, #408]	; (8002800 <HAL_I2C_Master_Receive+0x448>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f9f7 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0bf      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2200      	movs	r2, #0
 80026c2:	494f      	ldr	r1, [pc, #316]	; (8002800 <HAL_I2C_Master_Receive+0x448>)
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f9c9 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e091      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002748:	e042      	b.n	80027d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fadc 	bl	8002d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e04c      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d118      	bne.n	80027d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f aec2 	bne.w	800255e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	00010004 	.word	0x00010004

08002804 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d006      	beq.n	800282e <I2C_MasterRequestWrite+0x2a>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d003      	beq.n	800282e <I2C_MasterRequestWrite+0x2a>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800282c:	d108      	bne.n	8002840 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e00b      	b.n	8002858 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	2b12      	cmp	r3, #18
 8002846:	d107      	bne.n	8002858 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f8f9 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e035      	b.n	80028e0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287c:	d108      	bne.n	8002890 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	e01b      	b.n	80028c8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	11db      	asrs	r3, r3, #7
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f063 030f 	orn	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <I2C_MasterRequestWrite+0xe4>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f92b 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e010      	b.n	80028e0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <I2C_MasterRequestWrite+0xe8>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f91b 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010008 	.word	0x00010008
 80028ec:	00010002 	.word	0x00010002

080028f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002914:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d006      	beq.n	800292a <I2C_MasterRequestRead+0x3a>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d003      	beq.n	800292a <I2C_MasterRequestRead+0x3a>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002928:	d108      	bne.n	800293c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e00b      	b.n	8002954 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b11      	cmp	r3, #17
 8002942:	d107      	bne.n	8002954 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f87b 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e06d      	b.n	8002a4c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002978:	d108      	bne.n	800298c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	e053      	b.n	8002a34 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800298c:	897b      	ldrh	r3, [r7, #10]
 800298e:	11db      	asrs	r3, r3, #7
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0306 	and.w	r3, r3, #6
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f063 030f 	orn	r3, r3, #15
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	492a      	ldr	r1, [pc, #168]	; (8002a54 <I2C_MasterRequestRead+0x164>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8ad 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e048      	b.n	8002a4c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4923      	ldr	r1, [pc, #140]	; (8002a58 <I2C_MasterRequestRead+0x168>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f89d 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e038      	b.n	8002a4c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f825 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e017      	b.n	8002a4c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	11db      	asrs	r3, r3, #7
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 0306 	and.w	r3, r3, #6
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f063 030e 	orn	r3, r3, #14
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <I2C_MasterRequestRead+0x168>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f865 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00010008 	.word	0x00010008
 8002a58:	00010002 	.word	0x00010002

08002a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6c:	e025      	b.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d021      	beq.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fe ffeb 	bl	8001a50 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d116      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e023      	b.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	e00c      	b.n	8002afa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d0b6      	beq.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b18:	e051      	b.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d123      	bne.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e046      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d021      	beq.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7fe ff69 	bl	8001a50 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d116      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e020      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10c      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e00b      	b.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	43da      	mvns	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4013      	ands	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d18d      	bne.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c14:	e02d      	b.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8ce 	bl	8002db8 <I2C_IsAcknowledgeFailed>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02d      	b.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d021      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe ff0f 	bl	8001a50 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e007      	b.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d1ca      	bne.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c96:	e02d      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f88d 	bl	8002db8 <I2C_IsAcknowledgeFailed>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e02d      	b.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d021      	beq.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb0:	f7fe fece 	bl	8001a50 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d302      	bcc.n	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d1ca      	bne.n	8002c98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d18:	e042      	b.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d119      	bne.n	8002d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0210 	mvn.w	r2, #16
 8002d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e029      	b.n	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7fe fe78 	bl	8001a50 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d302      	bcc.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d1b5      	bne.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dce:	d11b      	bne.n	8002e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0a8      	b.n	8002f80 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fb98 	bl	8001578 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e00a      	b.n	8002e7c <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	2200      	movs	r2, #0
 8002e74:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	d9f1      	bls.n	8002e66 <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0204 	orr.w	r2, r2, #4
 8002e90:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_LCD_Init+0x174>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6851      	ldr	r1, [r2, #4]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6892      	ldr	r2, [r2, #8]
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002eaa:	4311      	orrs	r1, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002eb0:	4311      	orrs	r1, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	69d2      	ldr	r2, [r2, #28]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6a12      	ldr	r2, [r2, #32]
 8002ebc:	4311      	orrs	r1, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6992      	ldr	r2, [r2, #24]
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec8:	4311      	orrs	r1, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6053      	str	r3, [r2, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f94e 	bl	8003174 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8002f10:	f7fe fd9e 	bl	8001a50 <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002f16:	e00c      	b.n	8002f32 <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8002f18:	f7fe fd9a 	bl	8001a50 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f26:	d904      	bls.n	8002f32 <HAL_LCD_Init+0x11e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e026      	b.n	8002f80 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_LCD_Init+0x104>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8002f40:	f7fe fd86 	bl	8001a50 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002f46:	e00c      	b.n	8002f62 <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8002f48:	f7fe fd82 	bl	8001a50 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f56:	d904      	bls.n	8002f62 <HAL_LCD_Init+0x14e>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00e      	b.n	8002f80 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_LCD_Init+0x134>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	fc00000f 	.word	0xfc00000f

08002f8c <HAL_LCD_Write>:
  * @param  RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param  Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0x00; 
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d005      	beq.n	8002fb6 <HAL_LCD_Write+0x2a>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d144      	bne.n	8003040 <HAL_LCD_Write+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));
    
    if(hlcd->State == HAL_LCD_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d12a      	bne.n	8003018 <HAL_LCD_Write+0x8c>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_LCD_Write+0x44>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e038      	b.n	8003042 <HAL_LCD_Write+0xb6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fd36 	bl	8001a50 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]
      
      /*!< Wait Until the LCD is ready */
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002fe6:	e010      	b.n	800300a <HAL_LCD_Write+0x7e>
      {
        if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8002fe8:	f7fe fd32 	bl	8001a50 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff6:	d908      	bls.n	800300a <HAL_LCD_Write+0x7e>
        { 
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e01b      	b.n	8003042 <HAL_LCD_Write+0xb6>
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b04      	cmp	r3, #4
 8003016:	d0e7      	beq.n	8002fe8 <HAL_LCD_Write+0x5c>
        } 
      }
    }
    
    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3304      	adds	r3, #4
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	401a      	ands	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	431a      	orrs	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3304      	adds	r3, #4
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_LCD_Write+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_LCD_Clear>:
  * @brief Clears the LCD RAM registers.
  * @param hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
  uint32_t counter = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d005      	beq.n	8003072 <HAL_LCD_Clear+0x28>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d140      	bne.n	80030f4 <HAL_LCD_Clear+0xaa>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_LCD_Clear+0x36>
 800307c:	2302      	movs	r3, #2
 800307e:	e03a      	b.n	80030f6 <HAL_LCD_Clear+0xac>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    hlcd->State = HAL_LCD_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003090:	f7fe fcde 	bl	8001a50 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
    
    /*!< Wait Until the LCD is ready */
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8003096:	e010      	b.n	80030ba <HAL_LCD_Clear+0x70>
    {
      if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8003098:	f7fe fcda 	bl	8001a50 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a6:	d908      	bls.n	80030ba <HAL_LCD_Clear+0x70>
      { 
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e01d      	b.n	80030f6 <HAL_LCD_Clear+0xac>
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d0e7      	beq.n	8003098 <HAL_LCD_Clear+0x4e>
      } 
    }
    /* Clear the LCD_RAM registers */
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e00a      	b.n	80030e4 <HAL_LCD_Clear+0x9a>
    {
      hlcd->Instance->RAM[counter] = 0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	605a      	str	r2, [r3, #4]
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d9f1      	bls.n	80030ce <HAL_LCD_Clear+0x84>
    }
    
    /* Update the LCD display */
    HAL_LCD_UpdateDisplayRequest(hlcd);     
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f807 	bl	80030fe <HAL_LCD_UpdateDisplayRequest>
    
    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_LCD_Clear+0xac>
  }
  else
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if 
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.    
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2208      	movs	r2, #8
 8003110:	60da      	str	r2, [r3, #12]
  
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0204 	orr.w	r2, r2, #4
 8003120:	609a      	str	r2, [r3, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8003122:	f7fe fc95 	bl	8001a50 <HAL_GetTick>
 8003126:	60f8      	str	r0, [r7, #12]
  
  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8003128:	e010      	b.n	800314c <HAL_LCD_UpdateDisplayRequest+0x4e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800312a:	f7fe fc91 	bl	8001a50 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003138:	d908      	bls.n	800314c <HAL_LCD_UpdateDisplayRequest+0x4e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2204      	movs	r2, #4
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
      return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e00f      	b.n	800316c <HAL_LCD_UpdateDisplayRequest+0x6e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d1e7      	bne.n	800312a <HAL_LCD_UpdateDisplayRequest+0x2c>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8003180:	f7fe fc66 	bl	8001a50 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003186:	e00c      	b.n	80031a2 <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8003188:	f7fe fc62 	bl	8001a50 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003196:	d904      	bls.n	80031a2 <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e007      	b.n	80031b2 <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d1eb      	bne.n	8003188 <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031bc:	b08b      	sub	sp, #44	; 0x2c
 80031be:	af06      	add	r7, sp, #24
 80031c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0a6      	b.n	800331a <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f004 fe91 	bl	8007f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 f8a7 	bl	8005346 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e035      	b.n	800326a <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	4413      	add	r3, r2
 8003206:	3329      	adds	r3, #41	; 0x29
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	015b      	lsls	r3, r3, #5
 8003212:	4413      	add	r3, r2
 8003214:	3328      	adds	r3, #40	; 0x28
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	b291      	uxth	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	015b      	lsls	r3, r3, #5
 8003224:	4413      	add	r3, r2
 8003226:	3336      	adds	r3, #54	; 0x36
 8003228:	460a      	mov	r2, r1
 800322a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	015b      	lsls	r3, r3, #5
 8003232:	4413      	add	r3, r2
 8003234:	332b      	adds	r3, #43	; 0x2b
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	015b      	lsls	r3, r3, #5
 8003240:	4413      	add	r3, r2
 8003242:	3338      	adds	r3, #56	; 0x38
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	4413      	add	r3, r2
 8003250:	333c      	adds	r3, #60	; 0x3c
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	3302      	adds	r3, #2
 800325c:	015b      	lsls	r3, r3, #5
 800325e:	4413      	add	r3, r2
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	3301      	adds	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3c4      	bcc.n	80031fe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e031      	b.n	80032de <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	4413      	add	r3, r2
 8003282:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	015b      	lsls	r3, r3, #5
 8003290:	4413      	add	r3, r2
 8003292:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	4413      	add	r3, r2
 80032a2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	330a      	adds	r3, #10
 80032d0:	015b      	lsls	r3, r3, #5
 80032d2:	4413      	add	r3, r2
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	3301      	adds	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3c8      	bcc.n	800327a <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	687e      	ldr	r6, [r7, #4]
 80032f0:	466d      	mov	r5, sp
 80032f2:	f106 0410 	add.w	r4, r6, #16
 80032f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	602b      	str	r3, [r5, #0]
 80032fe:	1d33      	adds	r3, r6, #4
 8003300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003302:	6838      	ldr	r0, [r7, #0]
 8003304:	f002 f83b 	bl	800537e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003322 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_PCD_Start+0x16>
 8003334:	2302      	movs	r3, #2
 8003336:	e016      	b.n	8003366 <HAL_PCD_Start+0x44>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003340:	2101      	movs	r1, #1
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fdda 	bl	8003efc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 f84e 	bl	80063ee <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f001 ffde 	bl	8005318 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 f841 	bl	8006402 <USB_ReadInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338a:	d102      	bne.n	8003392 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fae7 	bl	8003960 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 f833 	bl	8006402 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d112      	bne.n	80033ce <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ba:	b292      	uxth	r2, r2
 80033bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f004 fe3e 	bl	8008042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033c6:	2100      	movs	r1, #0
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8d2 	bl	8003572 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 f815 	bl	8006402 <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e2:	d10b      	bne.n	80033fc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033f6:	b292      	uxth	r2, r2
 80033f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f002 fffe 	bl	8006402 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d10b      	bne.n	800342a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003424:	b292      	uxth	r2, r2
 8003426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f002 ffe7 	bl	8006402 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d126      	bne.n	800348e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003448:	b29a      	uxth	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	b292      	uxth	r2, r2
 8003454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0208 	bic.w	r2, r2, #8
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f004 fe1f 	bl	80080b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003488:	b292      	uxth	r2, r2
 800348a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f002 ffb5 	bl	8006402 <USB_ReadInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a2:	d131      	bne.n	8003508 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0208 	orr.w	r2, r2, #8
 80034b6:	b292      	uxth	r2, r2
 80034b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ce:	b292      	uxth	r2, r2
 80034d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0204 	orr.w	r2, r2, #4
 80034e6:	b292      	uxth	r2, r2
 80034e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f002 ff86 	bl	8006402 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d002      	beq.n	8003508 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f004 fdbc 	bl	8008080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f002 ff78 	bl	8006402 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351c:	d10e      	bne.n	800353c <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003530:	b292      	uxth	r2, r2
 8003532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f004 fd75 	bl	8008026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 ff5e 	bl	8006402 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003550:	d10b      	bne.n	800356a <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003564:	b292      	uxth	r2, r2
 8003566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_SetAddress+0x1a>
 8003588:	2302      	movs	r3, #2
 800358a:	e013      	b.n	80035b4 <HAL_PCD_SetAddress+0x42>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 ff0f 	bl	80063c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	70fb      	strb	r3, [r7, #3]
 80035ce:	460b      	mov	r3, r1
 80035d0:	803b      	strh	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da0b      	bge.n	80035fa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	015b      	lsls	r3, r3, #5
 80035ea:	3328      	adds	r3, #40	; 0x28
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	705a      	strb	r2, [r3, #1]
 80035f8:	e00b      	b.n	8003612 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	015b      	lsls	r3, r3, #5
 8003602:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800361e:	883a      	ldrh	r2, [r7, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	78ba      	ldrb	r2, [r7, #2]
 8003628:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	785b      	ldrb	r3, [r3, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800363c:	78bb      	ldrb	r3, [r7, #2]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d102      	bne.n	8003648 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_PCD_EP_Open+0x9a>
 8003652:	2302      	movs	r3, #2
 8003654:	e00e      	b.n	8003674 <HAL_PCD_EP_Open+0xb8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	4618      	mov	r0, r3
 8003666:	f001 feaf 	bl	80053c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003672:	7afb      	ldrb	r3, [r7, #11]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800368c:	2b00      	cmp	r3, #0
 800368e:	da0b      	bge.n	80036a8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	3328      	adds	r3, #40	; 0x28
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	705a      	strb	r2, [r3, #1]
 80036a6:	e00b      	b.n	80036c0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_PCD_EP_Close+0x5e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e00e      	b.n	80036f8 <HAL_PCD_EP_Close+0x7c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 f955 	bl	8005998 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	460b      	mov	r3, r1
 800370e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	015b      	lsls	r3, r3, #5
 8003718:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	b2da      	uxtb	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003746:	7afb      	ldrb	r3, [r7, #11]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6979      	ldr	r1, [r7, #20]
 8003756:	4618      	mov	r0, r3
 8003758:	f002 fab4 	bl	8005cc4 <USB_EPStartXfer>
 800375c:	e005      	b.n	800376a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6979      	ldr	r1, [r7, #20]
 8003764:	4618      	mov	r0, r3
 8003766:	f002 faad 	bl	8005cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	330a      	adds	r3, #10
 800378a:	015b      	lsls	r3, r3, #5
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	460b      	mov	r3, r1
 80037aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	015b      	lsls	r3, r3, #5
 80037b4:	3328      	adds	r3, #40	; 0x28
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2201      	movs	r2, #1
 80037d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e0:	7afb      	ldrb	r3, [r7, #11]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6979      	ldr	r1, [r7, #20]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 fa67 	bl	8005cc4 <USB_EPStartXfer>
 80037f6:	e005      	b.n	8003804 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6979      	ldr	r1, [r7, #20]
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 fa60 	bl	8005cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 0207 	and.w	r2, r3, #7
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d901      	bls.n	800382c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e046      	b.n	80038ba <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800382c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da0b      	bge.n	800384c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	3328      	adds	r3, #40	; 0x28
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	705a      	strb	r2, [r3, #1]
 800384a:	e009      	b.n	8003860 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_PCD_EP_SetStall+0x72>
 800387c:	2302      	movs	r3, #2
 800387e:	e01c      	b.n	80038ba <HAL_PCD_EP_SetStall+0xac>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fcc4 	bl	800621c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f002 fdb8 	bl	8006420 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d901      	bls.n	80038e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e03a      	b.n	8003956 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da0b      	bge.n	8003900 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	3328      	adds	r3, #40	; 0x28
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	705a      	strb	r2, [r3, #1]
 80038fe:	e00b      	b.n	8003918 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	015b      	lsls	r3, r3, #5
 8003908:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_PCD_EP_ClrStall+0x76>
 8003934:	2302      	movs	r3, #2
 8003936:	e00e      	b.n	8003956 <HAL_PCD_EP_ClrStall+0x94>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	4618      	mov	r0, r3
 8003948:	f002 fcaa 	bl	80062a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003968:	e279      	b.n	8003e5e <PCD_EP_ISR_Handler+0x4fe>
  {
    wIstr = hpcd->Instance->ISTR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003972:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003974:	8afb      	ldrh	r3, [r7, #22]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800397e:	7d7b      	ldrb	r3, [r7, #21]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 8139 	bne.w	8003bf8 <PCD_EP_ISR_Handler+0x298>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003986:	8afb      	ldrh	r3, [r7, #22]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d151      	bne.n	8003a34 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80039aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3328      	adds	r3, #40	; 0x28
 80039b6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	3302      	adds	r3, #2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	441a      	add	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039f2:	2100      	movs	r1, #0
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f004 faff 	bl	8007ff8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 822b 	beq.w	8003e5e <PCD_EP_ISR_Handler+0x4fe>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8226 	bne.w	8003e5e <PCD_EP_ISR_Handler+0x4fe>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b292      	uxth	r2, r2
 8003a26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a32:	e214      	b.n	8003e5e <PCD_EP_ISR_Handler+0x4fe>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a3a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a44:	8a7b      	ldrh	r3, [r7, #18]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d033      	beq.n	8003ab6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	3306      	adds	r3, #6
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88da      	ldrh	r2, [r3, #6]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f002 fd16 	bl	80064be <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29c      	uxth	r4, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f004 fa78 	bl	8007fa4 <HAL_PCD_SetupStageCallback>
 8003ab4:	e1d3      	b.n	8003e5e <PCD_EP_ISR_Handler+0x4fe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ab6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f280 81cf 	bge.w	8003e5e <PCD_EP_ISR_Handler+0x4fe>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29c      	uxth	r4, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	3306      	adds	r3, #6
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <PCD_EP_ISR_Handler+0x1d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6959      	ldr	r1, [r3, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88da      	ldrh	r2, [r3, #6]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f002 fccc 	bl	80064be <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	441a      	add	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b34:	2100      	movs	r1, #0
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f004 fa46 	bl	8007fc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461c      	mov	r4, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	441c      	add	r4, r3
 8003b4e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d110      	bne.n	8003b7e <PCD_EP_ISR_Handler+0x21e>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e026      	b.n	8003bcc <PCD_EP_ISR_Handler+0x26c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b3d      	cmp	r3, #61	; 0x3d
 8003b84:	d813      	bhi.n	8003bae <PCD_EP_ISR_Handler+0x24e>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <PCD_EP_ISR_Handler+0x240>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	029b      	lsls	r3, r3, #10
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	e00e      	b.n	8003bcc <PCD_EP_ISR_Handler+0x26c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	029b      	lsls	r3, r3, #10
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bdc:	b29c      	uxth	r4, r3
 8003bde:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003be2:	b29c      	uxth	r4, r3
 8003be4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003be8:	b29c      	uxth	r4, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4ba3      	ldr	r3, [pc, #652]	; (8003e7c <PCD_EP_ISR_Handler+0x51c>)
 8003bf0:	4323      	orrs	r3, r4
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	8013      	strh	r3, [r2, #0]
 8003bf6:	e132      	b.n	8003e5e <PCD_EP_ISR_Handler+0x4fe>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	7d7b      	ldrb	r3, [r7, #21]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f280 80d1 	bge.w	8003db4 <PCD_EP_ISR_Handler+0x454>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	7d7b      	ldrb	r3, [r7, #21]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c26:	4013      	ands	r3, r2
 8003c28:	b29c      	uxth	r4, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	7d7b      	ldrb	r3, [r7, #21]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c3e:	7d7b      	ldrb	r3, [r7, #21]
 8003c40:	015b      	lsls	r3, r3, #5
 8003c42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	7b1b      	ldrb	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d121      	bne.n	8003c98 <PCD_EP_ISR_Handler+0x338>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	3306      	adds	r3, #6
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003c7e:	8bfb      	ldrh	r3, [r7, #30]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d072      	beq.n	8003d6a <PCD_EP_ISR_Handler+0x40a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88da      	ldrh	r2, [r3, #6]
 8003c90:	8bfb      	ldrh	r3, [r7, #30]
 8003c92:	f002 fc14 	bl	80064be <USB_ReadPMA>
 8003c96:	e068      	b.n	8003d6a <PCD_EP_ISR_Handler+0x40a>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d021      	beq.n	8003cf6 <PCD_EP_ISR_Handler+0x396>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cda:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003cdc:	8bfb      	ldrh	r3, [r7, #30]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d02a      	beq.n	8003d38 <PCD_EP_ISR_Handler+0x3d8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6959      	ldr	r1, [r3, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	891a      	ldrh	r2, [r3, #8]
 8003cee:	8bfb      	ldrh	r3, [r7, #30]
 8003cf0:	f002 fbe5 	bl	80064be <USB_ReadPMA>
 8003cf4:	e020      	b.n	8003d38 <PCD_EP_ISR_Handler+0x3d8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3306      	adds	r3, #6
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003d20:	8bfb      	ldrh	r3, [r7, #30]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <PCD_EP_ISR_Handler+0x3d8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6959      	ldr	r1, [r3, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	895a      	ldrh	r2, [r3, #10]
 8003d32:	8bfb      	ldrh	r3, [r7, #30]
 8003d34:	f002 fbc3 	bl	80064be <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	b29c      	uxth	r4, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <PCD_EP_ISR_Handler+0x520>)
 8003d64:	4323      	orrs	r3, r4
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	8bfb      	ldrh	r3, [r7, #30]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	8bfb      	ldrh	r3, [r7, #30]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <PCD_EP_ISR_Handler+0x434>
 8003d8a:	8bfa      	ldrh	r2, [r7, #30]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d206      	bcs.n	8003da2 <PCD_EP_ISR_Handler+0x442>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f004 f914 	bl	8007fc8 <HAL_PCD_DataOutStageCallback>
 8003da0:	e008      	b.n	8003db4 <PCD_EP_ISR_Handler+0x454>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	7819      	ldrb	r1, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fca6 	bl	8003700 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003db4:	8a7b      	ldrh	r3, [r7, #18]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d04f      	beq.n	8003e5e <PCD_EP_ISR_Handler+0x4fe>
      {
        ep = &hpcd->IN_ep[epindex];
 8003dbe:	7d7b      	ldrb	r3, [r7, #21]
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	3328      	adds	r3, #40	; 0x28
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	7d7b      	ldrb	r3, [r7, #21]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	b29c      	uxth	r4, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	7d7b      	ldrb	r3, [r7, #21]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3302      	adds	r3, #2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <PCD_EP_ISR_Handler+0x4ec>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f004 f8d7 	bl	8007ff8 <HAL_PCD_DataInStageCallback>
 8003e4a:	e008      	b.n	8003e5e <PCD_EP_ISR_Handler+0x4fe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	7819      	ldrb	r1, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fc9f 	bl	800379c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f6ff ad7d 	blt.w	800396a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3724      	adds	r7, #36	; 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	ffff8080 	.word	0xffff8080
 8003e80:	ffff80c0 	.word	0xffff80c0

08003e84 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	4613      	mov	r3, r2
 8003e94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	015b      	lsls	r3, r3, #5
 8003eaa:	3328      	adds	r3, #40	; 0x28
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e006      	b.n	8003ec2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	015b      	lsls	r3, r3, #5
 8003eb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	80da      	strh	r2, [r3, #6]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2201      	movs	r2, #1
 8003edc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e31d      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	4b94      	ldr	r3, [pc, #592]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f30:	4b91      	ldr	r3, [pc, #580]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f38:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d07b      	beq.n	800403e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d006      	beq.n	8003f5a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5a:	4b87      	ldr	r3, [pc, #540]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d06a      	beq.n	800403c <HAL_RCC_OscConfig+0x128>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d166      	bne.n	800403c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e2f7      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x74>
 8003f7a:	4b7f      	ldr	r3, [pc, #508]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7e      	ldr	r2, [pc, #504]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e02d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xd0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCC_OscConfig+0x96>
 8003f90:	4b79      	ldr	r3, [pc, #484]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a78      	ldr	r2, [pc, #480]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a75      	ldr	r2, [pc, #468]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0xd0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0xb8>
 8003fb2:	4b71      	ldr	r3, [pc, #452]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a70      	ldr	r2, [pc, #448]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b6e      	ldr	r3, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6d      	ldr	r2, [pc, #436]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xd0>
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a69      	ldr	r2, [pc, #420]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a66      	ldr	r2, [pc, #408]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd fd30 	bl	8001a50 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fd2c 	bl	8001a50 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e2ad      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004006:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xe0>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd fd1c 	bl	8001a50 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd fd18 	bl	8001a50 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e299      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800402e:	4b52      	ldr	r3, [pc, #328]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x108>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d05a      	beq.n	8004100 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d119      	bne.n	800408a <HAL_RCC_OscConfig+0x176>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405c:	4b46      	ldr	r3, [pc, #280]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_OscConfig+0x160>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e276      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	493d      	ldr	r1, [pc, #244]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004088:	e03a      	b.n	8004100 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d020      	beq.n	80040d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004092:	4b3a      	ldr	r3, [pc, #232]	; (800417c <HAL_RCC_OscConfig+0x268>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd fcda 	bl	8001a50 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a0:	f7fd fcd6 	bl	8001a50 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e257      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b2:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	492a      	ldr	r1, [pc, #168]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
 80040d2:	e015      	b.n	8004100 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <HAL_RCC_OscConfig+0x268>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fd fcb9 	bl	8001a50 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fd fcb5 	bl	8001a50 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e236      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80b8 	beq.w	800427e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d170      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x218>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e21a      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004138:	429a      	cmp	r2, r3
 800413a:	d921      	bls.n	8004180 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fbc1 	bl	80048c8 <RCC_SetFlashLatencyFromMSIRange>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e208      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4906      	ldr	r1, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	4901      	ldr	r1, [pc, #4]	; (8004178 <HAL_RCC_OscConfig+0x264>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
 8004176:	e020      	b.n	80041ba <HAL_RCC_OscConfig+0x2a6>
 8004178:	40023800 	.word	0x40023800
 800417c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	4ba4      	ldr	r3, [pc, #656]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	49a1      	ldr	r1, [pc, #644]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004192:	4ba0      	ldr	r3, [pc, #640]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	499c      	ldr	r1, [pc, #624]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fb8c 	bl	80048c8 <RCC_SetFlashLatencyFromMSIRange>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1d3      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	3301      	adds	r3, #1
 80041c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80041ca:	4a92      	ldr	r2, [pc, #584]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	0912      	lsrs	r2, r2, #4
 80041d0:	f002 020f 	and.w	r2, r2, #15
 80041d4:	4990      	ldr	r1, [pc, #576]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80041d6:	5c8a      	ldrb	r2, [r1, r2]
 80041d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041da:	4a90      	ldr	r2, [pc, #576]	; (800441c <HAL_RCC_OscConfig+0x508>)
 80041dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041de:	4b90      	ldr	r3, [pc, #576]	; (8004420 <HAL_RCC_OscConfig+0x50c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fbe8 	bl	80019b8 <HAL_InitTick>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d045      	beq.n	800427e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	e1b5      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d029      	beq.n	8004252 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041fe:	4b89      	ldr	r3, [pc, #548]	; (8004424 <HAL_RCC_OscConfig+0x510>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fd fc24 	bl	8001a50 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800420c:	f7fd fc20 	bl	8001a50 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e1a1      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800421e:	4b7d      	ldr	r3, [pc, #500]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800422a:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4977      	ldr	r1, [pc, #476]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800423c:	4b75      	ldr	r3, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	4972      	ldr	r1, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004252:	4b74      	ldr	r3, [pc, #464]	; (8004424 <HAL_RCC_OscConfig+0x510>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd fbfa 	bl	8001a50 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004260:	f7fd fbf6 	bl	8001a50 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e177      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004272:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d030      	beq.n	80042ec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b65      	ldr	r3, [pc, #404]	; (8004428 <HAL_RCC_OscConfig+0x514>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004298:	f7fd fbda 	bl	8001a50 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fd fbd6 	bl	8001a50 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e157      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x38c>
 80042be:	e015      	b.n	80042ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x514>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fd fbc3 	bl	8001a50 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fd fbbf 	bl	8001a50 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e140      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80b5 	beq.w	8004464 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b45      	ldr	r3, [pc, #276]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	4b42      	ldr	r3, [pc, #264]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	4a41      	ldr	r2, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004314:	6253      	str	r3, [r2, #36]	; 0x24
 8004316:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_OscConfig+0x518>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d118      	bne.n	8004364 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004332:	4b3e      	ldr	r3, [pc, #248]	; (800442c <HAL_RCC_OscConfig+0x518>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3d      	ldr	r2, [pc, #244]	; (800442c <HAL_RCC_OscConfig+0x518>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fd fb87 	bl	8001a50 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fd fb83 	bl	8001a50 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e104      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	4b34      	ldr	r3, [pc, #208]	; (800442c <HAL_RCC_OscConfig+0x518>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x466>
 800436c:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	4a28      	ldr	r2, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004376:	6353      	str	r3, [r2, #52]	; 0x34
 8004378:	e02d      	b.n	80043d6 <HAL_RCC_OscConfig+0x4c2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x488>
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	6353      	str	r3, [r2, #52]	; 0x34
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 8004394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004398:	6353      	str	r3, [r2, #52]	; 0x34
 800439a:	e01c      	b.n	80043d6 <HAL_RCC_OscConfig+0x4c2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_OscConfig+0x4aa>
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ae:	6353      	str	r3, [r2, #52]	; 0x34
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	6353      	str	r3, [r2, #52]	; 0x34
 80043bc:	e00b      	b.n	80043d6 <HAL_RCC_OscConfig+0x4c2>
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	4a14      	ldr	r2, [pc, #80]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c8:	6353      	str	r3, [r2, #52]	; 0x34
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d015      	beq.n	800440a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fd fb37 	bl	8001a50 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fd fb33 	bl	8001a50 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0b2      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_OscConfig+0x500>)
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ee      	beq.n	80043e6 <HAL_RCC_OscConfig+0x4d2>
 8004408:	e023      	b.n	8004452 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7fd fb21 	bl	8001a50 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004410:	e019      	b.n	8004446 <HAL_RCC_OscConfig+0x532>
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	08009858 	.word	0x08009858
 800441c:	20000000 	.word	0x20000000
 8004420:	20000004 	.word	0x20000004
 8004424:	42470020 	.word	0x42470020
 8004428:	42470680 	.word	0x42470680
 800442c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd fb0e 	bl	8001a50 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e08d      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004446:	4b49      	ldr	r3, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x658>)
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ee      	bne.n	8004430 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004458:	4b44      	ldr	r3, [pc, #272]	; (800456c <HAL_RCC_OscConfig+0x658>)
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4a43      	ldr	r2, [pc, #268]	; (800456c <HAL_RCC_OscConfig+0x658>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d079      	beq.n	8004560 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d056      	beq.n	8004520 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b02      	cmp	r3, #2
 8004478:	d13b      	bne.n	80044f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x65c>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fd fae6 	bl	8001a50 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fae2 	bl	8001a50 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e063      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800449a:	4b34      	ldr	r3, [pc, #208]	; (800456c <HAL_RCC_OscConfig+0x658>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_OscConfig+0x658>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	4319      	orrs	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	430b      	orrs	r3, r1
 80044be:	492b      	ldr	r1, [pc, #172]	; (800456c <HAL_RCC_OscConfig+0x658>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCC_OscConfig+0x65c>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fd fac1 	bl	8001a50 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d2:	f7fd fabd 	bl	8001a50 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e03e      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_RCC_OscConfig+0x658>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x5be>
 80044f0:	e036      	b.n	8004560 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <HAL_RCC_OscConfig+0x65c>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fd faaa 	bl	8001a50 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004500:	f7fd faa6 	bl	8001a50 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e027      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <HAL_RCC_OscConfig+0x658>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x5ec>
 800451e:	e01f      	b.n	8004560 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e01a      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCC_OscConfig+0x658>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	429a      	cmp	r2, r3
 800453e:	d10d      	bne.n	800455c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d106      	bne.n	800455c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	42470060 	.word	0x42470060

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e11a      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b8f      	ldr	r3, [pc, #572]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d919      	bls.n	80045ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x34>
 800459c:	4b8a      	ldr	r3, [pc, #552]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a89      	ldr	r2, [pc, #548]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b87      	ldr	r3, [pc, #540]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	4985      	ldr	r1, [pc, #532]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b8:	4b83      	ldr	r3, [pc, #524]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0f9      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d6:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	497a      	ldr	r1, [pc, #488]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 808e 	beq.w	8004712 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045fe:	4b73      	ldr	r3, [pc, #460]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d121      	bne.n	800464e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0d7      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b03      	cmp	r3, #3
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004616:	4b6d      	ldr	r3, [pc, #436]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d115      	bne.n	800464e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0cb      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800462e:	4b67      	ldr	r3, [pc, #412]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0bf      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800463e:	4b63      	ldr	r3, [pc, #396]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0b7      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	495c      	ldr	r1, [pc, #368]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fd f9f6 	bl	8001a50 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d112      	bne.n	8004694 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7fd f9ee 	bl	8001a50 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e09b      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004686:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b08      	cmp	r3, #8
 8004690:	d1ee      	bne.n	8004670 <HAL_RCC_ClockConfig+0xfc>
 8004692:	e03e      	b.n	8004712 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d112      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469e:	f7fd f9d7 	bl	8001a50 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e084      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d1ee      	bne.n	800469e <HAL_RCC_ClockConfig+0x12a>
 80046c0:	e027      	b.n	8004712 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d11d      	bne.n	8004706 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fd f9c0 	bl	8001a50 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e06d      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e2:	4b3a      	ldr	r3, [pc, #232]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d1ee      	bne.n	80046cc <HAL_RCC_ClockConfig+0x158>
 80046ee:	e010      	b.n	8004712 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f0:	f7fd f9ae 	bl	8001a50 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e05b      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004706:	4b31      	ldr	r3, [pc, #196]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004712:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d219      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCC_ClockConfig+0x1be>
 8004726:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	4923      	ldr	r1, [pc, #140]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_RCC_ClockConfig+0x254>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e034      	b.n	80047be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4917      	ldr	r1, [pc, #92]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	490f      	ldr	r1, [pc, #60]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004792:	f000 f823 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 8004796:	4601      	mov	r1, r0
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <HAL_RCC_ClockConfig+0x258>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_RCC_ClockConfig+0x25c>)
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	fa21 f303 	lsr.w	r3, r1, r3
 80047aa:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <HAL_RCC_ClockConfig+0x260>)
 80047ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <HAL_RCC_ClockConfig+0x264>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd f900 	bl	80019b8 <HAL_InitTick>
 80047b8:	4603      	mov	r3, r0
 80047ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80047bc:	7afb      	ldrb	r3, [r7, #11]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00
 80047cc:	40023800 	.word	0x40023800
 80047d0:	08009858 	.word	0x08009858
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <HAL_RCC_GetSysClockFreq+0xa0>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d006      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x24>
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d007      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x2a>
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d12c      	bne.n	8004854 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047fa:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047fc:	613b      	str	r3, [r7, #16]
      break;
 80047fe:	e037      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004800:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004802:	613b      	str	r3, [r7, #16]
      break;
 8004804:	e034      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0c9b      	lsrs	r3, r3, #18
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <HAL_RCC_GetSysClockFreq+0xac>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0d9b      	lsrs	r3, r3, #22
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	3301      	adds	r3, #1
 800481e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004820:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004830:	fb02 f203 	mul.w	r2, r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e007      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004842:	fb02 f203 	mul.w	r2, r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	613b      	str	r3, [r7, #16]
      break;
 8004852:	e00d      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0b5b      	lsrs	r3, r3, #13
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	613b      	str	r3, [r7, #16]
      break;
 800486e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004870:	693b      	ldr	r3, [r7, #16]
}
 8004872:	4618      	mov	r0, r3
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200
 8004888:	0800984c 	.word	0x0800984c

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048a8:	4601      	mov	r1, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4a03      	ldr	r2, [pc, #12]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08009868 	.word	0x08009868

080048c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048d4:	4b29      	ldr	r3, [pc, #164]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d12c      	bne.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e0:	4b26      	ldr	r3, [pc, #152]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80048ec:	4b24      	ldr	r3, [pc, #144]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e016      	b.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b20      	ldr	r3, [pc, #128]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6253      	str	r3, [r2, #36]	; 0x24
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004918:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004924:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800492c:	d105      	bne.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004934:	d101      	bne.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004936:	2301      	movs	r3, #1
 8004938:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004940:	4b10      	ldr	r3, [pc, #64]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 0201 	bic.w	r2, r3, #1
 8004954:	490b      	ldr	r1, [pc, #44]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	d001      	beq.n	800496e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
 8004984:	40023c00 	.word	0x40023c00

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80c6 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ae:	4b64      	ldr	r3, [pc, #400]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ba:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	4a60      	ldr	r2, [pc, #384]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6253      	str	r3, [r2, #36]	; 0x24
 80049c6:	4b5e      	ldr	r3, [pc, #376]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	4b5b      	ldr	r3, [pc, #364]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	4b58      	ldr	r3, [pc, #352]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a57      	ldr	r2, [pc, #348]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ee:	f7fd f82f 	bl	8001a50 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fd f82b 	bl	8001a50 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e097      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a14:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004a1c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d00f      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a46:	d108      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a48:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06e      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a62:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d041      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d005      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d02d      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d027      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004aa6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa8:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aae:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004ab4:	4a22      	ldr	r2, [pc, #136]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d014      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fc ffc4 	bl	8001a50 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fc ffc0 	bl	8001a50 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e02a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ae2:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ee      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004afa:	d10a      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004b0c:	490c      	ldr	r1, [pc, #48]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b1e:	4908      	ldr	r1, [pc, #32]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d105      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	40007000 	.word	0x40007000
 8004b48:	424706dc 	.word	0x424706dc

08004b4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06d      	b.n	8004c3a <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	7f5b      	ldrb	r3, [r3, #29]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fda2 	bl	80016b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	22ca      	movs	r2, #202	; 0xca
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2253      	movs	r2, #83	; 0x53
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f859 	bl	8004c42 <RTC_EnterInitMode>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e048      	b.n	8004c3a <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68d2      	ldr	r2, [r2, #12]
 8004be2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	041a      	lsls	r2, r3, #16
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c06:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	22ff      	movs	r2, #255	; 0xff
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d119      	bne.n	8004c8c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c62:	f7fc fef5 	bl	8001a50 <HAL_GetTick>
 8004c66:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c68:	e009      	b.n	8004c7e <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c6a:	f7fc fef1 	bl	8001a50 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c78:	d901      	bls.n	8004c7e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e007      	b.n	8004c8e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ee      	beq.n	8004c6a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e01d      	b.n	8004ce4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fc fd11 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 f9e3 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d007      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d122      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d11b      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0202 	mvn.w	r2, #2
 8004d5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f978 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004d7a:	e005      	b.n	8004d88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f96b 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f97a 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d122      	bne.n	8004de2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d11b      	bne.n	8004de2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f06f 0204 	mvn.w	r2, #4
 8004db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f94e 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004dce:	e005      	b.n	8004ddc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f941 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f950 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d122      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d11b      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0208 	mvn.w	r2, #8
 8004e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f924 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004e22:	e005      	b.n	8004e30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f917 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f926 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d122      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d11b      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f06f 0210 	mvn.w	r2, #16
 8004e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2208      	movs	r2, #8
 8004e60:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8fa 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004e76:	e005      	b.n	8004e84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8ed 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8fc 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10e      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f06f 0201 	mvn.w	r2, #1
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fc f8fb 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d107      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8d6 	bl	800508e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_ConfigClockSource+0x18>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e0a6      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x166>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f28:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d067      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x120>
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d80b      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x6c>
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d073      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x140>
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d802      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x62>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d06f      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f4a:	e078      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d06c      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x140>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d06a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f54:	e073      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f56:	2b70      	cmp	r3, #112	; 0x70
 8004f58:	d00d      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x8c>
 8004f5a:	2b70      	cmp	r3, #112	; 0x70
 8004f5c:	d804      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x7e>
 8004f5e:	2b50      	cmp	r3, #80	; 0x50
 8004f60:	d033      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0xe0>
 8004f62:	2b60      	cmp	r3, #96	; 0x60
 8004f64:	d041      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f66:	e06a      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d066      	beq.n	800503c <HAL_TIM_ConfigClockSource+0x152>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	d017      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f74:	e063      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f000 f964 	bl	8005252 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	609a      	str	r2, [r3, #8]
      break;
 8004fa2:	e04c      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f000 f94d 	bl	8005252 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc6:	609a      	str	r2, [r3, #8]
      break;
 8004fc8:	e039      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f000 f8c4 	bl	8005164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2150      	movs	r1, #80	; 0x50
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f91b 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e029      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 f8e2 	bl	80051c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2160      	movs	r1, #96	; 0x60
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f90b 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8005008:	e019      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	461a      	mov	r2, r3
 8005018:	f000 f8a4 	bl	8005164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f8fb 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8005028:	e009      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f000 f8f2 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 800503a:	e000      	b.n	800503e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800503c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d007      	beq.n	80050c8 <TIM_Base_SetConfig+0x28>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a25      	ldr	r2, [pc, #148]	; (8005150 <TIM_Base_SetConfig+0xb0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0x28>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <TIM_Base_SetConfig+0xb4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d108      	bne.n	80050da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0x6a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <TIM_Base_SetConfig+0xb0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0x6a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <TIM_Base_SetConfig+0xb4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x6a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <TIM_Base_SetConfig+0xb8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x6a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a17      	ldr	r2, [pc, #92]	; (800515c <TIM_Base_SetConfig+0xbc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x6a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a16      	ldr	r2, [pc, #88]	; (8005160 <TIM_Base_SetConfig+0xc0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40010800 	.word	0x40010800
 800515c:	40010c00 	.word	0x40010c00
 8005160:	40011000 	.word	0x40011000

08005164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 030a 	bic.w	r3, r3, #10
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 0210 	bic.w	r2, r3, #16
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	031b      	lsls	r3, r3, #12
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	f043 0307 	orr.w	r3, r3, #7
 8005240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	609a      	str	r2, [r3, #8]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	021a      	lsls	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	431a      	orrs	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	609a      	str	r2, [r3, #8]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e032      	b.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005320:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005324:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800532c:	b29a      	uxth	r2, r3
 800532e:	89fb      	ldrh	r3, [r7, #14]
 8005330:	4313      	orrs	r3, r2
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800534e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005352:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800535a:	b29b      	uxth	r3, r3
 800535c:	b21a      	sxth	r2, r3
 800535e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005362:	43db      	mvns	r3, r3
 8005364:	b21b      	sxth	r3, r3
 8005366:	4013      	ands	r3, r2
 8005368:	b21b      	sxth	r3, r3
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800537e:	b084      	sub	sp, #16
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	f107 0014 	add.w	r0, r7, #20
 800538c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ffb1 	bl	8005318 <USB_EnableGlobalInt>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053c2:	b004      	add	sp, #16
 80053c4:	4770      	bx	lr
	...

080053c8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053c8:	b490      	push	{r4, r7}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	78db      	ldrb	r3, [r3, #3]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d819      	bhi.n	800542a <USB_ActivateEndpoint+0x62>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <USB_ActivateEndpoint+0x34>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	0800540d 	.word	0x0800540d
 8005400:	08005421 	.word	0x08005421
 8005404:	08005431 	.word	0x08005431
 8005408:	08005417 	.word	0x08005417
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800540c:	8abb      	ldrh	r3, [r7, #20]
 800540e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005412:	82bb      	strh	r3, [r7, #20]
      break;
 8005414:	e00d      	b.n	8005432 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005416:	8abb      	ldrh	r3, [r7, #20]
 8005418:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800541c:	82bb      	strh	r3, [r7, #20]
      break;
 800541e:	e008      	b.n	8005432 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005420:	8abb      	ldrh	r3, [r7, #20]
 8005422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005426:	82bb      	strh	r3, [r7, #20]
      break;
 8005428:	e003      	b.n	8005432 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
      break;
 800542e:	e000      	b.n	8005432 <USB_ActivateEndpoint+0x6a>
      break;
 8005430:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8abb      	ldrh	r3, [r7, #20]
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	b29a      	uxth	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	b29c      	uxth	r4, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	4b87      	ldr	r3, [pc, #540]	; (800569c <USB_ActivateEndpoint+0x2d4>)
 8005480:	4323      	orrs	r3, r4
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	7b1b      	ldrb	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 810c 	bne.w	80056a8 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in != 0U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d067      	beq.n	8005568 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005498:	687c      	ldr	r4, [r7, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	441c      	add	r4, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	4423      	add	r3, r4
 80054ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b0:	461c      	mov	r4, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	88db      	ldrh	r3, [r3, #6]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29c      	uxth	r4, r3
 80054ce:	4623      	mov	r3, r4
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d014      	beq.n	8005502 <USB_ActivateEndpoint+0x13a>
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	b29c      	uxth	r4, r3
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	4b69      	ldr	r3, [pc, #420]	; (80056a0 <USB_ActivateEndpoint+0x2d8>)
 80054fc:	4323      	orrs	r3, r4
 80054fe:	b29b      	uxth	r3, r3
 8005500:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d018      	beq.n	800553c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005520:	b29c      	uxth	r4, r3
 8005522:	f084 0320 	eor.w	r3, r4, #32
 8005526:	b29c      	uxth	r4, r3
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	4b5a      	ldr	r3, [pc, #360]	; (800569c <USB_ActivateEndpoint+0x2d4>)
 8005534:	4323      	orrs	r3, r4
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]
 800553a:	e225      	b.n	8005988 <USB_ActivateEndpoint+0x5c0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	b29c      	uxth	r4, r3
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	4b4f      	ldr	r3, [pc, #316]	; (800569c <USB_ActivateEndpoint+0x2d4>)
 8005560:	4323      	orrs	r3, r4
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]
 8005566:	e20f      	b.n	8005988 <USB_ActivateEndpoint+0x5c0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005568:	687c      	ldr	r4, [r7, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005570:	b29b      	uxth	r3, r3
 8005572:	441c      	add	r4, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	4423      	add	r3, r4
 800557c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005580:	461c      	mov	r4, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	b29b      	uxth	r3, r3
 800558e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005590:	687c      	ldr	r4, [r7, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	441c      	add	r4, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	4423      	add	r3, r4
 80055a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d110      	bne.n	80055d4 <USB_ActivateEndpoint+0x20c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	e026      	b.n	8005622 <USB_ActivateEndpoint+0x25a>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b3d      	cmp	r3, #61	; 0x3d
 80055da:	d813      	bhi.n	8005604 <USB_ActivateEndpoint+0x23c>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <USB_ActivateEndpoint+0x22e>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3301      	adds	r3, #1
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	029b      	lsls	r3, r3, #10
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e00e      	b.n	8005622 <USB_ActivateEndpoint+0x25a>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	b29b      	uxth	r3, r3
 8005610:	029b      	lsls	r3, r3, #10
 8005612:	b29b      	uxth	r3, r3
 8005614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29c      	uxth	r4, r3
 8005630:	4623      	mov	r3, r4
 8005632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <USB_ActivateEndpoint+0x29c>
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005650:	b29c      	uxth	r4, r3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <USB_ActivateEndpoint+0x2dc>)
 800565e:	4323      	orrs	r3, r4
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	b29c      	uxth	r4, r3
 800567c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005680:	b29c      	uxth	r4, r3
 8005682:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005686:	b29c      	uxth	r4, r3
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	4b02      	ldr	r3, [pc, #8]	; (800569c <USB_ActivateEndpoint+0x2d4>)
 8005694:	4323      	orrs	r3, r4
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
 800569a:	e175      	b.n	8005988 <USB_ActivateEndpoint+0x5c0>
 800569c:	ffff8080 	.word	0xffff8080
 80056a0:	ffff80c0 	.word	0xffff80c0
 80056a4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	b29c      	uxth	r4, r3
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	4b96      	ldr	r3, [pc, #600]	; (8005924 <USB_ActivateEndpoint+0x55c>)
 80056cc:	4323      	orrs	r3, r4
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056d2:	687c      	ldr	r4, [r7, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	441c      	add	r4, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4423      	add	r3, r4
 80056e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ea:	461c      	mov	r4, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	891b      	ldrh	r3, [r3, #8]
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	8023      	strh	r3, [r4, #0]
 80056fa:	687c      	ldr	r4, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	441c      	add	r4, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	4423      	add	r3, r4
 800570e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005712:	461c      	mov	r4, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	895b      	ldrh	r3, [r3, #10]
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 8088 	bne.w	800583c <USB_ActivateEndpoint+0x474>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29c      	uxth	r4, r3
 800573a:	4623      	mov	r3, r4
 800573c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d014      	beq.n	800576e <USB_ActivateEndpoint+0x3a6>
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	b29c      	uxth	r4, r3
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	4b70      	ldr	r3, [pc, #448]	; (8005928 <USB_ActivateEndpoint+0x560>)
 8005768:	4323      	orrs	r3, r4
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29c      	uxth	r4, r3
 800577c:	4623      	mov	r3, r4
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d014      	beq.n	80057b0 <USB_ActivateEndpoint+0x3e8>
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579c:	b29c      	uxth	r4, r3
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	4b60      	ldr	r3, [pc, #384]	; (800592c <USB_ActivateEndpoint+0x564>)
 80057aa:	4323      	orrs	r3, r4
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	b29c      	uxth	r4, r3
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	4b56      	ldr	r3, [pc, #344]	; (800592c <USB_ActivateEndpoint+0x564>)
 80057d4:	4323      	orrs	r3, r4
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	b29c      	uxth	r4, r3
 80057f2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80057f6:	b29c      	uxth	r4, r3
 80057f8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80057fc:	b29c      	uxth	r4, r3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	441a      	add	r2, r3
 8005808:	4b49      	ldr	r3, [pc, #292]	; (8005930 <USB_ActivateEndpoint+0x568>)
 800580a:	4323      	orrs	r3, r4
 800580c:	b29b      	uxth	r3, r3
 800580e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005826:	b29c      	uxth	r4, r3
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <USB_ActivateEndpoint+0x568>)
 8005834:	4323      	orrs	r3, r4
 8005836:	b29b      	uxth	r3, r3
 8005838:	8013      	strh	r3, [r2, #0]
 800583a:	e0a5      	b.n	8005988 <USB_ActivateEndpoint+0x5c0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29c      	uxth	r4, r3
 800584a:	4623      	mov	r3, r4
 800584c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d014      	beq.n	800587e <USB_ActivateEndpoint+0x4b6>
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	b29c      	uxth	r4, r3
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <USB_ActivateEndpoint+0x560>)
 8005878:	4323      	orrs	r3, r4
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29c      	uxth	r4, r3
 800588c:	4623      	mov	r3, r4
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d014      	beq.n	80058c0 <USB_ActivateEndpoint+0x4f8>
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ac:	b29c      	uxth	r4, r3
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	441a      	add	r2, r3
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <USB_ActivateEndpoint+0x564>)
 80058ba:	4323      	orrs	r3, r4
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	b29c      	uxth	r4, r3
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	4b11      	ldr	r3, [pc, #68]	; (8005928 <USB_ActivateEndpoint+0x560>)
 80058e4:	4323      	orrs	r3, r4
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d020      	beq.n	8005934 <USB_ActivateEndpoint+0x56c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	b29c      	uxth	r4, r3
 800590a:	f084 0320 	eor.w	r3, r4, #32
 800590e:	b29c      	uxth	r4, r3
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	441a      	add	r2, r3
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <USB_ActivateEndpoint+0x568>)
 800591c:	4323      	orrs	r3, r4
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]
 8005922:	e01c      	b.n	800595e <USB_ActivateEndpoint+0x596>
 8005924:	ffff8180 	.word	0xffff8180
 8005928:	ffffc080 	.word	0xffffc080
 800592c:	ffff80c0 	.word	0xffff80c0
 8005930:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594a:	b29c      	uxth	r4, r3
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <USB_ActivateEndpoint+0x5cc>)
 8005958:	4323      	orrs	r3, r4
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	b29c      	uxth	r4, r3
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <USB_ActivateEndpoint+0x5cc>)
 8005982:	4323      	orrs	r3, r4
 8005984:	b29b      	uxth	r3, r3
 8005986:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bc90      	pop	{r4, r7}
 8005992:	4770      	bx	lr
 8005994:	ffff8080 	.word	0xffff8080

08005998 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005998:	b490      	push	{r4, r7}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	7b1b      	ldrb	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d171      	bne.n	8005a8e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d036      	beq.n	8005a20 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29c      	uxth	r4, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d014      	beq.n	80059f4 <USB_DeactivateEndpoint+0x5c>
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	b29c      	uxth	r4, r3
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	441a      	add	r2, r3
 80059ec:	4b6b      	ldr	r3, [pc, #428]	; (8005b9c <USB_DeactivateEndpoint+0x204>)
 80059ee:	4323      	orrs	r3, r4
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0a:	b29c      	uxth	r4, r3
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <USB_DeactivateEndpoint+0x208>)
 8005a18:	4323      	orrs	r3, r4
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
 8005a1e:	e144      	b.n	8005caa <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29c      	uxth	r4, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d014      	beq.n	8005a62 <USB_DeactivateEndpoint+0xca>
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	b29c      	uxth	r4, r3
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	4b52      	ldr	r3, [pc, #328]	; (8005ba4 <USB_DeactivateEndpoint+0x20c>)
 8005a5c:	4323      	orrs	r3, r4
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a78:	b29c      	uxth	r4, r3
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <USB_DeactivateEndpoint+0x208>)
 8005a86:	4323      	orrs	r3, r4
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]
 8005a8c:	e10d      	b.n	8005caa <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8088 	bne.w	8005ba8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29c      	uxth	r4, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d014      	beq.n	8005ada <USB_DeactivateEndpoint+0x142>
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	b29c      	uxth	r4, r3
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <USB_DeactivateEndpoint+0x20c>)
 8005ad4:	4323      	orrs	r3, r4
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29c      	uxth	r4, r3
 8005ae8:	4623      	mov	r3, r4
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d014      	beq.n	8005b1c <USB_DeactivateEndpoint+0x184>
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b08:	b29c      	uxth	r4, r3
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <USB_DeactivateEndpoint+0x204>)
 8005b16:	4323      	orrs	r3, r4
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	b29c      	uxth	r4, r3
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	441a      	add	r2, r3
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <USB_DeactivateEndpoint+0x204>)
 8005b40:	4323      	orrs	r3, r4
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5c:	b29c      	uxth	r4, r3
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <USB_DeactivateEndpoint+0x208>)
 8005b6a:	4323      	orrs	r3, r4
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b86:	b29c      	uxth	r4, r3
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <USB_DeactivateEndpoint+0x208>)
 8005b94:	4323      	orrs	r3, r4
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]
 8005b9a:	e086      	b.n	8005caa <USB_DeactivateEndpoint+0x312>
 8005b9c:	ffff80c0 	.word	0xffff80c0
 8005ba0:	ffff8080 	.word	0xffff8080
 8005ba4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29c      	uxth	r4, r3
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d014      	beq.n	8005bea <USB_DeactivateEndpoint+0x252>
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	b29c      	uxth	r4, r3
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	4b35      	ldr	r3, [pc, #212]	; (8005cb8 <USB_DeactivateEndpoint+0x320>)
 8005be4:	4323      	orrs	r3, r4
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29c      	uxth	r4, r3
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d014      	beq.n	8005c2c <USB_DeactivateEndpoint+0x294>
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c18:	b29c      	uxth	r4, r3
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <USB_DeactivateEndpoint+0x324>)
 8005c26:	4323      	orrs	r3, r4
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	b29c      	uxth	r4, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <USB_DeactivateEndpoint+0x320>)
 8005c50:	4323      	orrs	r3, r4
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6c:	b29c      	uxth	r4, r3
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <USB_DeactivateEndpoint+0x328>)
 8005c7a:	4323      	orrs	r3, r4
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	b29c      	uxth	r4, r3
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <USB_DeactivateEndpoint+0x328>)
 8005ca4:	4323      	orrs	r3, r4
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc90      	pop	{r4, r7}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	ffffc080 	.word	0xffffc080
 8005cbc:	ffff80c0 	.word	0xffff80c0
 8005cc0:	ffff8080 	.word	0xffff8080

08005cc4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b095      	sub	sp, #84	; 0x54
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	f040 815d 	bne.w	8005f92 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d909      	bls.n	8005cf8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	619a      	str	r2, [r3, #24]
 8005cf6:	e005      	b.n	8005d04 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2200      	movs	r2, #0
 8005d02:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	7b1b      	ldrb	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11a      	bne.n	8005d42 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6959      	ldr	r1, [r3, #20]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	88da      	ldrh	r2, [r3, #6]
 8005d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb8c 	bl	8006436 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d1e:	687c      	ldr	r4, [r7, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	441c      	add	r4, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	4423      	add	r3, r4
 8005d32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e10b      	b.n	8005f5a <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d062      	beq.n	8005e1e <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d58:	687c      	ldr	r4, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d144      	bne.n	8005dec <USB_EPStartXfer+0x128>
 8005d62:	687c      	ldr	r4, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	441c      	add	r4, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	4423      	add	r3, r4
 8005d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d110      	bne.n	8005da4 <USB_EPStartXfer+0xe0>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e037      	b.n	8005e14 <USB_EPStartXfer+0x150>
 8005da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da6:	2b3d      	cmp	r3, #61	; 0x3d
 8005da8:	d811      	bhi.n	8005dce <USB_EPStartXfer+0x10a>
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
 8005db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <USB_EPStartXfer+0xfc>
 8005dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e022      	b.n	8005e14 <USB_EPStartXfer+0x150>
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e013      	b.n	8005e14 <USB_EPStartXfer+0x150>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10f      	bne.n	8005e14 <USB_EPStartXfer+0x150>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	441c      	add	r4, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	4423      	add	r3, r4
 8005e06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	895b      	ldrh	r3, [r3, #10]
 8005e18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005e1c:	e061      	b.n	8005ee2 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d144      	bne.n	8005eb0 <USB_EPStartXfer+0x1ec>
 8005e26:	687c      	ldr	r4, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	441c      	add	r4, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	4423      	add	r3, r4
 8005e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d110      	bne.n	8005e68 <USB_EPStartXfer+0x1a4>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e038      	b.n	8005eda <USB_EPStartXfer+0x216>
 8005e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6a:	2b3d      	cmp	r3, #61	; 0x3d
 8005e6c:	d811      	bhi.n	8005e92 <USB_EPStartXfer+0x1ce>
 8005e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	643b      	str	r3, [r7, #64]	; 0x40
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <USB_EPStartXfer+0x1c0>
 8005e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e80:	3301      	adds	r3, #1
 8005e82:	643b      	str	r3, [r7, #64]	; 0x40
 8005e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e023      	b.n	8005eda <USB_EPStartXfer+0x216>
 8005e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	643b      	str	r3, [r7, #64]	; 0x40
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	029b      	lsls	r3, r3, #10
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e014      	b.n	8005eda <USB_EPStartXfer+0x216>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d110      	bne.n	8005eda <USB_EPStartXfer+0x216>
 8005eb8:	687c      	ldr	r4, [r7, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	441c      	add	r4, r3
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	4423      	add	r3, r4
 8005ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	891b      	ldrh	r3, [r3, #8]
 8005ede:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6959      	ldr	r1, [r3, #20]
 8005ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 faa1 	bl	8006436 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d115      	bne.n	8005f28 <USB_EPStartXfer+0x264>
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	b29c      	uxth	r4, r3
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	4b99      	ldr	r3, [pc, #612]	; (8006184 <USB_EPStartXfer+0x4c0>)
 8005f20:	4323      	orrs	r3, r4
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8013      	strh	r3, [r2, #0]
 8005f26:	e018      	b.n	8005f5a <USB_EPStartXfer+0x296>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d114      	bne.n	8005f5a <USB_EPStartXfer+0x296>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	b29c      	uxth	r4, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	441a      	add	r2, r3
 8005f52:	4b8d      	ldr	r3, [pc, #564]	; (8006188 <USB_EPStartXfer+0x4c4>)
 8005f54:	4323      	orrs	r3, r4
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f70:	b29c      	uxth	r4, r3
 8005f72:	f084 0310 	eor.w	r3, r4, #16
 8005f76:	b29c      	uxth	r4, r3
 8005f78:	f084 0320 	eor.w	r3, r4, #32
 8005f7c:	b29c      	uxth	r4, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	4b80      	ldr	r3, [pc, #512]	; (800618c <USB_EPStartXfer+0x4c8>)
 8005f8a:	4323      	orrs	r3, r4
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
 8005f90:	e13c      	b.n	800620c <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d909      	bls.n	8005fb2 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	619a      	str	r2, [r3, #24]
 8005fb0:	e005      	b.n	8005fbe <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	7b1b      	ldrb	r3, [r3, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d144      	bne.n	8006050 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fc6:	687c      	ldr	r4, [r7, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	441c      	add	r4, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	4423      	add	r3, r4
 8005fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fde:	623b      	str	r3, [r7, #32]
 8005fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d110      	bne.n	8006008 <USB_EPStartXfer+0x344>
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006000:	b29a      	uxth	r2, r3
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e0e6      	b.n	80061d6 <USB_EPStartXfer+0x512>
 8006008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600a:	2b3d      	cmp	r3, #61	; 0x3d
 800600c:	d811      	bhi.n	8006032 <USB_EPStartXfer+0x36e>
 800600e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <USB_EPStartXfer+0x360>
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	3301      	adds	r3, #1
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006026:	b29b      	uxth	r3, r3
 8006028:	029b      	lsls	r3, r3, #10
 800602a:	b29a      	uxth	r2, r3
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	e0d1      	b.n	80061d6 <USB_EPStartXfer+0x512>
 8006032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29b      	uxth	r3, r3
 8006040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006048:	b29a      	uxth	r2, r3
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e0c2      	b.n	80061d6 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d144      	bne.n	80060e2 <USB_EPStartXfer+0x41e>
 8006058:	687c      	ldr	r4, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006060:	b29b      	uxth	r3, r3
 8006062:	441c      	add	r4, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	4423      	add	r3, r4
 800606c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006074:	2b00      	cmp	r3, #0
 8006076:	d110      	bne.n	800609a <USB_EPStartXfer+0x3d6>
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006080:	b29a      	uxth	r2, r3
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006092:	b29a      	uxth	r2, r3
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e038      	b.n	800610c <USB_EPStartXfer+0x448>
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	2b3d      	cmp	r3, #61	; 0x3d
 800609e:	d811      	bhi.n	80060c4 <USB_EPStartXfer+0x400>
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <USB_EPStartXfer+0x3f2>
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	3301      	adds	r3, #1
 80060b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	029b      	lsls	r3, r3, #10
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e023      	b.n	800610c <USB_EPStartXfer+0x448>
 80060c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	029b      	lsls	r3, r3, #10
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060da:	b29a      	uxth	r2, r3
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e014      	b.n	800610c <USB_EPStartXfer+0x448>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d110      	bne.n	800610c <USB_EPStartXfer+0x448>
 80060ea:	687c      	ldr	r4, [r7, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	441c      	add	r4, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4423      	add	r3, r4
 80060fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
 8006104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006106:	b29a      	uxth	r2, r3
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	687c      	ldr	r4, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d14b      	bne.n	80061ae <USB_EPStartXfer+0x4ea>
 8006116:	687c      	ldr	r4, [r7, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611e:	b29b      	uxth	r3, r3
 8006120:	441c      	add	r4, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	4423      	add	r3, r4
 800612a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006132:	2b00      	cmp	r3, #0
 8006134:	d110      	bne.n	8006158 <USB_EPStartXfer+0x494>
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800613e:	b29a      	uxth	r2, r3
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e03e      	b.n	80061d6 <USB_EPStartXfer+0x512>
 8006158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615a:	2b3d      	cmp	r3, #61	; 0x3d
 800615c:	d818      	bhi.n	8006190 <USB_EPStartXfer+0x4cc>
 800615e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USB_EPStartXfer+0x4b0>
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	3301      	adds	r3, #1
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	b29b      	uxth	r3, r3
 8006178:	029b      	lsls	r3, r3, #10
 800617a:	b29a      	uxth	r2, r3
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e029      	b.n	80061d6 <USB_EPStartXfer+0x512>
 8006182:	bf00      	nop
 8006184:	ffff80c0 	.word	0xffff80c0
 8006188:	ffffc080 	.word	0xffffc080
 800618c:	ffff8080 	.word	0xffff8080
 8006190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	b29b      	uxth	r3, r3
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	b29b      	uxth	r3, r3
 800619e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e013      	b.n	80061d6 <USB_EPStartXfer+0x512>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10f      	bne.n	80061d6 <USB_EPStartXfer+0x512>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061bc:	b29b      	uxth	r3, r3
 80061be:	441c      	add	r4, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4423      	add	r3, r4
 80061c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ec:	b29c      	uxth	r4, r3
 80061ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80061f2:	b29c      	uxth	r4, r3
 80061f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80061f8:	b29c      	uxth	r4, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	441a      	add	r2, r3
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <USB_EPStartXfer+0x554>)
 8006206:	4323      	orrs	r3, r4
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3754      	adds	r7, #84	; 0x54
 8006212:	46bd      	mov	sp, r7
 8006214:	bd90      	pop	{r4, r7, pc}
 8006216:	bf00      	nop
 8006218:	ffff8080 	.word	0xffff8080

0800621c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800621c:	b490      	push	{r4, r7}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d018      	beq.n	8006260 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006244:	b29c      	uxth	r4, r3
 8006246:	f084 0310 	eor.w	r3, r4, #16
 800624a:	b29c      	uxth	r4, r3
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	441a      	add	r2, r3
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <USB_EPSetStall+0x80>)
 8006258:	4323      	orrs	r3, r4
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]
 800625e:	e017      	b.n	8006290 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	b29c      	uxth	r4, r3
 8006278:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800627c:	b29c      	uxth	r4, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	4b04      	ldr	r3, [pc, #16]	; (800629c <USB_EPSetStall+0x80>)
 800628a:	4323      	orrs	r3, r4
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bc90      	pop	{r4, r7}
 800629a:	4770      	bx	lr
 800629c:	ffff8080 	.word	0xffff8080

080062a0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062a0:	b490      	push	{r4, r7}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	7b1b      	ldrb	r3, [r3, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d17d      	bne.n	80063ae <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d03d      	beq.n	8006336 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29c      	uxth	r4, r3
 80062c8:	4623      	mov	r3, r4
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d014      	beq.n	80062fc <USB_EPClearStall+0x5c>
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e8:	b29c      	uxth	r4, r3
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	441a      	add	r2, r3
 80062f4:	4b31      	ldr	r3, [pc, #196]	; (80063bc <USB_EPClearStall+0x11c>)
 80062f6:	4323      	orrs	r3, r4
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	78db      	ldrb	r3, [r3, #3]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d054      	beq.n	80063ae <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631a:	b29c      	uxth	r4, r3
 800631c:	f084 0320 	eor.w	r3, r4, #32
 8006320:	b29c      	uxth	r4, r3
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	441a      	add	r2, r3
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <USB_EPClearStall+0x120>)
 800632e:	4323      	orrs	r3, r4
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
 8006334:	e03b      	b.n	80063ae <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29c      	uxth	r4, r3
 8006344:	4623      	mov	r3, r4
 8006346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <USB_EPClearStall+0xd8>
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	b29c      	uxth	r4, r3
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <USB_EPClearStall+0x124>)
 8006372:	4323      	orrs	r3, r4
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	b29c      	uxth	r4, r3
 8006390:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006394:	b29c      	uxth	r4, r3
 8006396:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800639a:	b29c      	uxth	r4, r3
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <USB_EPClearStall+0x120>)
 80063a8:	4323      	orrs	r3, r4
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc90      	pop	{r4, r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	ffff80c0 	.word	0xffff80c0
 80063c0:	ffff8080 	.word	0xffff8080
 80063c4:	ffffc080 	.word	0xffffc080

080063c8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2280      	movs	r2, #128	; 0x80
 80063de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006410:	b29b      	uxth	r3, r3
 8006412:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006436:	b480      	push	{r7}
 8006438:	b08d      	sub	sp, #52	; 0x34
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	4611      	mov	r1, r2
 8006442:	461a      	mov	r2, r3
 8006444:	460b      	mov	r3, r1
 8006446:	80fb      	strh	r3, [r7, #6]
 8006448:	4613      	mov	r3, r2
 800644a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800644c:	88bb      	ldrh	r3, [r7, #4]
 800644e:	3301      	adds	r3, #1
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	005a      	lsls	r2, r3, #1
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646e:	e01e      	b.n	80064ae <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	3301      	adds	r3, #1
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	b29a      	uxth	r2, r3
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	3302      	adds	r3, #2
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	3302      	adds	r3, #2
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	3b01      	subs	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1dd      	bne.n	8006470 <USB_WritePMA+0x3a>
  }
}
 80064b4:	bf00      	nop
 80064b6:	3734      	adds	r7, #52	; 0x34
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064be:	b480      	push	{r7}
 80064c0:	b08b      	sub	sp, #44	; 0x2c
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	4611      	mov	r1, r2
 80064ca:	461a      	mov	r2, r3
 80064cc:	460b      	mov	r3, r1
 80064ce:	80fb      	strh	r3, [r7, #6]
 80064d0:	4613      	mov	r3, r2
 80064d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064d4:	88bb      	ldrh	r3, [r7, #4]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	005a      	lsls	r2, r3, #1
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	e01a      	b.n	800652e <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	3302      	adds	r3, #2
 8006502:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	b2da      	uxtb	r2, r3
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	3302      	adds	r3, #2
 8006526:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	3b01      	subs	r3, #1
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e1      	bne.n	80064f8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006534:	88bb      	ldrh	r3, [r7, #4]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <USB_ReadPMA+0x90>
  {
    temp = *pdwVal;
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	701a      	strb	r2, [r3, #0]
  }
}
 800654e:	bf00      	nop
 8006550:	372c      	adds	r7, #44	; 0x2c
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7c1b      	ldrb	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006574:	2202      	movs	r2, #2
 8006576:	2181      	movs	r1, #129	; 0x81
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fe1e 	bl	80081ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006588:	2202      	movs	r2, #2
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fe14 	bl	80081ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800659a:	e012      	b.n	80065c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	2202      	movs	r2, #2
 80065a0:	2181      	movs	r1, #129	; 0x81
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fe09 	bl	80081ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	2202      	movs	r2, #2
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fe00 	bl	80081ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065c2:	2308      	movs	r3, #8
 80065c4:	2203      	movs	r2, #3
 80065c6:	2182      	movs	r1, #130	; 0x82
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fdf6 	bl	80081ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80065d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065d8:	f001 ff10 	bl	80083fc <USBD_static_malloc>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
 80065f2:	e026      	b.n	8006642 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7c1b      	ldrb	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006628:	2101      	movs	r1, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 feaf 	bl	800838e <USBD_LL_PrepareReceive>
 8006630:	e007      	b.n	8006642 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006638:	2340      	movs	r3, #64	; 0x40
 800663a:	2101      	movs	r1, #1
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 fea6 	bl	800838e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800665c:	2181      	movs	r1, #129	; 0x81
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fdd1 	bl	8008206 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fdca 	bl	8008206 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800667a:	2182      	movs	r1, #130	; 0x82
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fdc2 	bl	8008206 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 feb6 	bl	8008414 <USBD_static_free>
    pdev->pClassData = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d039      	beq.n	8006758 <USBD_CDC_Setup+0x9e>
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d17c      	bne.n	80067e2 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	88db      	ldrh	r3, [r3, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d029      	beq.n	8006744 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da11      	bge.n	800671e <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006706:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	88d2      	ldrh	r2, [r2, #6]
 800670c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800670e:	6939      	ldr	r1, [r7, #16]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	88db      	ldrh	r3, [r3, #6]
 8006714:	461a      	mov	r2, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f980 	bl	8007a1c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800671c:	e068      	b.n	80067f0 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	785a      	ldrb	r2, [r3, #1]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	88db      	ldrh	r3, [r3, #6]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006734:	6939      	ldr	r1, [r7, #16]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	461a      	mov	r2, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 f99b 	bl	8007a78 <USBD_CtlPrepareRx>
    break;
 8006742:	e055      	b.n	80067f0 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	7850      	ldrb	r0, [r2, #1]
 8006750:	2200      	movs	r2, #0
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	4798      	blx	r3
    break;
 8006756:	e04b      	b.n	80067f0 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b0a      	cmp	r3, #10
 800675e:	d017      	beq.n	8006790 <USBD_CDC_Setup+0xd6>
 8006760:	2b0b      	cmp	r3, #11
 8006762:	d029      	beq.n	80067b8 <USBD_CDC_Setup+0xfe>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d133      	bne.n	80067d0 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800676e:	2b03      	cmp	r3, #3
 8006770:	d107      	bne.n	8006782 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006772:	f107 030c 	add.w	r3, r7, #12
 8006776:	2202      	movs	r2, #2
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 f94e 	bl	8007a1c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006780:	e02e      	b.n	80067e0 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f8df 	bl	8007948 <USBD_CtlError>
			  ret = USBD_FAIL;
 800678a:	2302      	movs	r3, #2
 800678c:	75fb      	strb	r3, [r7, #23]
      break;
 800678e:	e027      	b.n	80067e0 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006796:	2b03      	cmp	r3, #3
 8006798:	d107      	bne.n	80067aa <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800679a:	f107 030f 	add.w	r3, r7, #15
 800679e:	2201      	movs	r2, #1
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 f93a 	bl	8007a1c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80067a8:	e01a      	b.n	80067e0 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f8cb 	bl	8007948 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067b2:	2302      	movs	r3, #2
 80067b4:	75fb      	strb	r3, [r7, #23]
      break;
 80067b6:	e013      	b.n	80067e0 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d00d      	beq.n	80067de <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f8bf 	bl	8007948 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067ca:	2302      	movs	r3, #2
 80067cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80067ce:	e006      	b.n	80067de <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 f8b8 	bl	8007948 <USBD_CtlError>
      ret = USBD_FAIL;
 80067d8:	2302      	movs	r3, #2
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	e000      	b.n	80067e0 <USBD_CDC_Setup+0x126>
      break;
 80067de:	bf00      	nop
    }
    break;
 80067e0:	e006      	b.n	80067f0 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 f8af 	bl	8007948 <USBD_CtlError>
    ret = USBD_FAIL;
 80067ea:	2302      	movs	r3, #2
 80067ec:	75fb      	strb	r3, [r7, #23]
    break;
 80067ee:	bf00      	nop
  }

  return ret;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800680c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006814:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800681c:	2b00      	cmp	r3, #0
 800681e:	d037      	beq.n	8006890 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006820:	78fa      	ldrb	r2, [r7, #3]
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	331c      	adds	r3, #28
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d026      	beq.n	8006884 <USBD_CDC_DataIn+0x8a>
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	331c      	adds	r3, #28
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	0152      	lsls	r2, r2, #5
 800684e:	440a      	add	r2, r1
 8006850:	3238      	adds	r2, #56	; 0x38
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	fbb3 f1f2 	udiv	r1, r3, r2
 8006858:	fb02 f201 	mul.w	r2, r2, r1
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d110      	bne.n	8006884 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006862:	78fa      	ldrb	r2, [r7, #3]
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	331c      	adds	r3, #28
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006876:	78f9      	ldrb	r1, [r7, #3]
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 fd63 	bl	8008348 <USBD_LL_Transmit>
 8006882:	e003      	b.n	800688c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006890:	2302      	movs	r3, #2
  }
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fd8e 	bl	80083d4 <USBD_LL_GetRxDataSize>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068de:	4611      	mov	r1, r2
 80068e0:	4798      	blx	r3

    return USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068fe:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006906:	2b00      	cmp	r3, #0
 8006908:	d015      	beq.n	8006936 <USBD_CDC_EP0_RxReady+0x46>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006910:	2bff      	cmp	r3, #255	; 0xff
 8006912:	d010      	beq.n	8006936 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006922:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800692a:	b292      	uxth	r2, r2
 800692c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	22ff      	movs	r2, #255	; 0xff
 8006932:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2243      	movs	r2, #67	; 0x43
 800694c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800694e:	4b03      	ldr	r3, [pc, #12]	; (800695c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000094 	.word	0x20000094

08006960 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2243      	movs	r2, #67	; 0x43
 800696c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000050 	.word	0x20000050

08006980 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2243      	movs	r2, #67	; 0x43
 800698c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800698e:	4b03      	ldr	r3, [pc, #12]	; (800699c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	200000d8 	.word	0x200000d8

080069a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	220a      	movs	r2, #10
 80069ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	2000000c 	.word	0x2000000c

080069c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069ca:	2302      	movs	r3, #2
 80069cc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	4613      	mov	r3, r2
 80069f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a0a:	88fa      	ldrh	r2, [r7, #6]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a52:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01c      	beq.n	8006a98 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d115      	bne.n	8006a94 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2181      	movs	r1, #129	; 0x81
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc5c 	bl	8008348 <USBD_LL_Transmit>

      return USBD_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	e002      	b.n	8006a9a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a98:	2302      	movs	r3, #2
  }
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d017      	beq.n	8006aec <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7c1b      	ldrb	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ace:	2101      	movs	r1, #1
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fc5c 	bl	800838e <USBD_LL_PrepareReceive>
 8006ad6:	e007      	b.n	8006ae8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fc53 	bl	800838e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	4613      	mov	r3, r2
 8006b02:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e01a      	b.n	8006b44 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	79fa      	ldrb	r2, [r7, #7]
 8006b3a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f001 fac7 	bl	80080d0 <USBD_LL_Init>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e001      	b.n	8006b72 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fafc 	bl	8008184 <USBD_LL_Start>

  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	4611      	mov	r1, r2
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fe55 	bl	80078d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d00c      	beq.n	8006c64 <USBD_LL_SetupStage+0x56>
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d302      	bcc.n	8006c54 <USBD_LL_SetupStage+0x46>
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d010      	beq.n	8006c74 <USBD_LL_SetupStage+0x66>
 8006c52:	e017      	b.n	8006c84 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f9c5 	bl	8006fec <USBD_StdDevReq>
    break;
 8006c62:	e01a      	b.n	8006c9a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa27 	bl	80070c0 <USBD_StdItfReq>
    break;
 8006c72:	e012      	b.n	8006c9a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa65 	bl	800714c <USBD_StdEPReq>
    break;
 8006c82:	e00a      	b.n	8006c9a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fad6 	bl	8008244 <USBD_LL_StallEP>
    break;
 8006c98:	bf00      	nop
  }

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	460b      	mov	r3, r1
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d14b      	bne.n	8006d50 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006cbe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d134      	bne.n	8006d34 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d919      	bls.n	8006d0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d203      	bcs.n	8006cf8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	e002      	b.n	8006cfe <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fed6 	bl	8007ab4 <USBD_CtlContinueRx>
 8006d08:	e038      	b.n	8006d7c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d105      	bne.n	8006d2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fed3 	bl	8007ad8 <USBD_CtlSendStatus>
 8006d32:	e023      	b.n	8006d7c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d11e      	bne.n	8006d7c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006d46:	2100      	movs	r1, #0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f001 fa7b 	bl	8008244 <USBD_LL_StallEP>
 8006d4e:	e015      	b.n	8006d7c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d108      	bne.n	8006d78 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	7afa      	ldrb	r2, [r7, #11]
 8006d70:	4611      	mov	r1, r2
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	4798      	blx	r3
 8006d76:	e001      	b.n	8006d7c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e000      	b.n	8006d7e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d17f      	bne.n	8006e9a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d15c      	bne.n	8006e64 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d915      	bls.n	8006de2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fe40 	bl	8007a54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 fad7 	bl	800838e <USBD_LL_PrepareReceive>
 8006de0:	e04e      	b.n	8006e80 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6912      	ldr	r2, [r2, #16]
 8006dea:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dee:	fb02 f201 	mul.w	r2, r2, r1
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11c      	bne.n	8006e32 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d316      	bcc.n	8006e32 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d20f      	bcs.n	8006e32 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fe1c 	bl	8007a54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006e24:	2300      	movs	r3, #0
 8006e26:	2200      	movs	r2, #0
 8006e28:	2100      	movs	r1, #0
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f001 faaf 	bl	800838e <USBD_LL_PrepareReceive>
 8006e30:	e026      	b.n	8006e80 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d105      	bne.n	8006e54 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e54:	2180      	movs	r1, #128	; 0x80
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 f9f4 	bl	8008244 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fe4e 	bl	8007afe <USBD_CtlReceiveStatus>
 8006e62:	e00d      	b.n	8006e80 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d004      	beq.n	8006e78 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d103      	bne.n	8006e80 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f001 f9e2 	bl	8008244 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d11d      	bne.n	8006ec6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fe83 	bl	8006b96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006e98:	e015      	b.n	8006ec6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00d      	beq.n	8006ec2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d108      	bne.n	8006ec2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	7afa      	ldrb	r2, [r7, #11]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	4798      	blx	r3
 8006ec0:	e001      	b.n	8006ec6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e000      	b.n	8006ec8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ed8:	2340      	movs	r3, #64	; 0x40
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f96b 	bl	80081ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2240      	movs	r2, #64	; 0x40
 8006ef0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ef4:	2340      	movs	r3, #64	; 0x40
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2180      	movs	r1, #128	; 0x80
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f95d 	bl	80081ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2240      	movs	r2, #64	; 0x40
 8006f0a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6852      	ldr	r2, [r2, #4]
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	4611      	mov	r1, r2
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	4798      	blx	r3
  }

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d10b      	bne.n	8006fe2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007002:	2b20      	cmp	r3, #32
 8007004:	d004      	beq.n	8007010 <USBD_StdDevReq+0x24>
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d002      	beq.n	8007010 <USBD_StdDevReq+0x24>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d008      	beq.n	8007020 <USBD_StdDevReq+0x34>
 800700e:	e04c      	b.n	80070aa <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
    break;
 800701e:	e049      	b.n	80070b4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	2b09      	cmp	r3, #9
 8007026:	d83a      	bhi.n	800709e <USBD_StdDevReq+0xb2>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <USBD_StdDevReq+0x44>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007081 	.word	0x08007081
 8007034:	08007095 	.word	0x08007095
 8007038:	0800709f 	.word	0x0800709f
 800703c:	0800708b 	.word	0x0800708b
 8007040:	0800709f 	.word	0x0800709f
 8007044:	08007063 	.word	0x08007063
 8007048:	08007059 	.word	0x08007059
 800704c:	0800709f 	.word	0x0800709f
 8007050:	08007077 	.word	0x08007077
 8007054:	0800706d 	.word	0x0800706d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9d2 	bl	8007404 <USBD_GetDescriptor>
      break;
 8007060:	e022      	b.n	80070a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fac7 	bl	80075f8 <USBD_SetAddress>
      break;
 800706a:	e01d      	b.n	80070a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fb04 	bl	800767c <USBD_SetConfig>
      break;
 8007074:	e018      	b.n	80070a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fb8d 	bl	8007798 <USBD_GetConfig>
      break;
 800707e:	e013      	b.n	80070a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fbbc 	bl	8007800 <USBD_GetStatus>
      break;
 8007088:	e00e      	b.n	80070a8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fbea 	bl	8007866 <USBD_SetFeature>
      break;
 8007092:	e009      	b.n	80070a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fbf9 	bl	800788e <USBD_ClrFeature>
      break;
 800709c:	e004      	b.n	80070a8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fc51 	bl	8007948 <USBD_CtlError>
      break;
 80070a6:	bf00      	nop
    }
    break;
 80070a8:	e004      	b.n	80070b4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fc4b 	bl	8007948 <USBD_CtlError>
    break;
 80070b2:	bf00      	nop
  }

  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d003      	beq.n	80070e2 <USBD_StdItfReq+0x22>
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d001      	beq.n	80070e2 <USBD_StdItfReq+0x22>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d12a      	bne.n	8007138 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070e8:	3b01      	subs	r3, #1
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d81d      	bhi.n	800712a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d813      	bhi.n	8007120 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	88db      	ldrh	r3, [r3, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d110      	bne.n	8007134 <USBD_StdItfReq+0x74>
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10d      	bne.n	8007134 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fcdd 	bl	8007ad8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800711e:	e009      	b.n	8007134 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fc10 	bl	8007948 <USBD_CtlError>
      break;
 8007128:	e004      	b.n	8007134 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fc0b 	bl	8007948 <USBD_CtlError>
      break;
 8007132:	e000      	b.n	8007136 <USBD_StdItfReq+0x76>
      break;
 8007134:	bf00      	nop
    }
    break;
 8007136:	e004      	b.n	8007142 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fc04 	bl	8007948 <USBD_CtlError>
    break;
 8007140:	bf00      	nop
  }

  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	889b      	ldrh	r3, [r3, #4]
 800715e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007168:	2b20      	cmp	r3, #32
 800716a:	d004      	beq.n	8007176 <USBD_StdEPReq+0x2a>
 800716c:	2b40      	cmp	r3, #64	; 0x40
 800716e:	d002      	beq.n	8007176 <USBD_StdEPReq+0x2a>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <USBD_StdEPReq+0x3a>
 8007174:	e13b      	b.n	80073ee <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
    break;
 8007184:	e138      	b.n	80073f8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800718e:	2b20      	cmp	r3, #32
 8007190:	d10a      	bne.n	80071a8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	e128      	b.n	80073fa <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d03e      	beq.n	800722e <USBD_StdEPReq+0xe2>
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d002      	beq.n	80071ba <USBD_StdEPReq+0x6e>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d070      	beq.n	800729a <USBD_StdEPReq+0x14e>
 80071b8:	e113      	b.n	80073e2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d002      	beq.n	80071ca <USBD_StdEPReq+0x7e>
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d015      	beq.n	80071f4 <USBD_StdEPReq+0xa8>
 80071c8:	e02b      	b.n	8007222 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00c      	beq.n	80071ea <USBD_StdEPReq+0x9e>
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d009      	beq.n	80071ea <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 f832 	bl	8008244 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80071e0:	2180      	movs	r1, #128	; 0x80
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f82e 	bl	8008244 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80071e8:	e020      	b.n	800722c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbab 	bl	8007948 <USBD_CtlError>
        break;
 80071f2:	e01b      	b.n	800722c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	885b      	ldrh	r3, [r3, #2]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10e      	bne.n	800721a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <USBD_StdEPReq+0xce>
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b80      	cmp	r3, #128	; 0x80
 8007206:	d008      	beq.n	800721a <USBD_StdEPReq+0xce>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	88db      	ldrh	r3, [r3, #6]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f815 	bl	8008244 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fc5c 	bl	8007ad8 <USBD_CtlSendStatus>

        break;
 8007220:	e004      	b.n	800722c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fb8f 	bl	8007948 <USBD_CtlError>
        break;
 800722a:	bf00      	nop
      }
      break;
 800722c:	e0de      	b.n	80073ec <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007234:	2b02      	cmp	r3, #2
 8007236:	d002      	beq.n	800723e <USBD_StdEPReq+0xf2>
 8007238:	2b03      	cmp	r3, #3
 800723a:	d015      	beq.n	8007268 <USBD_StdEPReq+0x11c>
 800723c:	e026      	b.n	800728c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <USBD_StdEPReq+0x112>
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	d009      	beq.n	800725e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fff8 	bl	8008244 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007254:	2180      	movs	r1, #128	; 0x80
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fff4 	bl	8008244 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800725c:	e01c      	b.n	8007298 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fb71 	bl	8007948 <USBD_CtlError>
        break;
 8007266:	e017      	b.n	8007298 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d112      	bne.n	8007296 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 ffff 	bl	8008282 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fc27 	bl	8007ad8 <USBD_CtlSendStatus>
        }
        break;
 800728a:	e004      	b.n	8007296 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb5a 	bl	8007948 <USBD_CtlError>
        break;
 8007294:	e000      	b.n	8007298 <USBD_StdEPReq+0x14c>
        break;
 8007296:	bf00      	nop
      }
      break;
 8007298:	e0a8      	b.n	80073ec <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d002      	beq.n	80072aa <USBD_StdEPReq+0x15e>
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d031      	beq.n	800730c <USBD_StdEPReq+0x1c0>
 80072a8:	e095      	b.n	80073d6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <USBD_StdEPReq+0x174>
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d004      	beq.n	80072c0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb45 	bl	8007948 <USBD_CtlError>
          break;
 80072be:	e08f      	b.n	80073e0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80072c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da0b      	bge.n	80072e0 <USBD_StdEPReq+0x194>
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	3310      	adds	r3, #16
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	3304      	adds	r3, #4
 80072de:	e00a      	b.n	80072f6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2202      	movs	r2, #2
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb89 	bl	8007a1c <USBD_CtlSendData>
          break;
 800730a:	e069      	b.n	80073e0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800730c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007310:	2b00      	cmp	r3, #0
 8007312:	da11      	bge.n	8007338 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	3318      	adds	r3, #24
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d117      	bne.n	800735e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb09 	bl	8007948 <USBD_CtlError>
            break;
 8007336:	e053      	b.n	80073e0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	f003 020f 	and.w	r2, r3, #15
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 faf6 	bl	8007948 <USBD_CtlError>
            break;
 800735c:	e040      	b.n	80073e0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800735e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	da0b      	bge.n	800737e <USBD_StdEPReq+0x232>
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	3310      	adds	r3, #16
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4413      	add	r3, r2
 800737a:	3304      	adds	r3, #4
 800737c:	e00a      	b.n	8007394 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4413      	add	r3, r2
 8007394:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <USBD_StdEPReq+0x256>
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	2b80      	cmp	r3, #128	; 0x80
 80073a0:	d103      	bne.n	80073aa <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e00e      	b.n	80073c8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 ff86 	bl	80082c0 <USBD_LL_IsStallEP>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2201      	movs	r2, #1
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	e002      	b.n	80073c8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2202      	movs	r2, #2
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb24 	bl	8007a1c <USBD_CtlSendData>
          break;
 80073d4:	e004      	b.n	80073e0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fab5 	bl	8007948 <USBD_CtlError>
        break;
 80073de:	bf00      	nop
      }
      break;
 80073e0:	e004      	b.n	80073ec <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 faaf 	bl	8007948 <USBD_CtlError>
      break;
 80073ea:	bf00      	nop
    }
    break;
 80073ec:	e004      	b.n	80073f8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 faa9 	bl	8007948 <USBD_CtlError>
    break;
 80073f6:	bf00      	nop
  }

  return ret;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	885b      	ldrh	r3, [r3, #2]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	2b06      	cmp	r3, #6
 800741a:	f200 80c9 	bhi.w	80075b0 <USBD_GetDescriptor+0x1ac>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <USBD_GetDescriptor+0x20>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007441 	.word	0x08007441
 8007428:	08007459 	.word	0x08007459
 800742c:	08007499 	.word	0x08007499
 8007430:	080075b1 	.word	0x080075b1
 8007434:	080075b1 	.word	0x080075b1
 8007438:	0800755d 	.word	0x0800755d
 800743c:	08007583 	.word	0x08007583
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 010a 	add.w	r1, r7, #10
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
    break;
 8007456:	e0b0      	b.n	80075ba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	7c1b      	ldrb	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10d      	bne.n	800747c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f107 020a 	add.w	r2, r7, #10
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	2202      	movs	r2, #2
 8007478:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800747a:	e09e      	b.n	80075ba <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f107 020a 	add.w	r2, r7, #10
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	2202      	movs	r2, #2
 8007494:	701a      	strb	r2, [r3, #0]
    break;
 8007496:	e090      	b.n	80075ba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d856      	bhi.n	8007550 <USBD_GetDescriptor+0x14c>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <USBD_GetDescriptor+0xa4>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074f1 	.word	0x080074f1
 80074b4:	08007509 	.word	0x08007509
 80074b8:	08007521 	.word	0x08007521
 80074bc:	08007539 	.word	0x08007539
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	7c12      	ldrb	r2, [r2, #16]
 80074cc:	f107 010a 	add.w	r1, r7, #10
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
 80074d4:	60f8      	str	r0, [r7, #12]
      break;
 80074d6:	e040      	b.n	800755a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 010a 	add.w	r1, r7, #10
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
      break;
 80074ee:	e034      	b.n	800755a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 010a 	add.w	r1, r7, #10
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
      break;
 8007506:	e028      	b.n	800755a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	7c12      	ldrb	r2, [r2, #16]
 8007514:	f107 010a 	add.w	r1, r7, #10
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	60f8      	str	r0, [r7, #12]
      break;
 800751e:	e01c      	b.n	800755a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 010a 	add.w	r1, r7, #10
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
      break;
 8007536:	e010      	b.n	800755a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	7c12      	ldrb	r2, [r2, #16]
 8007544:	f107 010a 	add.w	r1, r7, #10
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	60f8      	str	r0, [r7, #12]
      break;
 800754e:	e004      	b.n	800755a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9f8 	bl	8007948 <USBD_CtlError>
      return;
 8007558:	e04b      	b.n	80075f2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800755a:	e02e      	b.n	80075ba <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7c1b      	ldrb	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d109      	bne.n	8007578 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756c:	f107 020a 	add.w	r2, r7, #10
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	60f8      	str	r0, [r7, #12]
      break;
 8007576:	e020      	b.n	80075ba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9e4 	bl	8007948 <USBD_CtlError>
      return;
 8007580:	e037      	b.n	80075f2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7c1b      	ldrb	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f107 020a 	add.w	r2, r7, #10
 8007596:	4610      	mov	r0, r2
 8007598:	4798      	blx	r3
 800759a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	2207      	movs	r2, #7
 80075a2:	701a      	strb	r2, [r3, #0]
      break;
 80075a4:	e009      	b.n	80075ba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f9cd 	bl	8007948 <USBD_CtlError>
      return;
 80075ae:	e020      	b.n	80075f2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9c8 	bl	8007948 <USBD_CtlError>
    return;
 80075b8:	e01b      	b.n	80075f2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80075ba:	897b      	ldrh	r3, [r7, #10]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d011      	beq.n	80075e4 <USBD_GetDescriptor+0x1e0>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	88db      	ldrh	r3, [r3, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00d      	beq.n	80075e4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	88da      	ldrh	r2, [r3, #6]
 80075cc:	897b      	ldrh	r3, [r7, #10]
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bf28      	it	cs
 80075d2:	4613      	movcs	r3, r2
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80075d8:	897b      	ldrh	r3, [r7, #10]
 80075da:	461a      	mov	r2, r3
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa1c 	bl	8007a1c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	88db      	ldrh	r3, [r3, #6]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fa73 	bl	8007ad8 <USBD_CtlSendStatus>
  }
}
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	889b      	ldrh	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d130      	bne.n	800766c <USBD_SetAddress+0x74>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	88db      	ldrh	r3, [r3, #6]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d12c      	bne.n	800766c <USBD_SetAddress+0x74>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	2b7f      	cmp	r3, #127	; 0x7f
 8007618:	d828      	bhi.n	800766c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	885b      	ldrh	r3, [r3, #2]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007624:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800762c:	2b03      	cmp	r3, #3
 800762e:	d104      	bne.n	800763a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f988 	bl	8007948 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007638:	e01c      	b.n	8007674 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7bfa      	ldrb	r2, [r7, #15]
 800763e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fe5f 	bl	800830a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa43 	bl	8007ad8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007660:	e008      	b.n	8007674 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	e003      	b.n	8007674 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f96a 	bl	8007948 <USBD_CtlError>
  }
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	885b      	ldrh	r3, [r3, #2]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	4b41      	ldr	r3, [pc, #260]	; (8007794 <USBD_SetConfig+0x118>)
 800768e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007690:	4b40      	ldr	r3, [pc, #256]	; (8007794 <USBD_SetConfig+0x118>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d904      	bls.n	80076a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f954 	bl	8007948 <USBD_CtlError>
 80076a0:	e075      	b.n	800778e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d002      	beq.n	80076b2 <USBD_SetConfig+0x36>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d023      	beq.n	80076f8 <USBD_SetConfig+0x7c>
 80076b0:	e062      	b.n	8007778 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80076b2:	4b38      	ldr	r3, [pc, #224]	; (8007794 <USBD_SetConfig+0x118>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01a      	beq.n	80076f0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80076ba:	4b36      	ldr	r3, [pc, #216]	; (8007794 <USBD_SetConfig+0x118>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076cc:	4b31      	ldr	r3, [pc, #196]	; (8007794 <USBD_SetConfig+0x118>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff fa69 	bl	8006baa <USBD_SetClassConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d104      	bne.n	80076e8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f931 	bl	8007948 <USBD_CtlError>
          return;
 80076e6:	e052      	b.n	800778e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9f5 	bl	8007ad8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80076ee:	e04e      	b.n	800778e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f9f1 	bl	8007ad8 <USBD_CtlSendStatus>
      break;
 80076f6:	e04a      	b.n	800778e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076f8:	4b26      	ldr	r3, [pc, #152]	; (8007794 <USBD_SetConfig+0x118>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d112      	bne.n	8007726 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007708:	4b22      	ldr	r3, [pc, #136]	; (8007794 <USBD_SetConfig+0x118>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007712:	4b20      	ldr	r3, [pc, #128]	; (8007794 <USBD_SetConfig+0x118>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff fa65 	bl	8006be8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9da 	bl	8007ad8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007724:	e033      	b.n	800778e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007726:	4b1b      	ldr	r3, [pc, #108]	; (8007794 <USBD_SetConfig+0x118>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d01d      	beq.n	8007770 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fa53 	bl	8006be8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007742:	4b14      	ldr	r3, [pc, #80]	; (8007794 <USBD_SetConfig+0x118>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800774c:	4b11      	ldr	r3, [pc, #68]	; (8007794 <USBD_SetConfig+0x118>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fa29 	bl	8006baa <USBD_SetClassConfig>
 8007758:	4603      	mov	r3, r0
 800775a:	2b02      	cmp	r3, #2
 800775c:	d104      	bne.n	8007768 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f8f1 	bl	8007948 <USBD_CtlError>
          return;
 8007766:	e012      	b.n	800778e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f9b5 	bl	8007ad8 <USBD_CtlSendStatus>
      break;
 800776e:	e00e      	b.n	800778e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f9b1 	bl	8007ad8 <USBD_CtlSendStatus>
      break;
 8007776:	e00a      	b.n	800778e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8e4 	bl	8007948 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <USBD_SetConfig+0x118>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff fa2e 	bl	8006be8 <USBD_ClrClassConfig>
      break;
 800778c:	bf00      	nop
    }
  }
}
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000200 	.word	0x20000200

08007798 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	88db      	ldrh	r3, [r3, #6]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d004      	beq.n	80077b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f8cb 	bl	8007948 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80077b2:	e021      	b.n	80077f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	db17      	blt.n	80077ee <USBD_GetConfig+0x56>
 80077be:	2b02      	cmp	r3, #2
 80077c0:	dd02      	ble.n	80077c8 <USBD_GetConfig+0x30>
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d00b      	beq.n	80077de <USBD_GetConfig+0x46>
 80077c6:	e012      	b.n	80077ee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3308      	adds	r3, #8
 80077d2:	2201      	movs	r2, #1
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f920 	bl	8007a1c <USBD_CtlSendData>
      break;
 80077dc:	e00c      	b.n	80077f8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3304      	adds	r3, #4
 80077e2:	2201      	movs	r2, #1
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f918 	bl	8007a1c <USBD_CtlSendData>
      break;
 80077ec:	e004      	b.n	80077f8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f8a9 	bl	8007948 <USBD_CtlError>
      break;
 80077f6:	bf00      	nop
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007810:	3b01      	subs	r3, #1
 8007812:	2b02      	cmp	r3, #2
 8007814:	d81e      	bhi.n	8007854 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d004      	beq.n	8007828 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f891 	bl	8007948 <USBD_CtlError>
      break;
 8007826:	e01a      	b.n	800785e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f043 0202 	orr.w	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	330c      	adds	r3, #12
 8007848:	2202      	movs	r2, #2
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8e5 	bl	8007a1c <USBD_CtlSendData>
    break;
 8007852:	e004      	b.n	800785e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f876 	bl	8007948 <USBD_CtlError>
    break;
 800785c:	bf00      	nop
  }
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f929 	bl	8007ad8 <USBD_CtlSendStatus>
  }

}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800789e:	3b01      	subs	r3, #1
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d80b      	bhi.n	80078bc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d10c      	bne.n	80078c6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f90f 	bl	8007ad8 <USBD_CtlSendStatus>
    }
    break;
 80078ba:	e004      	b.n	80078c6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f842 	bl	8007948 <USBD_CtlError>
    break;
 80078c4:	e000      	b.n	80078c8 <USBD_ClrFeature+0x3a>
    break;
 80078c6:	bf00      	nop
  }
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781a      	ldrb	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	785a      	ldrb	r2, [r3, #1]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	3302      	adds	r3, #2
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3303      	adds	r3, #3
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	4413      	add	r3, r2
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	3304      	adds	r3, #4
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b29a      	uxth	r2, r3
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3305      	adds	r3, #5
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	b29b      	uxth	r3, r3
 800791a:	4413      	add	r3, r2
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	3306      	adds	r3, #6
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b29a      	uxth	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3307      	adds	r3, #7
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	b29b      	uxth	r3, r3
 8007936:	4413      	add	r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	80da      	strh	r2, [r3, #6]

}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc75 	bl	8008244 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800795a:	2100      	movs	r1, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc71 	bl	8008244 <USBD_LL_StallEP>
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d032      	beq.n	80079e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f834 	bl	80079ee <USBD_GetLen>
 8007986:	4603      	mov	r3, r0
 8007988:	3301      	adds	r3, #1
 800798a:	b29b      	uxth	r3, r3
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	75fa      	strb	r2, [r7, #23]
 800799a:	461a      	mov	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4413      	add	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	7812      	ldrb	r2, [r2, #0]
 80079a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	75fa      	strb	r2, [r7, #23]
 80079ac:	461a      	mov	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4413      	add	r3, r2
 80079b2:	2203      	movs	r2, #3
 80079b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079b6:	e012      	b.n	80079de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	60fa      	str	r2, [r7, #12]
 80079be:	7dfa      	ldrb	r2, [r7, #23]
 80079c0:	1c51      	adds	r1, r2, #1
 80079c2:	75f9      	strb	r1, [r7, #23]
 80079c4:	4611      	mov	r1, r2
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	440a      	add	r2, r1
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	75fa      	strb	r2, [r7, #23]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e8      	bne.n	80079b8 <USBD_GetString+0x4e>
    }
  }
}
 80079e6:	bf00      	nop
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80079fa:	e005      	b.n	8007a08 <USBD_GetLen+0x1a>
    {
        len++;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	3301      	adds	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3301      	adds	r3, #1
 8007a06:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f5      	bne.n	80079fc <USBD_GetLen+0xe>
    }

    return len;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007a32:	88fa      	ldrh	r2, [r7, #6]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007a3e:	88fb      	ldrh	r3, [r7, #6]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	2100      	movs	r1, #0
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fc7f 	bl	8008348 <USBD_LL_Transmit>

  return USBD_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	2100      	movs	r1, #0
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fc6d 	bl	8008348 <USBD_LL_Transmit>

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2203      	movs	r2, #3
 8007a8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007a96:	88fa      	ldrh	r2, [r7, #6]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fc72 	bl	800838e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fc60 	bl	800838e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2200      	movs	r2, #0
 8007aec:	2100      	movs	r1, #0
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc2a 	bl	8008348 <USBD_LL_Transmit>

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2205      	movs	r2, #5
 8007b0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2200      	movs	r2, #0
 8007b12:	2100      	movs	r1, #0
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fc3a 	bl	800838e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4912      	ldr	r1, [pc, #72]	; (8007b74 <MX_USB_DEVICE_Init+0x50>)
 8007b2c:	4812      	ldr	r0, [pc, #72]	; (8007b78 <MX_USB_DEVICE_Init+0x54>)
 8007b2e:	f7fe ffe2 	bl	8006af6 <USBD_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b38:	f7f9 fca6 	bl	8001488 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b3c:	490f      	ldr	r1, [pc, #60]	; (8007b7c <MX_USB_DEVICE_Init+0x58>)
 8007b3e:	480e      	ldr	r0, [pc, #56]	; (8007b78 <MX_USB_DEVICE_Init+0x54>)
 8007b40:	f7ff f804 	bl	8006b4c <USBD_RegisterClass>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b4a:	f7f9 fc9d 	bl	8001488 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b4e:	490c      	ldr	r1, [pc, #48]	; (8007b80 <MX_USB_DEVICE_Init+0x5c>)
 8007b50:	4809      	ldr	r0, [pc, #36]	; (8007b78 <MX_USB_DEVICE_Init+0x54>)
 8007b52:	f7fe ff35 	bl	80069c0 <USBD_CDC_RegisterInterface>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b5c:	f7f9 fc94 	bl	8001488 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b60:	4805      	ldr	r0, [pc, #20]	; (8007b78 <MX_USB_DEVICE_Init+0x54>)
 8007b62:	f7ff f80c 	bl	8006b7e <USBD_Start>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b6c:	f7f9 fc8c 	bl	8001488 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b70:	bf00      	nop
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	2000012c 	.word	0x2000012c
 8007b78:	2000051c 	.word	0x2000051c
 8007b7c:	20000018 	.word	0x20000018
 8007b80:	2000011c 	.word	0x2000011c

08007b84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4905      	ldr	r1, [pc, #20]	; (8007ba0 <CDC_Init_FS+0x1c>)
 8007b8c:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <CDC_Init_FS+0x20>)
 8007b8e:	f7fe ff2d 	bl	80069ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b92:	4905      	ldr	r1, [pc, #20]	; (8007ba8 <CDC_Init_FS+0x24>)
 8007b94:	4803      	ldr	r0, [pc, #12]	; (8007ba4 <CDC_Init_FS+0x20>)
 8007b96:	f7fe ff42 	bl	8006a1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000ba0 	.word	0x20000ba0
 8007ba4:	2000051c 	.word	0x2000051c
 8007ba8:	200007b8 	.word	0x200007b8

08007bac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr
	...

08007bbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	2b23      	cmp	r3, #35	; 0x23
 8007bd0:	d84a      	bhi.n	8007c68 <CDC_Control_FS+0xac>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <CDC_Control_FS+0x1c>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c69 	.word	0x08007c69
 8007bdc:	08007c69 	.word	0x08007c69
 8007be0:	08007c69 	.word	0x08007c69
 8007be4:	08007c69 	.word	0x08007c69
 8007be8:	08007c69 	.word	0x08007c69
 8007bec:	08007c69 	.word	0x08007c69
 8007bf0:	08007c69 	.word	0x08007c69
 8007bf4:	08007c69 	.word	0x08007c69
 8007bf8:	08007c69 	.word	0x08007c69
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007c69 	.word	0x08007c69
 8007c0c:	08007c69 	.word	0x08007c69
 8007c10:	08007c69 	.word	0x08007c69
 8007c14:	08007c69 	.word	0x08007c69
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c69 	.word	0x08007c69
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c69 	.word	0x08007c69
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c69 	.word	0x08007c69
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007c69 	.word	0x08007c69
 8007c5c:	08007c69 	.word	0x08007c69
 8007c60:	08007c69 	.word	0x08007c69
 8007c64:	08007c69 	.word	0x08007c69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c68:	bf00      	nop
  }

  return (USBD_OK);
 8007c6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4805      	ldr	r0, [pc, #20]	; (8007c9c <CDC_Receive_FS+0x24>)
 8007c86:	f7fe feca 	bl	8006a1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c8a:	4804      	ldr	r0, [pc, #16]	; (8007c9c <CDC_Receive_FS+0x24>)
 8007c8c:	f7fe ff09 	bl	8006aa2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	2000051c 	.word	0x2000051c

08007ca0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <CDC_Transmit_FS+0x48>)
 8007cb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007cb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e00b      	b.n	8007cde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007cc6:	887b      	ldrh	r3, [r7, #2]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4806      	ldr	r0, [pc, #24]	; (8007ce8 <CDC_Transmit_FS+0x48>)
 8007cce:	f7fe fe8d 	bl	80069ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007cd2:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <CDC_Transmit_FS+0x48>)
 8007cd4:	f7fe feb6 	bl	8006a44 <USBD_CDC_TransmitPacket>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	2000051c 	.word	0x2000051c

08007cec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2212      	movs	r2, #18
 8007cfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20000148 	.word	0x20000148

08007d10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	6039      	str	r1, [r7, #0]
 8007d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d22:	4b03      	ldr	r3, [pc, #12]	; (8007d30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	2000015c 	.word	0x2000015c

08007d34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d105      	bne.n	8007d52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4907      	ldr	r1, [pc, #28]	; (8007d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d4a:	4808      	ldr	r0, [pc, #32]	; (8007d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d4c:	f7ff fe0d 	bl	800796a <USBD_GetString>
 8007d50:	e004      	b.n	8007d5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	4904      	ldr	r1, [pc, #16]	; (8007d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d56:	4805      	ldr	r0, [pc, #20]	; (8007d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d58:	f7ff fe07 	bl	800796a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d5c:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000f88 	.word	0x20000f88
 8007d6c:	08009804 	.word	0x08009804

08007d70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	4904      	ldr	r1, [pc, #16]	; (8007d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d80:	4804      	ldr	r0, [pc, #16]	; (8007d94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d82:	f7ff fdf2 	bl	800796a <USBD_GetString>
  return USBD_StrDesc;
 8007d86:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000f88 	.word	0x20000f88
 8007d94:	0800981c 	.word	0x0800981c

08007d98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	221a      	movs	r2, #26
 8007da8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007daa:	f000 f843 	bl	8007e34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dae:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000160 	.word	0x20000160

08007dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	4907      	ldr	r1, [pc, #28]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dd2:	4808      	ldr	r0, [pc, #32]	; (8007df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dd4:	f7ff fdc9 	bl	800796a <USBD_GetString>
 8007dd8:	e004      	b.n	8007de4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	4904      	ldr	r1, [pc, #16]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dde:	4805      	ldr	r0, [pc, #20]	; (8007df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007de0:	f7ff fdc3 	bl	800796a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000f88 	.word	0x20000f88
 8007df4:	08009830 	.word	0x08009830

08007df8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	4907      	ldr	r1, [pc, #28]	; (8007e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e0e:	4808      	ldr	r0, [pc, #32]	; (8007e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e10:	f7ff fdab 	bl	800796a <USBD_GetString>
 8007e14:	e004      	b.n	8007e20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	4904      	ldr	r1, [pc, #16]	; (8007e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e1c:	f7ff fda5 	bl	800796a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000f88 	.word	0x20000f88
 8007e30:	0800983c 	.word	0x0800983c

08007e34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e3a:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <Get_SerialNum+0x44>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e40:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <Get_SerialNum+0x48>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <Get_SerialNum+0x4c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4413      	add	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4909      	ldr	r1, [pc, #36]	; (8007e84 <Get_SerialNum+0x50>)
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f814 	bl	8007e8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e64:	2204      	movs	r2, #4
 8007e66:	4908      	ldr	r1, [pc, #32]	; (8007e88 <Get_SerialNum+0x54>)
 8007e68:	68b8      	ldr	r0, [r7, #8]
 8007e6a:	f000 f80f 	bl	8007e8c <IntToUnicode>
  }
}
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	1ff80050 	.word	0x1ff80050
 8007e7c:	1ff80054 	.word	0x1ff80054
 8007e80:	1ff80058 	.word	0x1ff80058
 8007e84:	20000162 	.word	0x20000162
 8007e88:	20000172 	.word	0x20000172

08007e8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4613      	mov	r3, r2
 8007e98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75fb      	strb	r3, [r7, #23]
 8007ea2:	e027      	b.n	8007ef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	0f1b      	lsrs	r3, r3, #28
 8007ea8:	2b09      	cmp	r3, #9
 8007eaa:	d80b      	bhi.n	8007ec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	0f1b      	lsrs	r3, r3, #28
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	440b      	add	r3, r1
 8007ebc:	3230      	adds	r2, #48	; 0x30
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e00a      	b.n	8007eda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	0f1b      	lsrs	r3, r3, #28
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3237      	adds	r2, #55	; 0x37
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
 8007ef4:	7dfa      	ldrb	r2, [r7, #23]
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d3d3      	bcc.n	8007ea4 <IntToUnicode+0x18>
  }
}
 8007efc:	bf00      	nop
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
	...

08007f08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	; 0x28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a20      	ldr	r2, [pc, #128]	; (8007f98 <HAL_PCD_MspInit+0x90>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d13a      	bne.n	8007f90 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_MspInit 0 */
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  /* Enable the GPIOA clock */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f1a:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f20:	f043 0301 	orr.w	r3, r3, #1
 8007f24:	61d3      	str	r3, [r2, #28]
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	693b      	ldr	r3, [r7, #16]

	  /* Configure USB DM/DP pin. This is optional, and maintained only for user guidance.
		 For the STM32L products there is no need to configure the PA12/PA11 pins couple
		 as Alternate Function */
	  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8007f32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f36:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f40:	2303      	movs	r3, #3
 8007f42:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4815      	ldr	r0, [pc, #84]	; (8007fa0 <HAL_PCD_MspInit+0x98>)
 8007f4c:	f7f9 fe98 	bl	8001c80 <HAL_GPIO_Init>

	  /* Enable SYSCFG Clock */
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f50:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	4a11      	ldr	r2, [pc, #68]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6213      	str	r3, [r2, #32]
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	4a0b      	ldr	r2, [pc, #44]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f72:	6253      	str	r3, [r2, #36]	; 0x24
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <HAL_PCD_MspInit+0x94>)
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	2014      	movs	r0, #20
 8007f86:	f7f9 fe44 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007f8a:	2014      	movs	r0, #20
 8007f8c:	f7f9 fe5d 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f90:	bf00      	nop
 8007f92:	3728      	adds	r7, #40	; 0x28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	40005c00 	.word	0x40005c00
 8007f9c:	40023800 	.word	0x40023800
 8007fa0:	40020000 	.word	0x40020000

08007fa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fe fe27 	bl	8006c0e <USBD_LL_SetupStage>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	015b      	lsls	r3, r3, #5
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	4619      	mov	r1, r3
 8007fec:	f7fe fe5a 	bl	8006ca4 <USBD_LL_DataOutStage>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	015b      	lsls	r3, r3, #5
 8008010:	4413      	add	r3, r2
 8008012:	333c      	adds	r3, #60	; 0x3c
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	4619      	mov	r1, r3
 800801a:	f7fe feb4 	bl	8006d86 <USBD_LL_DataInStage>
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe ffbf 	bl	8006fb8 <USBD_LL_SOF>
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d001      	beq.n	800805a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008056:	f7f9 fa17 	bl	8001488 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe ff74 	bl	8006f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe ff2d 	bl	8006ed0 <USBD_LL_Reset>
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe ff6e 	bl	8006f70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800809c:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <HAL_PCD_SuspendCallback+0x30>)
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	4a03      	ldr	r2, [pc, #12]	; (80080b0 <HAL_PCD_SuspendCallback+0x30>)
 80080a2:	f043 0306 	orr.w	r3, r3, #6
 80080a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	e000ed00 	.word	0xe000ed00

080080b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe ff68 	bl	8006f98 <USBD_LL_Resume>
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80080d8:	4a28      	ldr	r2, [pc, #160]	; (800817c <USBD_LL_Init+0xac>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a26      	ldr	r2, [pc, #152]	; (800817c <USBD_LL_Init+0xac>)
 80080e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80080e8:	4b24      	ldr	r3, [pc, #144]	; (800817c <USBD_LL_Init+0xac>)
 80080ea:	4a25      	ldr	r2, [pc, #148]	; (8008180 <USBD_LL_Init+0xb0>)
 80080ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <USBD_LL_Init+0xac>)
 80080f0:	2208      	movs	r2, #8
 80080f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80080f4:	4b21      	ldr	r3, [pc, #132]	; (800817c <USBD_LL_Init+0xac>)
 80080f6:	2202      	movs	r2, #2
 80080f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080fa:	4b20      	ldr	r3, [pc, #128]	; (800817c <USBD_LL_Init+0xac>)
 80080fc:	2202      	movs	r2, #2
 80080fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008100:	4b1e      	ldr	r3, [pc, #120]	; (800817c <USBD_LL_Init+0xac>)
 8008102:	2200      	movs	r2, #0
 8008104:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008106:	4b1d      	ldr	r3, [pc, #116]	; (800817c <USBD_LL_Init+0xac>)
 8008108:	2200      	movs	r2, #0
 800810a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800810c:	481b      	ldr	r0, [pc, #108]	; (800817c <USBD_LL_Init+0xac>)
 800810e:	f7fb f854 	bl	80031ba <HAL_PCD_Init>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008118:	f7f9 f9b6 	bl	8001488 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008122:	2318      	movs	r3, #24
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	f7fb feac 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008132:	2358      	movs	r3, #88	; 0x58
 8008134:	2200      	movs	r2, #0
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	f7fb fea4 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008142:	23c0      	movs	r3, #192	; 0xc0
 8008144:	2200      	movs	r2, #0
 8008146:	2181      	movs	r1, #129	; 0x81
 8008148:	f7fb fe9c 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008152:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008156:	2200      	movs	r2, #0
 8008158:	2101      	movs	r1, #1
 800815a:	f7fb fe93 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008168:	2200      	movs	r2, #0
 800816a:	2182      	movs	r1, #130	; 0x82
 800816c:	f7fb fe8a 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20001188 	.word	0x20001188
 8008180:	40005c00 	.word	0x40005c00

08008184 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800819a:	4618      	mov	r0, r3
 800819c:	f7fb f8c1 	bl	8003322 <HAL_PCD_Start>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f93e 	bl	8008428 <USBD_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	461a      	mov	r2, r3
 80081c8:	4603      	mov	r3, r0
 80081ca:	70fb      	strb	r3, [r7, #3]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70bb      	strb	r3, [r7, #2]
 80081d0:	4613      	mov	r3, r2
 80081d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80081e2:	78bb      	ldrb	r3, [r7, #2]
 80081e4:	883a      	ldrh	r2, [r7, #0]
 80081e6:	78f9      	ldrb	r1, [r7, #3]
 80081e8:	f7fb f9e8 	bl	80035bc <HAL_PCD_EP_Open>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f918 	bl	8008428 <USBD_Get_USB_Status>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7fb fa29 	bl	800367c <HAL_PCD_EP_Close>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f8f9 	bl	8008428 <USBD_Get_USB_Status>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800823a:	7bbb      	ldrb	r3, [r7, #14]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7fb fad3 	bl	800380e <HAL_PCD_EP_SetStall>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f8da 	bl	8008428 <USBD_Get_USB_Status>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008278:	7bbb      	ldrb	r3, [r7, #14]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	460b      	mov	r3, r1
 800828c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fb fb0e 	bl	80038c2 <HAL_PCD_EP_ClrStall>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f8bb 	bl	8008428 <USBD_Get_USB_Status>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80082d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	da08      	bge.n	80082ee <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	015b      	lsls	r3, r3, #5
 80082e6:	4413      	add	r3, r2
 80082e8:	332a      	adds	r3, #42	; 0x2a
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	e008      	b.n	8008300 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	015b      	lsls	r3, r3, #5
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80082fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7fb f922 	bl	8003572 <HAL_PCD_SetAddress>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f877 	bl	8008428 <USBD_Get_USB_Status>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800833e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	461a      	mov	r2, r3
 8008354:	460b      	mov	r3, r1
 8008356:	72fb      	strb	r3, [r7, #11]
 8008358:	4613      	mov	r3, r2
 800835a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800836a:	893b      	ldrh	r3, [r7, #8]
 800836c:	7af9      	ldrb	r1, [r7, #11]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	f7fb fa14 	bl	800379c <HAL_PCD_EP_Transmit>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f854 	bl	8008428 <USBD_Get_USB_Status>
 8008380:	4603      	mov	r3, r0
 8008382:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008384:	7dbb      	ldrb	r3, [r7, #22]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b086      	sub	sp, #24
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	461a      	mov	r2, r3
 800839a:	460b      	mov	r3, r1
 800839c:	72fb      	strb	r3, [r7, #11]
 800839e:	4613      	mov	r3, r2
 80083a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80083b0:	893b      	ldrh	r3, [r7, #8]
 80083b2:	7af9      	ldrb	r1, [r7, #11]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	f7fb f9a3 	bl	8003700 <HAL_PCD_EP_Receive>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f831 	bl	8008428 <USBD_Get_USB_Status>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80083ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fb f9c2 	bl	8003774 <HAL_PCD_EP_GetRxCount>
 80083f0:	4603      	mov	r3, r0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008404:	4b02      	ldr	r3, [pc, #8]	; (8008410 <USBD_static_malloc+0x14>)
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr
 8008410:	20000204 	.word	0x20000204

08008414 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]

}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	bc80      	pop	{r7}
 8008424:	4770      	bx	lr
	...

08008428 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d817      	bhi.n	800846c <USBD_Get_USB_Status+0x44>
 800843c:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <USBD_Get_USB_Status+0x1c>)
 800843e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008442:	bf00      	nop
 8008444:	08008455 	.word	0x08008455
 8008448:	0800845b 	.word	0x0800845b
 800844c:	08008461 	.word	0x08008461
 8008450:	08008467 	.word	0x08008467
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	e00b      	b.n	8008472 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800845a:	2302      	movs	r3, #2
 800845c:	73fb      	strb	r3, [r7, #15]
    break;
 800845e:	e008      	b.n	8008472 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
    break;
 8008464:	e005      	b.n	8008472 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008466:	2302      	movs	r3, #2
 8008468:	73fb      	strb	r3, [r7, #15]
    break;
 800846a:	e002      	b.n	8008472 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800846c:	2302      	movs	r3, #2
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	bf00      	nop
  }
  return usb_status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <__errno>:
 8008480:	4b01      	ldr	r3, [pc, #4]	; (8008488 <__errno+0x8>)
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	2000017c 	.word	0x2000017c

0800848c <__libc_init_array>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	2500      	movs	r5, #0
 8008490:	4e0c      	ldr	r6, [pc, #48]	; (80084c4 <__libc_init_array+0x38>)
 8008492:	4c0d      	ldr	r4, [pc, #52]	; (80084c8 <__libc_init_array+0x3c>)
 8008494:	1ba4      	subs	r4, r4, r6
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	42a5      	cmp	r5, r4
 800849a:	d109      	bne.n	80084b0 <__libc_init_array+0x24>
 800849c:	f001 f8ea 	bl	8009674 <_init>
 80084a0:	2500      	movs	r5, #0
 80084a2:	4e0a      	ldr	r6, [pc, #40]	; (80084cc <__libc_init_array+0x40>)
 80084a4:	4c0a      	ldr	r4, [pc, #40]	; (80084d0 <__libc_init_array+0x44>)
 80084a6:	1ba4      	subs	r4, r4, r6
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	42a5      	cmp	r5, r4
 80084ac:	d105      	bne.n	80084ba <__libc_init_array+0x2e>
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084b4:	4798      	blx	r3
 80084b6:	3501      	adds	r5, #1
 80084b8:	e7ee      	b.n	8008498 <__libc_init_array+0xc>
 80084ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084be:	4798      	blx	r3
 80084c0:	3501      	adds	r5, #1
 80084c2:	e7f2      	b.n	80084aa <__libc_init_array+0x1e>
 80084c4:	08009908 	.word	0x08009908
 80084c8:	08009908 	.word	0x08009908
 80084cc:	08009908 	.word	0x08009908
 80084d0:	0800990c 	.word	0x0800990c

080084d4 <memcpy>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	1e43      	subs	r3, r0, #1
 80084d8:	440a      	add	r2, r1
 80084da:	4291      	cmp	r1, r2
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	bd10      	pop	{r4, pc}
 80084e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e8:	e7f7      	b.n	80084da <memcpy+0x6>

080084ea <memset>:
 80084ea:	4603      	mov	r3, r0
 80084ec:	4402      	add	r2, r0
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d100      	bne.n	80084f4 <memset+0xa>
 80084f2:	4770      	bx	lr
 80084f4:	f803 1b01 	strb.w	r1, [r3], #1
 80084f8:	e7f9      	b.n	80084ee <memset+0x4>
	...

080084fc <iprintf>:
 80084fc:	b40f      	push	{r0, r1, r2, r3}
 80084fe:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <iprintf+0x2c>)
 8008500:	b513      	push	{r0, r1, r4, lr}
 8008502:	681c      	ldr	r4, [r3, #0]
 8008504:	b124      	cbz	r4, 8008510 <iprintf+0x14>
 8008506:	69a3      	ldr	r3, [r4, #24]
 8008508:	b913      	cbnz	r3, 8008510 <iprintf+0x14>
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f882 	bl	8008614 <__sinit>
 8008510:	ab05      	add	r3, sp, #20
 8008512:	9a04      	ldr	r2, [sp, #16]
 8008514:	68a1      	ldr	r1, [r4, #8]
 8008516:	4620      	mov	r0, r4
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	f000 fad9 	bl	8008ad0 <_vfiprintf_r>
 800851e:	b002      	add	sp, #8
 8008520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008524:	b004      	add	sp, #16
 8008526:	4770      	bx	lr
 8008528:	2000017c 	.word	0x2000017c

0800852c <sniprintf>:
 800852c:	b40c      	push	{r2, r3}
 800852e:	b530      	push	{r4, r5, lr}
 8008530:	4b17      	ldr	r3, [pc, #92]	; (8008590 <sniprintf+0x64>)
 8008532:	1e0c      	subs	r4, r1, #0
 8008534:	b09d      	sub	sp, #116	; 0x74
 8008536:	681d      	ldr	r5, [r3, #0]
 8008538:	da08      	bge.n	800854c <sniprintf+0x20>
 800853a:	238b      	movs	r3, #139	; 0x8b
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	b01d      	add	sp, #116	; 0x74
 8008544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008548:	b002      	add	sp, #8
 800854a:	4770      	bx	lr
 800854c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008550:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008554:	bf0c      	ite	eq
 8008556:	4623      	moveq	r3, r4
 8008558:	f104 33ff 	addne.w	r3, r4, #4294967295
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	9307      	str	r3, [sp, #28]
 8008560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008564:	9002      	str	r0, [sp, #8]
 8008566:	9006      	str	r0, [sp, #24]
 8008568:	f8ad 3016 	strh.w	r3, [sp, #22]
 800856c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800856e:	ab21      	add	r3, sp, #132	; 0x84
 8008570:	a902      	add	r1, sp, #8
 8008572:	4628      	mov	r0, r5
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	f000 f98b 	bl	8008890 <_svfiprintf_r>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	bfbc      	itt	lt
 800857e:	238b      	movlt	r3, #139	; 0x8b
 8008580:	602b      	strlt	r3, [r5, #0]
 8008582:	2c00      	cmp	r4, #0
 8008584:	d0dd      	beq.n	8008542 <sniprintf+0x16>
 8008586:	2200      	movs	r2, #0
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e7d9      	b.n	8008542 <sniprintf+0x16>
 800858e:	bf00      	nop
 8008590:	2000017c 	.word	0x2000017c

08008594 <std>:
 8008594:	2300      	movs	r3, #0
 8008596:	b510      	push	{r4, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	e9c0 3300 	strd	r3, r3, [r0]
 800859e:	6083      	str	r3, [r0, #8]
 80085a0:	8181      	strh	r1, [r0, #12]
 80085a2:	6643      	str	r3, [r0, #100]	; 0x64
 80085a4:	81c2      	strh	r2, [r0, #14]
 80085a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085aa:	6183      	str	r3, [r0, #24]
 80085ac:	4619      	mov	r1, r3
 80085ae:	2208      	movs	r2, #8
 80085b0:	305c      	adds	r0, #92	; 0x5c
 80085b2:	f7ff ff9a 	bl	80084ea <memset>
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x38>)
 80085b8:	6224      	str	r4, [r4, #32]
 80085ba:	6263      	str	r3, [r4, #36]	; 0x24
 80085bc:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <std+0x3c>)
 80085be:	62a3      	str	r3, [r4, #40]	; 0x28
 80085c0:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <std+0x40>)
 80085c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085c4:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <std+0x44>)
 80085c6:	6323      	str	r3, [r4, #48]	; 0x30
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	bf00      	nop
 80085cc:	0800902d 	.word	0x0800902d
 80085d0:	0800904f 	.word	0x0800904f
 80085d4:	08009087 	.word	0x08009087
 80085d8:	080090ab 	.word	0x080090ab

080085dc <_cleanup_r>:
 80085dc:	4901      	ldr	r1, [pc, #4]	; (80085e4 <_cleanup_r+0x8>)
 80085de:	f000 b885 	b.w	80086ec <_fwalk_reent>
 80085e2:	bf00      	nop
 80085e4:	08009385 	.word	0x08009385

080085e8 <__sfmoreglue>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	2568      	movs	r5, #104	; 0x68
 80085ec:	1e4a      	subs	r2, r1, #1
 80085ee:	4355      	muls	r5, r2
 80085f0:	460e      	mov	r6, r1
 80085f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085f6:	f000 f897 	bl	8008728 <_malloc_r>
 80085fa:	4604      	mov	r4, r0
 80085fc:	b140      	cbz	r0, 8008610 <__sfmoreglue+0x28>
 80085fe:	2100      	movs	r1, #0
 8008600:	e9c0 1600 	strd	r1, r6, [r0]
 8008604:	300c      	adds	r0, #12
 8008606:	60a0      	str	r0, [r4, #8]
 8008608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800860c:	f7ff ff6d 	bl	80084ea <memset>
 8008610:	4620      	mov	r0, r4
 8008612:	bd70      	pop	{r4, r5, r6, pc}

08008614 <__sinit>:
 8008614:	6983      	ldr	r3, [r0, #24]
 8008616:	b510      	push	{r4, lr}
 8008618:	4604      	mov	r4, r0
 800861a:	bb33      	cbnz	r3, 800866a <__sinit+0x56>
 800861c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008620:	6503      	str	r3, [r0, #80]	; 0x50
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <__sinit+0x58>)
 8008624:	4a12      	ldr	r2, [pc, #72]	; (8008670 <__sinit+0x5c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6282      	str	r2, [r0, #40]	; 0x28
 800862a:	4298      	cmp	r0, r3
 800862c:	bf04      	itt	eq
 800862e:	2301      	moveq	r3, #1
 8008630:	6183      	streq	r3, [r0, #24]
 8008632:	f000 f81f 	bl	8008674 <__sfp>
 8008636:	6060      	str	r0, [r4, #4]
 8008638:	4620      	mov	r0, r4
 800863a:	f000 f81b 	bl	8008674 <__sfp>
 800863e:	60a0      	str	r0, [r4, #8]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 f817 	bl	8008674 <__sfp>
 8008646:	2200      	movs	r2, #0
 8008648:	60e0      	str	r0, [r4, #12]
 800864a:	2104      	movs	r1, #4
 800864c:	6860      	ldr	r0, [r4, #4]
 800864e:	f7ff ffa1 	bl	8008594 <std>
 8008652:	2201      	movs	r2, #1
 8008654:	2109      	movs	r1, #9
 8008656:	68a0      	ldr	r0, [r4, #8]
 8008658:	f7ff ff9c 	bl	8008594 <std>
 800865c:	2202      	movs	r2, #2
 800865e:	2112      	movs	r1, #18
 8008660:	68e0      	ldr	r0, [r4, #12]
 8008662:	f7ff ff97 	bl	8008594 <std>
 8008666:	2301      	movs	r3, #1
 8008668:	61a3      	str	r3, [r4, #24]
 800866a:	bd10      	pop	{r4, pc}
 800866c:	08009870 	.word	0x08009870
 8008670:	080085dd 	.word	0x080085dd

08008674 <__sfp>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <__sfp+0x70>)
 8008678:	4607      	mov	r7, r0
 800867a:	681e      	ldr	r6, [r3, #0]
 800867c:	69b3      	ldr	r3, [r6, #24]
 800867e:	b913      	cbnz	r3, 8008686 <__sfp+0x12>
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff ffc7 	bl	8008614 <__sinit>
 8008686:	3648      	adds	r6, #72	; 0x48
 8008688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800868c:	3b01      	subs	r3, #1
 800868e:	d503      	bpl.n	8008698 <__sfp+0x24>
 8008690:	6833      	ldr	r3, [r6, #0]
 8008692:	b133      	cbz	r3, 80086a2 <__sfp+0x2e>
 8008694:	6836      	ldr	r6, [r6, #0]
 8008696:	e7f7      	b.n	8008688 <__sfp+0x14>
 8008698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800869c:	b16d      	cbz	r5, 80086ba <__sfp+0x46>
 800869e:	3468      	adds	r4, #104	; 0x68
 80086a0:	e7f4      	b.n	800868c <__sfp+0x18>
 80086a2:	2104      	movs	r1, #4
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7ff ff9f 	bl	80085e8 <__sfmoreglue>
 80086aa:	6030      	str	r0, [r6, #0]
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d1f1      	bne.n	8008694 <__sfp+0x20>
 80086b0:	230c      	movs	r3, #12
 80086b2:	4604      	mov	r4, r0
 80086b4:	603b      	str	r3, [r7, #0]
 80086b6:	4620      	mov	r0, r4
 80086b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <__sfp+0x74>)
 80086bc:	6665      	str	r5, [r4, #100]	; 0x64
 80086be:	e9c4 5500 	strd	r5, r5, [r4]
 80086c2:	60a5      	str	r5, [r4, #8]
 80086c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80086c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80086cc:	2208      	movs	r2, #8
 80086ce:	4629      	mov	r1, r5
 80086d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d4:	f7ff ff09 	bl	80084ea <memset>
 80086d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086e0:	e7e9      	b.n	80086b6 <__sfp+0x42>
 80086e2:	bf00      	nop
 80086e4:	08009870 	.word	0x08009870
 80086e8:	ffff0001 	.word	0xffff0001

080086ec <_fwalk_reent>:
 80086ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f0:	4680      	mov	r8, r0
 80086f2:	4689      	mov	r9, r1
 80086f4:	2600      	movs	r6, #0
 80086f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086fa:	b914      	cbnz	r4, 8008702 <_fwalk_reent+0x16>
 80086fc:	4630      	mov	r0, r6
 80086fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008702:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008706:	3f01      	subs	r7, #1
 8008708:	d501      	bpl.n	800870e <_fwalk_reent+0x22>
 800870a:	6824      	ldr	r4, [r4, #0]
 800870c:	e7f5      	b.n	80086fa <_fwalk_reent+0xe>
 800870e:	89ab      	ldrh	r3, [r5, #12]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d907      	bls.n	8008724 <_fwalk_reent+0x38>
 8008714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008718:	3301      	adds	r3, #1
 800871a:	d003      	beq.n	8008724 <_fwalk_reent+0x38>
 800871c:	4629      	mov	r1, r5
 800871e:	4640      	mov	r0, r8
 8008720:	47c8      	blx	r9
 8008722:	4306      	orrs	r6, r0
 8008724:	3568      	adds	r5, #104	; 0x68
 8008726:	e7ee      	b.n	8008706 <_fwalk_reent+0x1a>

08008728 <_malloc_r>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	1ccd      	adds	r5, r1, #3
 800872c:	f025 0503 	bic.w	r5, r5, #3
 8008730:	3508      	adds	r5, #8
 8008732:	2d0c      	cmp	r5, #12
 8008734:	bf38      	it	cc
 8008736:	250c      	movcc	r5, #12
 8008738:	2d00      	cmp	r5, #0
 800873a:	4606      	mov	r6, r0
 800873c:	db01      	blt.n	8008742 <_malloc_r+0x1a>
 800873e:	42a9      	cmp	r1, r5
 8008740:	d903      	bls.n	800874a <_malloc_r+0x22>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	2000      	movs	r0, #0
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	f000 fee2 	bl	8009512 <__malloc_lock>
 800874e:	4a21      	ldr	r2, [pc, #132]	; (80087d4 <_malloc_r+0xac>)
 8008750:	6814      	ldr	r4, [r2, #0]
 8008752:	4621      	mov	r1, r4
 8008754:	b991      	cbnz	r1, 800877c <_malloc_r+0x54>
 8008756:	4c20      	ldr	r4, [pc, #128]	; (80087d8 <_malloc_r+0xb0>)
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	b91b      	cbnz	r3, 8008764 <_malloc_r+0x3c>
 800875c:	4630      	mov	r0, r6
 800875e:	f000 fc55 	bl	800900c <_sbrk_r>
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	4629      	mov	r1, r5
 8008766:	4630      	mov	r0, r6
 8008768:	f000 fc50 	bl	800900c <_sbrk_r>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d124      	bne.n	80087ba <_malloc_r+0x92>
 8008770:	230c      	movs	r3, #12
 8008772:	4630      	mov	r0, r6
 8008774:	6033      	str	r3, [r6, #0]
 8008776:	f000 fecd 	bl	8009514 <__malloc_unlock>
 800877a:	e7e4      	b.n	8008746 <_malloc_r+0x1e>
 800877c:	680b      	ldr	r3, [r1, #0]
 800877e:	1b5b      	subs	r3, r3, r5
 8008780:	d418      	bmi.n	80087b4 <_malloc_r+0x8c>
 8008782:	2b0b      	cmp	r3, #11
 8008784:	d90f      	bls.n	80087a6 <_malloc_r+0x7e>
 8008786:	600b      	str	r3, [r1, #0]
 8008788:	18cc      	adds	r4, r1, r3
 800878a:	50cd      	str	r5, [r1, r3]
 800878c:	4630      	mov	r0, r6
 800878e:	f000 fec1 	bl	8009514 <__malloc_unlock>
 8008792:	f104 000b 	add.w	r0, r4, #11
 8008796:	1d23      	adds	r3, r4, #4
 8008798:	f020 0007 	bic.w	r0, r0, #7
 800879c:	1ac3      	subs	r3, r0, r3
 800879e:	d0d3      	beq.n	8008748 <_malloc_r+0x20>
 80087a0:	425a      	negs	r2, r3
 80087a2:	50e2      	str	r2, [r4, r3]
 80087a4:	e7d0      	b.n	8008748 <_malloc_r+0x20>
 80087a6:	684b      	ldr	r3, [r1, #4]
 80087a8:	428c      	cmp	r4, r1
 80087aa:	bf16      	itet	ne
 80087ac:	6063      	strne	r3, [r4, #4]
 80087ae:	6013      	streq	r3, [r2, #0]
 80087b0:	460c      	movne	r4, r1
 80087b2:	e7eb      	b.n	800878c <_malloc_r+0x64>
 80087b4:	460c      	mov	r4, r1
 80087b6:	6849      	ldr	r1, [r1, #4]
 80087b8:	e7cc      	b.n	8008754 <_malloc_r+0x2c>
 80087ba:	1cc4      	adds	r4, r0, #3
 80087bc:	f024 0403 	bic.w	r4, r4, #3
 80087c0:	42a0      	cmp	r0, r4
 80087c2:	d005      	beq.n	80087d0 <_malloc_r+0xa8>
 80087c4:	1a21      	subs	r1, r4, r0
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 fc20 	bl	800900c <_sbrk_r>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d0cf      	beq.n	8008770 <_malloc_r+0x48>
 80087d0:	6025      	str	r5, [r4, #0]
 80087d2:	e7db      	b.n	800878c <_malloc_r+0x64>
 80087d4:	20000424 	.word	0x20000424
 80087d8:	20000428 	.word	0x20000428

080087dc <__ssputs_r>:
 80087dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	688e      	ldr	r6, [r1, #8]
 80087e2:	4682      	mov	sl, r0
 80087e4:	429e      	cmp	r6, r3
 80087e6:	460c      	mov	r4, r1
 80087e8:	4690      	mov	r8, r2
 80087ea:	4699      	mov	r9, r3
 80087ec:	d837      	bhi.n	800885e <__ssputs_r+0x82>
 80087ee:	898a      	ldrh	r2, [r1, #12]
 80087f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087f4:	d031      	beq.n	800885a <__ssputs_r+0x7e>
 80087f6:	2302      	movs	r3, #2
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	6909      	ldr	r1, [r1, #16]
 80087fc:	1a6f      	subs	r7, r5, r1
 80087fe:	6965      	ldr	r5, [r4, #20]
 8008800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008804:	fb95 f5f3 	sdiv	r5, r5, r3
 8008808:	f109 0301 	add.w	r3, r9, #1
 800880c:	443b      	add	r3, r7
 800880e:	429d      	cmp	r5, r3
 8008810:	bf38      	it	cc
 8008812:	461d      	movcc	r5, r3
 8008814:	0553      	lsls	r3, r2, #21
 8008816:	d530      	bpl.n	800887a <__ssputs_r+0x9e>
 8008818:	4629      	mov	r1, r5
 800881a:	f7ff ff85 	bl	8008728 <_malloc_r>
 800881e:	4606      	mov	r6, r0
 8008820:	b950      	cbnz	r0, 8008838 <__ssputs_r+0x5c>
 8008822:	230c      	movs	r3, #12
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	f8ca 3000 	str.w	r3, [sl]
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008838:	463a      	mov	r2, r7
 800883a:	6921      	ldr	r1, [r4, #16]
 800883c:	f7ff fe4a 	bl	80084d4 <memcpy>
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	6126      	str	r6, [r4, #16]
 800884e:	443e      	add	r6, r7
 8008850:	6026      	str	r6, [r4, #0]
 8008852:	464e      	mov	r6, r9
 8008854:	6165      	str	r5, [r4, #20]
 8008856:	1bed      	subs	r5, r5, r7
 8008858:	60a5      	str	r5, [r4, #8]
 800885a:	454e      	cmp	r6, r9
 800885c:	d900      	bls.n	8008860 <__ssputs_r+0x84>
 800885e:	464e      	mov	r6, r9
 8008860:	4632      	mov	r2, r6
 8008862:	4641      	mov	r1, r8
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	f000 fe3b 	bl	80094e0 <memmove>
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	2000      	movs	r0, #0
 800886e:	1b9b      	subs	r3, r3, r6
 8008870:	60a3      	str	r3, [r4, #8]
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	441e      	add	r6, r3
 8008876:	6026      	str	r6, [r4, #0]
 8008878:	e7dc      	b.n	8008834 <__ssputs_r+0x58>
 800887a:	462a      	mov	r2, r5
 800887c:	f000 fe98 	bl	80095b0 <_realloc_r>
 8008880:	4606      	mov	r6, r0
 8008882:	2800      	cmp	r0, #0
 8008884:	d1e2      	bne.n	800884c <__ssputs_r+0x70>
 8008886:	6921      	ldr	r1, [r4, #16]
 8008888:	4650      	mov	r0, sl
 800888a:	f000 fe45 	bl	8009518 <_free_r>
 800888e:	e7c8      	b.n	8008822 <__ssputs_r+0x46>

08008890 <_svfiprintf_r>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	461d      	mov	r5, r3
 8008896:	898b      	ldrh	r3, [r1, #12]
 8008898:	b09d      	sub	sp, #116	; 0x74
 800889a:	061f      	lsls	r7, r3, #24
 800889c:	4680      	mov	r8, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	4616      	mov	r6, r2
 80088a2:	d50f      	bpl.n	80088c4 <_svfiprintf_r+0x34>
 80088a4:	690b      	ldr	r3, [r1, #16]
 80088a6:	b96b      	cbnz	r3, 80088c4 <_svfiprintf_r+0x34>
 80088a8:	2140      	movs	r1, #64	; 0x40
 80088aa:	f7ff ff3d 	bl	8008728 <_malloc_r>
 80088ae:	6020      	str	r0, [r4, #0]
 80088b0:	6120      	str	r0, [r4, #16]
 80088b2:	b928      	cbnz	r0, 80088c0 <_svfiprintf_r+0x30>
 80088b4:	230c      	movs	r3, #12
 80088b6:	f8c8 3000 	str.w	r3, [r8]
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295
 80088be:	e0c8      	b.n	8008a52 <_svfiprintf_r+0x1c2>
 80088c0:	2340      	movs	r3, #64	; 0x40
 80088c2:	6163      	str	r3, [r4, #20]
 80088c4:	2300      	movs	r3, #0
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
 80088c8:	2320      	movs	r3, #32
 80088ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ce:	2330      	movs	r3, #48	; 0x30
 80088d0:	f04f 0b01 	mov.w	fp, #1
 80088d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088d8:	9503      	str	r5, [sp, #12]
 80088da:	4637      	mov	r7, r6
 80088dc:	463d      	mov	r5, r7
 80088de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088e2:	b10b      	cbz	r3, 80088e8 <_svfiprintf_r+0x58>
 80088e4:	2b25      	cmp	r3, #37	; 0x25
 80088e6:	d13e      	bne.n	8008966 <_svfiprintf_r+0xd6>
 80088e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80088ec:	d00b      	beq.n	8008906 <_svfiprintf_r+0x76>
 80088ee:	4653      	mov	r3, sl
 80088f0:	4632      	mov	r2, r6
 80088f2:	4621      	mov	r1, r4
 80088f4:	4640      	mov	r0, r8
 80088f6:	f7ff ff71 	bl	80087dc <__ssputs_r>
 80088fa:	3001      	adds	r0, #1
 80088fc:	f000 80a4 	beq.w	8008a48 <_svfiprintf_r+0x1b8>
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	4453      	add	r3, sl
 8008904:	9309      	str	r3, [sp, #36]	; 0x24
 8008906:	783b      	ldrb	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 809d 	beq.w	8008a48 <_svfiprintf_r+0x1b8>
 800890e:	2300      	movs	r3, #0
 8008910:	f04f 32ff 	mov.w	r2, #4294967295
 8008914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008920:	931a      	str	r3, [sp, #104]	; 0x68
 8008922:	462f      	mov	r7, r5
 8008924:	2205      	movs	r2, #5
 8008926:	f817 1b01 	ldrb.w	r1, [r7], #1
 800892a:	4850      	ldr	r0, [pc, #320]	; (8008a6c <_svfiprintf_r+0x1dc>)
 800892c:	f000 fdca 	bl	80094c4 <memchr>
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	b9d0      	cbnz	r0, 800896a <_svfiprintf_r+0xda>
 8008934:	06d9      	lsls	r1, r3, #27
 8008936:	bf44      	itt	mi
 8008938:	2220      	movmi	r2, #32
 800893a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800893e:	071a      	lsls	r2, r3, #28
 8008940:	bf44      	itt	mi
 8008942:	222b      	movmi	r2, #43	; 0x2b
 8008944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008948:	782a      	ldrb	r2, [r5, #0]
 800894a:	2a2a      	cmp	r2, #42	; 0x2a
 800894c:	d015      	beq.n	800897a <_svfiprintf_r+0xea>
 800894e:	462f      	mov	r7, r5
 8008950:	2000      	movs	r0, #0
 8008952:	250a      	movs	r5, #10
 8008954:	9a07      	ldr	r2, [sp, #28]
 8008956:	4639      	mov	r1, r7
 8008958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895c:	3b30      	subs	r3, #48	; 0x30
 800895e:	2b09      	cmp	r3, #9
 8008960:	d94d      	bls.n	80089fe <_svfiprintf_r+0x16e>
 8008962:	b1b8      	cbz	r0, 8008994 <_svfiprintf_r+0x104>
 8008964:	e00f      	b.n	8008986 <_svfiprintf_r+0xf6>
 8008966:	462f      	mov	r7, r5
 8008968:	e7b8      	b.n	80088dc <_svfiprintf_r+0x4c>
 800896a:	4a40      	ldr	r2, [pc, #256]	; (8008a6c <_svfiprintf_r+0x1dc>)
 800896c:	463d      	mov	r5, r7
 800896e:	1a80      	subs	r0, r0, r2
 8008970:	fa0b f000 	lsl.w	r0, fp, r0
 8008974:	4318      	orrs	r0, r3
 8008976:	9004      	str	r0, [sp, #16]
 8008978:	e7d3      	b.n	8008922 <_svfiprintf_r+0x92>
 800897a:	9a03      	ldr	r2, [sp, #12]
 800897c:	1d11      	adds	r1, r2, #4
 800897e:	6812      	ldr	r2, [r2, #0]
 8008980:	9103      	str	r1, [sp, #12]
 8008982:	2a00      	cmp	r2, #0
 8008984:	db01      	blt.n	800898a <_svfiprintf_r+0xfa>
 8008986:	9207      	str	r2, [sp, #28]
 8008988:	e004      	b.n	8008994 <_svfiprintf_r+0x104>
 800898a:	4252      	negs	r2, r2
 800898c:	f043 0302 	orr.w	r3, r3, #2
 8008990:	9207      	str	r2, [sp, #28]
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	783b      	ldrb	r3, [r7, #0]
 8008996:	2b2e      	cmp	r3, #46	; 0x2e
 8008998:	d10c      	bne.n	80089b4 <_svfiprintf_r+0x124>
 800899a:	787b      	ldrb	r3, [r7, #1]
 800899c:	2b2a      	cmp	r3, #42	; 0x2a
 800899e:	d133      	bne.n	8008a08 <_svfiprintf_r+0x178>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	3702      	adds	r7, #2
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	9203      	str	r2, [sp, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bfb8      	it	lt
 80089ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80089b2:	9305      	str	r3, [sp, #20]
 80089b4:	4d2e      	ldr	r5, [pc, #184]	; (8008a70 <_svfiprintf_r+0x1e0>)
 80089b6:	2203      	movs	r2, #3
 80089b8:	7839      	ldrb	r1, [r7, #0]
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 fd82 	bl	80094c4 <memchr>
 80089c0:	b138      	cbz	r0, 80089d2 <_svfiprintf_r+0x142>
 80089c2:	2340      	movs	r3, #64	; 0x40
 80089c4:	1b40      	subs	r0, r0, r5
 80089c6:	fa03 f000 	lsl.w	r0, r3, r0
 80089ca:	9b04      	ldr	r3, [sp, #16]
 80089cc:	3701      	adds	r7, #1
 80089ce:	4303      	orrs	r3, r0
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	7839      	ldrb	r1, [r7, #0]
 80089d4:	2206      	movs	r2, #6
 80089d6:	4827      	ldr	r0, [pc, #156]	; (8008a74 <_svfiprintf_r+0x1e4>)
 80089d8:	1c7e      	adds	r6, r7, #1
 80089da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089de:	f000 fd71 	bl	80094c4 <memchr>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d038      	beq.n	8008a58 <_svfiprintf_r+0x1c8>
 80089e6:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <_svfiprintf_r+0x1e8>)
 80089e8:	bb13      	cbnz	r3, 8008a30 <_svfiprintf_r+0x1a0>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	3307      	adds	r3, #7
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	3308      	adds	r3, #8
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	444b      	add	r3, r9
 80089fa:	9309      	str	r3, [sp, #36]	; 0x24
 80089fc:	e76d      	b.n	80088da <_svfiprintf_r+0x4a>
 80089fe:	fb05 3202 	mla	r2, r5, r2, r3
 8008a02:	2001      	movs	r0, #1
 8008a04:	460f      	mov	r7, r1
 8008a06:	e7a6      	b.n	8008956 <_svfiprintf_r+0xc6>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	250a      	movs	r5, #10
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	3701      	adds	r7, #1
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	4638      	mov	r0, r7
 8008a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a18:	3a30      	subs	r2, #48	; 0x30
 8008a1a:	2a09      	cmp	r2, #9
 8008a1c:	d903      	bls.n	8008a26 <_svfiprintf_r+0x196>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c8      	beq.n	80089b4 <_svfiprintf_r+0x124>
 8008a22:	9105      	str	r1, [sp, #20]
 8008a24:	e7c6      	b.n	80089b4 <_svfiprintf_r+0x124>
 8008a26:	fb05 2101 	mla	r1, r5, r1, r2
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	e7f0      	b.n	8008a12 <_svfiprintf_r+0x182>
 8008a30:	ab03      	add	r3, sp, #12
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4622      	mov	r2, r4
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <_svfiprintf_r+0x1ec>)
 8008a38:	a904      	add	r1, sp, #16
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	f3af 8000 	nop.w
 8008a40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a44:	4681      	mov	r9, r0
 8008a46:	d1d6      	bne.n	80089f6 <_svfiprintf_r+0x166>
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	065b      	lsls	r3, r3, #25
 8008a4c:	f53f af35 	bmi.w	80088ba <_svfiprintf_r+0x2a>
 8008a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a52:	b01d      	add	sp, #116	; 0x74
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	ab03      	add	r3, sp, #12
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <_svfiprintf_r+0x1ec>)
 8008a60:	a904      	add	r1, sp, #16
 8008a62:	4640      	mov	r0, r8
 8008a64:	f000 f9c0 	bl	8008de8 <_printf_i>
 8008a68:	e7ea      	b.n	8008a40 <_svfiprintf_r+0x1b0>
 8008a6a:	bf00      	nop
 8008a6c:	080098d4 	.word	0x080098d4
 8008a70:	080098da 	.word	0x080098da
 8008a74:	080098de 	.word	0x080098de
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	080087dd 	.word	0x080087dd

08008a80 <__sfputc_r>:
 8008a80:	6893      	ldr	r3, [r2, #8]
 8008a82:	b410      	push	{r4}
 8008a84:	3b01      	subs	r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	6093      	str	r3, [r2, #8]
 8008a8a:	da07      	bge.n	8008a9c <__sfputc_r+0x1c>
 8008a8c:	6994      	ldr	r4, [r2, #24]
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	db01      	blt.n	8008a96 <__sfputc_r+0x16>
 8008a92:	290a      	cmp	r1, #10
 8008a94:	d102      	bne.n	8008a9c <__sfputc_r+0x1c>
 8008a96:	bc10      	pop	{r4}
 8008a98:	f000 bb0c 	b.w	80090b4 <__swbuf_r>
 8008a9c:	6813      	ldr	r3, [r2, #0]
 8008a9e:	1c58      	adds	r0, r3, #1
 8008aa0:	6010      	str	r0, [r2, #0]
 8008aa2:	7019      	strb	r1, [r3, #0]
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	bc10      	pop	{r4}
 8008aa8:	4770      	bx	lr

08008aaa <__sfputs_r>:
 8008aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	18d5      	adds	r5, r2, r3
 8008ab4:	42ac      	cmp	r4, r5
 8008ab6:	d101      	bne.n	8008abc <__sfputs_r+0x12>
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e007      	b.n	8008acc <__sfputs_r+0x22>
 8008abc:	463a      	mov	r2, r7
 8008abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff ffdc 	bl	8008a80 <__sfputc_r>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d1f3      	bne.n	8008ab4 <__sfputs_r+0xa>
 8008acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ad0 <_vfiprintf_r>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	b09d      	sub	sp, #116	; 0x74
 8008ad8:	4617      	mov	r7, r2
 8008ada:	461d      	mov	r5, r3
 8008adc:	4606      	mov	r6, r0
 8008ade:	b118      	cbz	r0, 8008ae8 <_vfiprintf_r+0x18>
 8008ae0:	6983      	ldr	r3, [r0, #24]
 8008ae2:	b90b      	cbnz	r3, 8008ae8 <_vfiprintf_r+0x18>
 8008ae4:	f7ff fd96 	bl	8008614 <__sinit>
 8008ae8:	4b7c      	ldr	r3, [pc, #496]	; (8008cdc <_vfiprintf_r+0x20c>)
 8008aea:	429c      	cmp	r4, r3
 8008aec:	d158      	bne.n	8008ba0 <_vfiprintf_r+0xd0>
 8008aee:	6874      	ldr	r4, [r6, #4]
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	0718      	lsls	r0, r3, #28
 8008af4:	d55e      	bpl.n	8008bb4 <_vfiprintf_r+0xe4>
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d05b      	beq.n	8008bb4 <_vfiprintf_r+0xe4>
 8008afc:	2300      	movs	r3, #0
 8008afe:	9309      	str	r3, [sp, #36]	; 0x24
 8008b00:	2320      	movs	r3, #32
 8008b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b06:	2330      	movs	r3, #48	; 0x30
 8008b08:	f04f 0b01 	mov.w	fp, #1
 8008b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b10:	9503      	str	r5, [sp, #12]
 8008b12:	46b8      	mov	r8, r7
 8008b14:	4645      	mov	r5, r8
 8008b16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b1a:	b10b      	cbz	r3, 8008b20 <_vfiprintf_r+0x50>
 8008b1c:	2b25      	cmp	r3, #37	; 0x25
 8008b1e:	d154      	bne.n	8008bca <_vfiprintf_r+0xfa>
 8008b20:	ebb8 0a07 	subs.w	sl, r8, r7
 8008b24:	d00b      	beq.n	8008b3e <_vfiprintf_r+0x6e>
 8008b26:	4653      	mov	r3, sl
 8008b28:	463a      	mov	r2, r7
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7ff ffbc 	bl	8008aaa <__sfputs_r>
 8008b32:	3001      	adds	r0, #1
 8008b34:	f000 80c2 	beq.w	8008cbc <_vfiprintf_r+0x1ec>
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	4453      	add	r3, sl
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	f898 3000 	ldrb.w	r3, [r8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80ba 	beq.w	8008cbc <_vfiprintf_r+0x1ec>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b5c:	46a8      	mov	r8, r5
 8008b5e:	2205      	movs	r2, #5
 8008b60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008b64:	485e      	ldr	r0, [pc, #376]	; (8008ce0 <_vfiprintf_r+0x210>)
 8008b66:	f000 fcad 	bl	80094c4 <memchr>
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	bb78      	cbnz	r0, 8008bce <_vfiprintf_r+0xfe>
 8008b6e:	06d9      	lsls	r1, r3, #27
 8008b70:	bf44      	itt	mi
 8008b72:	2220      	movmi	r2, #32
 8008b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b78:	071a      	lsls	r2, r3, #28
 8008b7a:	bf44      	itt	mi
 8008b7c:	222b      	movmi	r2, #43	; 0x2b
 8008b7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b82:	782a      	ldrb	r2, [r5, #0]
 8008b84:	2a2a      	cmp	r2, #42	; 0x2a
 8008b86:	d02a      	beq.n	8008bde <_vfiprintf_r+0x10e>
 8008b88:	46a8      	mov	r8, r5
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	250a      	movs	r5, #10
 8008b8e:	9a07      	ldr	r2, [sp, #28]
 8008b90:	4641      	mov	r1, r8
 8008b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b96:	3b30      	subs	r3, #48	; 0x30
 8008b98:	2b09      	cmp	r3, #9
 8008b9a:	d969      	bls.n	8008c70 <_vfiprintf_r+0x1a0>
 8008b9c:	b360      	cbz	r0, 8008bf8 <_vfiprintf_r+0x128>
 8008b9e:	e024      	b.n	8008bea <_vfiprintf_r+0x11a>
 8008ba0:	4b50      	ldr	r3, [pc, #320]	; (8008ce4 <_vfiprintf_r+0x214>)
 8008ba2:	429c      	cmp	r4, r3
 8008ba4:	d101      	bne.n	8008baa <_vfiprintf_r+0xda>
 8008ba6:	68b4      	ldr	r4, [r6, #8]
 8008ba8:	e7a2      	b.n	8008af0 <_vfiprintf_r+0x20>
 8008baa:	4b4f      	ldr	r3, [pc, #316]	; (8008ce8 <_vfiprintf_r+0x218>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	bf08      	it	eq
 8008bb0:	68f4      	ldreq	r4, [r6, #12]
 8008bb2:	e79d      	b.n	8008af0 <_vfiprintf_r+0x20>
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f000 fae0 	bl	800917c <__swsetup_r>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d09d      	beq.n	8008afc <_vfiprintf_r+0x2c>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	b01d      	add	sp, #116	; 0x74
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	46a8      	mov	r8, r5
 8008bcc:	e7a2      	b.n	8008b14 <_vfiprintf_r+0x44>
 8008bce:	4a44      	ldr	r2, [pc, #272]	; (8008ce0 <_vfiprintf_r+0x210>)
 8008bd0:	4645      	mov	r5, r8
 8008bd2:	1a80      	subs	r0, r0, r2
 8008bd4:	fa0b f000 	lsl.w	r0, fp, r0
 8008bd8:	4318      	orrs	r0, r3
 8008bda:	9004      	str	r0, [sp, #16]
 8008bdc:	e7be      	b.n	8008b5c <_vfiprintf_r+0x8c>
 8008bde:	9a03      	ldr	r2, [sp, #12]
 8008be0:	1d11      	adds	r1, r2, #4
 8008be2:	6812      	ldr	r2, [r2, #0]
 8008be4:	9103      	str	r1, [sp, #12]
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	db01      	blt.n	8008bee <_vfiprintf_r+0x11e>
 8008bea:	9207      	str	r2, [sp, #28]
 8008bec:	e004      	b.n	8008bf8 <_vfiprintf_r+0x128>
 8008bee:	4252      	negs	r2, r2
 8008bf0:	f043 0302 	orr.w	r3, r3, #2
 8008bf4:	9207      	str	r2, [sp, #28]
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	f898 3000 	ldrb.w	r3, [r8]
 8008bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8008bfe:	d10e      	bne.n	8008c1e <_vfiprintf_r+0x14e>
 8008c00:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c04:	2b2a      	cmp	r3, #42	; 0x2a
 8008c06:	d138      	bne.n	8008c7a <_vfiprintf_r+0x1aa>
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	f108 0802 	add.w	r8, r8, #2
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9203      	str	r2, [sp, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfb8      	it	lt
 8008c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	4d33      	ldr	r5, [pc, #204]	; (8008cec <_vfiprintf_r+0x21c>)
 8008c20:	2203      	movs	r2, #3
 8008c22:	f898 1000 	ldrb.w	r1, [r8]
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 fc4c 	bl	80094c4 <memchr>
 8008c2c:	b140      	cbz	r0, 8008c40 <_vfiprintf_r+0x170>
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	1b40      	subs	r0, r0, r5
 8008c32:	fa03 f000 	lsl.w	r0, r3, r0
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	f108 0801 	add.w	r8, r8, #1
 8008c3c:	4303      	orrs	r3, r0
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	f898 1000 	ldrb.w	r1, [r8]
 8008c44:	2206      	movs	r2, #6
 8008c46:	482a      	ldr	r0, [pc, #168]	; (8008cf0 <_vfiprintf_r+0x220>)
 8008c48:	f108 0701 	add.w	r7, r8, #1
 8008c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c50:	f000 fc38 	bl	80094c4 <memchr>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d037      	beq.n	8008cc8 <_vfiprintf_r+0x1f8>
 8008c58:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <_vfiprintf_r+0x224>)
 8008c5a:	bb1b      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x1d4>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	3307      	adds	r3, #7
 8008c60:	f023 0307 	bic.w	r3, r3, #7
 8008c64:	3308      	adds	r3, #8
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6a:	444b      	add	r3, r9
 8008c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6e:	e750      	b.n	8008b12 <_vfiprintf_r+0x42>
 8008c70:	fb05 3202 	mla	r2, r5, r2, r3
 8008c74:	2001      	movs	r0, #1
 8008c76:	4688      	mov	r8, r1
 8008c78:	e78a      	b.n	8008b90 <_vfiprintf_r+0xc0>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	250a      	movs	r5, #10
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f108 0801 	add.w	r8, r8, #1
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	4640      	mov	r0, r8
 8008c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8c:	3a30      	subs	r2, #48	; 0x30
 8008c8e:	2a09      	cmp	r2, #9
 8008c90:	d903      	bls.n	8008c9a <_vfiprintf_r+0x1ca>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0c3      	beq.n	8008c1e <_vfiprintf_r+0x14e>
 8008c96:	9105      	str	r1, [sp, #20]
 8008c98:	e7c1      	b.n	8008c1e <_vfiprintf_r+0x14e>
 8008c9a:	fb05 2101 	mla	r1, r5, r1, r2
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	e7f0      	b.n	8008c86 <_vfiprintf_r+0x1b6>
 8008ca4:	ab03      	add	r3, sp, #12
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4b13      	ldr	r3, [pc, #76]	; (8008cf8 <_vfiprintf_r+0x228>)
 8008cac:	a904      	add	r1, sp, #16
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f3af 8000 	nop.w
 8008cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cb8:	4681      	mov	r9, r0
 8008cba:	d1d5      	bne.n	8008c68 <_vfiprintf_r+0x198>
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	065b      	lsls	r3, r3, #25
 8008cc0:	f53f af7e 	bmi.w	8008bc0 <_vfiprintf_r+0xf0>
 8008cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc6:	e77d      	b.n	8008bc4 <_vfiprintf_r+0xf4>
 8008cc8:	ab03      	add	r3, sp, #12
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4622      	mov	r2, r4
 8008cce:	4b0a      	ldr	r3, [pc, #40]	; (8008cf8 <_vfiprintf_r+0x228>)
 8008cd0:	a904      	add	r1, sp, #16
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f000 f888 	bl	8008de8 <_printf_i>
 8008cd8:	e7ec      	b.n	8008cb4 <_vfiprintf_r+0x1e4>
 8008cda:	bf00      	nop
 8008cdc:	08009894 	.word	0x08009894
 8008ce0:	080098d4 	.word	0x080098d4
 8008ce4:	080098b4 	.word	0x080098b4
 8008ce8:	08009874 	.word	0x08009874
 8008cec:	080098da 	.word	0x080098da
 8008cf0:	080098de 	.word	0x080098de
 8008cf4:	00000000 	.word	0x00000000
 8008cf8:	08008aab 	.word	0x08008aab

08008cfc <_printf_common>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	4691      	mov	r9, r2
 8008d02:	461f      	mov	r7, r3
 8008d04:	688a      	ldr	r2, [r1, #8]
 8008d06:	690b      	ldr	r3, [r1, #16]
 8008d08:	4606      	mov	r6, r0
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	bfb8      	it	lt
 8008d0e:	4613      	movlt	r3, r2
 8008d10:	f8c9 3000 	str.w	r3, [r9]
 8008d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d18:	460c      	mov	r4, r1
 8008d1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d1e:	b112      	cbz	r2, 8008d26 <_printf_common+0x2a>
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c9 3000 	str.w	r3, [r9]
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	0699      	lsls	r1, r3, #26
 8008d2a:	bf42      	ittt	mi
 8008d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d30:	3302      	addmi	r3, #2
 8008d32:	f8c9 3000 	strmi.w	r3, [r9]
 8008d36:	6825      	ldr	r5, [r4, #0]
 8008d38:	f015 0506 	ands.w	r5, r5, #6
 8008d3c:	d107      	bne.n	8008d4e <_printf_common+0x52>
 8008d3e:	f104 0a19 	add.w	sl, r4, #25
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	f8d9 2000 	ldr.w	r2, [r9]
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	42ab      	cmp	r3, r5
 8008d4c:	dc29      	bgt.n	8008da2 <_printf_common+0xa6>
 8008d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	3300      	adds	r3, #0
 8008d56:	bf18      	it	ne
 8008d58:	2301      	movne	r3, #1
 8008d5a:	0692      	lsls	r2, r2, #26
 8008d5c:	d42e      	bmi.n	8008dbc <_printf_common+0xc0>
 8008d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d62:	4639      	mov	r1, r7
 8008d64:	4630      	mov	r0, r6
 8008d66:	47c0      	blx	r8
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d021      	beq.n	8008db0 <_printf_common+0xb4>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	68e5      	ldr	r5, [r4, #12]
 8008d70:	f003 0306 	and.w	r3, r3, #6
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	bf18      	it	ne
 8008d78:	2500      	movne	r5, #0
 8008d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8008d7e:	f04f 0900 	mov.w	r9, #0
 8008d82:	bf08      	it	eq
 8008d84:	1aad      	subeq	r5, r5, r2
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	6922      	ldr	r2, [r4, #16]
 8008d8a:	bf08      	it	eq
 8008d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfc4      	itt	gt
 8008d94:	1a9b      	subgt	r3, r3, r2
 8008d96:	18ed      	addgt	r5, r5, r3
 8008d98:	341a      	adds	r4, #26
 8008d9a:	454d      	cmp	r5, r9
 8008d9c:	d11a      	bne.n	8008dd4 <_printf_common+0xd8>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e008      	b.n	8008db4 <_printf_common+0xb8>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4652      	mov	r2, sl
 8008da6:	4639      	mov	r1, r7
 8008da8:	4630      	mov	r0, r6
 8008daa:	47c0      	blx	r8
 8008dac:	3001      	adds	r0, #1
 8008dae:	d103      	bne.n	8008db8 <_printf_common+0xbc>
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db8:	3501      	adds	r5, #1
 8008dba:	e7c2      	b.n	8008d42 <_printf_common+0x46>
 8008dbc:	2030      	movs	r0, #48	; 0x30
 8008dbe:	18e1      	adds	r1, r4, r3
 8008dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dca:	4422      	add	r2, r4
 8008dcc:	3302      	adds	r3, #2
 8008dce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dd2:	e7c4      	b.n	8008d5e <_printf_common+0x62>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	4639      	mov	r1, r7
 8008dda:	4630      	mov	r0, r6
 8008ddc:	47c0      	blx	r8
 8008dde:	3001      	adds	r0, #1
 8008de0:	d0e6      	beq.n	8008db0 <_printf_common+0xb4>
 8008de2:	f109 0901 	add.w	r9, r9, #1
 8008de6:	e7d8      	b.n	8008d9a <_printf_common+0x9e>

08008de8 <_printf_i>:
 8008de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008df0:	460c      	mov	r4, r1
 8008df2:	7e09      	ldrb	r1, [r1, #24]
 8008df4:	b085      	sub	sp, #20
 8008df6:	296e      	cmp	r1, #110	; 0x6e
 8008df8:	4617      	mov	r7, r2
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	4698      	mov	r8, r3
 8008dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e00:	f000 80b3 	beq.w	8008f6a <_printf_i+0x182>
 8008e04:	d822      	bhi.n	8008e4c <_printf_i+0x64>
 8008e06:	2963      	cmp	r1, #99	; 0x63
 8008e08:	d036      	beq.n	8008e78 <_printf_i+0x90>
 8008e0a:	d80a      	bhi.n	8008e22 <_printf_i+0x3a>
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	f000 80b9 	beq.w	8008f84 <_printf_i+0x19c>
 8008e12:	2958      	cmp	r1, #88	; 0x58
 8008e14:	f000 8083 	beq.w	8008f1e <_printf_i+0x136>
 8008e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e20:	e032      	b.n	8008e88 <_printf_i+0xa0>
 8008e22:	2964      	cmp	r1, #100	; 0x64
 8008e24:	d001      	beq.n	8008e2a <_printf_i+0x42>
 8008e26:	2969      	cmp	r1, #105	; 0x69
 8008e28:	d1f6      	bne.n	8008e18 <_printf_i+0x30>
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	6813      	ldr	r3, [r2, #0]
 8008e2e:	0605      	lsls	r5, r0, #24
 8008e30:	f103 0104 	add.w	r1, r3, #4
 8008e34:	d52a      	bpl.n	8008e8c <_printf_i+0xa4>
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da03      	bge.n	8008e46 <_printf_i+0x5e>
 8008e3e:	222d      	movs	r2, #45	; 0x2d
 8008e40:	425b      	negs	r3, r3
 8008e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e46:	486f      	ldr	r0, [pc, #444]	; (8009004 <_printf_i+0x21c>)
 8008e48:	220a      	movs	r2, #10
 8008e4a:	e039      	b.n	8008ec0 <_printf_i+0xd8>
 8008e4c:	2973      	cmp	r1, #115	; 0x73
 8008e4e:	f000 809d 	beq.w	8008f8c <_printf_i+0x1a4>
 8008e52:	d808      	bhi.n	8008e66 <_printf_i+0x7e>
 8008e54:	296f      	cmp	r1, #111	; 0x6f
 8008e56:	d020      	beq.n	8008e9a <_printf_i+0xb2>
 8008e58:	2970      	cmp	r1, #112	; 0x70
 8008e5a:	d1dd      	bne.n	8008e18 <_printf_i+0x30>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	f043 0320 	orr.w	r3, r3, #32
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	e003      	b.n	8008e6e <_printf_i+0x86>
 8008e66:	2975      	cmp	r1, #117	; 0x75
 8008e68:	d017      	beq.n	8008e9a <_printf_i+0xb2>
 8008e6a:	2978      	cmp	r1, #120	; 0x78
 8008e6c:	d1d4      	bne.n	8008e18 <_printf_i+0x30>
 8008e6e:	2378      	movs	r3, #120	; 0x78
 8008e70:	4865      	ldr	r0, [pc, #404]	; (8009008 <_printf_i+0x220>)
 8008e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e76:	e055      	b.n	8008f24 <_printf_i+0x13c>
 8008e78:	6813      	ldr	r3, [r2, #0]
 8008e7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e7e:	1d19      	adds	r1, r3, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6011      	str	r1, [r2, #0]
 8008e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e08c      	b.n	8008fa6 <_printf_i+0x1be>
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e92:	6011      	str	r1, [r2, #0]
 8008e94:	bf18      	it	ne
 8008e96:	b21b      	sxthne	r3, r3
 8008e98:	e7cf      	b.n	8008e3a <_printf_i+0x52>
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	6825      	ldr	r5, [r4, #0]
 8008e9e:	1d18      	adds	r0, r3, #4
 8008ea0:	6010      	str	r0, [r2, #0]
 8008ea2:	0628      	lsls	r0, r5, #24
 8008ea4:	d501      	bpl.n	8008eaa <_printf_i+0xc2>
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	e002      	b.n	8008eb0 <_printf_i+0xc8>
 8008eaa:	0668      	lsls	r0, r5, #25
 8008eac:	d5fb      	bpl.n	8008ea6 <_printf_i+0xbe>
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	296f      	cmp	r1, #111	; 0x6f
 8008eb2:	bf14      	ite	ne
 8008eb4:	220a      	movne	r2, #10
 8008eb6:	2208      	moveq	r2, #8
 8008eb8:	4852      	ldr	r0, [pc, #328]	; (8009004 <_printf_i+0x21c>)
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ec0:	6865      	ldr	r5, [r4, #4]
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	60a5      	str	r5, [r4, #8]
 8008ec6:	f2c0 8095 	blt.w	8008ff4 <_printf_i+0x20c>
 8008eca:	6821      	ldr	r1, [r4, #0]
 8008ecc:	f021 0104 	bic.w	r1, r1, #4
 8008ed0:	6021      	str	r1, [r4, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d13d      	bne.n	8008f52 <_printf_i+0x16a>
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	f040 808e 	bne.w	8008ff8 <_printf_i+0x210>
 8008edc:	4665      	mov	r5, ip
 8008ede:	2a08      	cmp	r2, #8
 8008ee0:	d10b      	bne.n	8008efa <_printf_i+0x112>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	07db      	lsls	r3, r3, #31
 8008ee6:	d508      	bpl.n	8008efa <_printf_i+0x112>
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	6862      	ldr	r2, [r4, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	bfde      	ittt	le
 8008ef0:	2330      	movle	r3, #48	; 0x30
 8008ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008efa:	ebac 0305 	sub.w	r3, ip, r5
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	f8cd 8000 	str.w	r8, [sp]
 8008f04:	463b      	mov	r3, r7
 8008f06:	aa03      	add	r2, sp, #12
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff fef6 	bl	8008cfc <_printf_common>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d14d      	bne.n	8008fb0 <_printf_i+0x1c8>
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	b005      	add	sp, #20
 8008f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f1e:	4839      	ldr	r0, [pc, #228]	; (8009004 <_printf_i+0x21c>)
 8008f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f24:	6813      	ldr	r3, [r2, #0]
 8008f26:	6821      	ldr	r1, [r4, #0]
 8008f28:	1d1d      	adds	r5, r3, #4
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6015      	str	r5, [r2, #0]
 8008f2e:	060a      	lsls	r2, r1, #24
 8008f30:	d50b      	bpl.n	8008f4a <_printf_i+0x162>
 8008f32:	07ca      	lsls	r2, r1, #31
 8008f34:	bf44      	itt	mi
 8008f36:	f041 0120 	orrmi.w	r1, r1, #32
 8008f3a:	6021      	strmi	r1, [r4, #0]
 8008f3c:	b91b      	cbnz	r3, 8008f46 <_printf_i+0x15e>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	f022 0220 	bic.w	r2, r2, #32
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	2210      	movs	r2, #16
 8008f48:	e7b7      	b.n	8008eba <_printf_i+0xd2>
 8008f4a:	064d      	lsls	r5, r1, #25
 8008f4c:	bf48      	it	mi
 8008f4e:	b29b      	uxthmi	r3, r3
 8008f50:	e7ef      	b.n	8008f32 <_printf_i+0x14a>
 8008f52:	4665      	mov	r5, ip
 8008f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f58:	fb02 3311 	mls	r3, r2, r1, r3
 8008f5c:	5cc3      	ldrb	r3, [r0, r3]
 8008f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f62:	460b      	mov	r3, r1
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d1f5      	bne.n	8008f54 <_printf_i+0x16c>
 8008f68:	e7b9      	b.n	8008ede <_printf_i+0xf6>
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	1d18      	adds	r0, r3, #4
 8008f70:	6961      	ldr	r1, [r4, #20]
 8008f72:	6010      	str	r0, [r2, #0]
 8008f74:	0628      	lsls	r0, r5, #24
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	d501      	bpl.n	8008f7e <_printf_i+0x196>
 8008f7a:	6019      	str	r1, [r3, #0]
 8008f7c:	e002      	b.n	8008f84 <_printf_i+0x19c>
 8008f7e:	066a      	lsls	r2, r5, #25
 8008f80:	d5fb      	bpl.n	8008f7a <_printf_i+0x192>
 8008f82:	8019      	strh	r1, [r3, #0]
 8008f84:	2300      	movs	r3, #0
 8008f86:	4665      	mov	r5, ip
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	e7b9      	b.n	8008f00 <_printf_i+0x118>
 8008f8c:	6813      	ldr	r3, [r2, #0]
 8008f8e:	1d19      	adds	r1, r3, #4
 8008f90:	6011      	str	r1, [r2, #0]
 8008f92:	681d      	ldr	r5, [r3, #0]
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	2100      	movs	r1, #0
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 fa93 	bl	80094c4 <memchr>
 8008f9e:	b108      	cbz	r0, 8008fa4 <_printf_i+0x1bc>
 8008fa0:	1b40      	subs	r0, r0, r5
 8008fa2:	6060      	str	r0, [r4, #4]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fae:	e7a7      	b.n	8008f00 <_printf_i+0x118>
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d0aa      	beq.n	8008f14 <_printf_i+0x12c>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	079b      	lsls	r3, r3, #30
 8008fc2:	d413      	bmi.n	8008fec <_printf_i+0x204>
 8008fc4:	68e0      	ldr	r0, [r4, #12]
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	4298      	cmp	r0, r3
 8008fca:	bfb8      	it	lt
 8008fcc:	4618      	movlt	r0, r3
 8008fce:	e7a3      	b.n	8008f18 <_printf_i+0x130>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	464a      	mov	r2, r9
 8008fd4:	4639      	mov	r1, r7
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	47c0      	blx	r8
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d09a      	beq.n	8008f14 <_printf_i+0x12c>
 8008fde:	3501      	adds	r5, #1
 8008fe0:	68e3      	ldr	r3, [r4, #12]
 8008fe2:	9a03      	ldr	r2, [sp, #12]
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	42ab      	cmp	r3, r5
 8008fe8:	dcf2      	bgt.n	8008fd0 <_printf_i+0x1e8>
 8008fea:	e7eb      	b.n	8008fc4 <_printf_i+0x1dc>
 8008fec:	2500      	movs	r5, #0
 8008fee:	f104 0919 	add.w	r9, r4, #25
 8008ff2:	e7f5      	b.n	8008fe0 <_printf_i+0x1f8>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1ac      	bne.n	8008f52 <_printf_i+0x16a>
 8008ff8:	7803      	ldrb	r3, [r0, #0]
 8008ffa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009002:	e76c      	b.n	8008ede <_printf_i+0xf6>
 8009004:	080098e5 	.word	0x080098e5
 8009008:	080098f6 	.word	0x080098f6

0800900c <_sbrk_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	2300      	movs	r3, #0
 8009010:	4c05      	ldr	r4, [pc, #20]	; (8009028 <_sbrk_r+0x1c>)
 8009012:	4605      	mov	r5, r0
 8009014:	4608      	mov	r0, r1
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	f7f8 fc30 	bl	800187c <_sbrk>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_sbrk_r+0x1a>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	b103      	cbz	r3, 8009026 <_sbrk_r+0x1a>
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	200013f4 	.word	0x200013f4

0800902c <__sread>:
 800902c:	b510      	push	{r4, lr}
 800902e:	460c      	mov	r4, r1
 8009030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009034:	f000 fae2 	bl	80095fc <_read_r>
 8009038:	2800      	cmp	r0, #0
 800903a:	bfab      	itete	ge
 800903c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800903e:	89a3      	ldrhlt	r3, [r4, #12]
 8009040:	181b      	addge	r3, r3, r0
 8009042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009046:	bfac      	ite	ge
 8009048:	6563      	strge	r3, [r4, #84]	; 0x54
 800904a:	81a3      	strhlt	r3, [r4, #12]
 800904c:	bd10      	pop	{r4, pc}

0800904e <__swrite>:
 800904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	461f      	mov	r7, r3
 8009054:	898b      	ldrh	r3, [r1, #12]
 8009056:	4605      	mov	r5, r0
 8009058:	05db      	lsls	r3, r3, #23
 800905a:	460c      	mov	r4, r1
 800905c:	4616      	mov	r6, r2
 800905e:	d505      	bpl.n	800906c <__swrite+0x1e>
 8009060:	2302      	movs	r3, #2
 8009062:	2200      	movs	r2, #0
 8009064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009068:	f000 f9b6 	bl	80093d8 <_lseek_r>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	4632      	mov	r2, r6
 8009070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907a:	463b      	mov	r3, r7
 800907c:	4628      	mov	r0, r5
 800907e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	f000 b869 	b.w	8009158 <_write_r>

08009086 <__sseek>:
 8009086:	b510      	push	{r4, lr}
 8009088:	460c      	mov	r4, r1
 800908a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908e:	f000 f9a3 	bl	80093d8 <_lseek_r>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	bf15      	itete	ne
 8009098:	6560      	strne	r0, [r4, #84]	; 0x54
 800909a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800909e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090a2:	81a3      	strheq	r3, [r4, #12]
 80090a4:	bf18      	it	ne
 80090a6:	81a3      	strhne	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__sclose>:
 80090aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ae:	f000 b8d3 	b.w	8009258 <_close_r>
	...

080090b4 <__swbuf_r>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	460e      	mov	r6, r1
 80090b8:	4614      	mov	r4, r2
 80090ba:	4605      	mov	r5, r0
 80090bc:	b118      	cbz	r0, 80090c6 <__swbuf_r+0x12>
 80090be:	6983      	ldr	r3, [r0, #24]
 80090c0:	b90b      	cbnz	r3, 80090c6 <__swbuf_r+0x12>
 80090c2:	f7ff faa7 	bl	8008614 <__sinit>
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <__swbuf_r+0x98>)
 80090c8:	429c      	cmp	r4, r3
 80090ca:	d12a      	bne.n	8009122 <__swbuf_r+0x6e>
 80090cc:	686c      	ldr	r4, [r5, #4]
 80090ce:	69a3      	ldr	r3, [r4, #24]
 80090d0:	60a3      	str	r3, [r4, #8]
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	071a      	lsls	r2, r3, #28
 80090d6:	d52e      	bpl.n	8009136 <__swbuf_r+0x82>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	b363      	cbz	r3, 8009136 <__swbuf_r+0x82>
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	6820      	ldr	r0, [r4, #0]
 80090e0:	b2f6      	uxtb	r6, r6
 80090e2:	1ac0      	subs	r0, r0, r3
 80090e4:	6963      	ldr	r3, [r4, #20]
 80090e6:	4637      	mov	r7, r6
 80090e8:	4283      	cmp	r3, r0
 80090ea:	dc04      	bgt.n	80090f6 <__swbuf_r+0x42>
 80090ec:	4621      	mov	r1, r4
 80090ee:	4628      	mov	r0, r5
 80090f0:	f000 f948 	bl	8009384 <_fflush_r>
 80090f4:	bb28      	cbnz	r0, 8009142 <__swbuf_r+0x8e>
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	3001      	adds	r0, #1
 80090fa:	3b01      	subs	r3, #1
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	6022      	str	r2, [r4, #0]
 8009104:	701e      	strb	r6, [r3, #0]
 8009106:	6963      	ldr	r3, [r4, #20]
 8009108:	4283      	cmp	r3, r0
 800910a:	d004      	beq.n	8009116 <__swbuf_r+0x62>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	07db      	lsls	r3, r3, #31
 8009110:	d519      	bpl.n	8009146 <__swbuf_r+0x92>
 8009112:	2e0a      	cmp	r6, #10
 8009114:	d117      	bne.n	8009146 <__swbuf_r+0x92>
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 f933 	bl	8009384 <_fflush_r>
 800911e:	b190      	cbz	r0, 8009146 <__swbuf_r+0x92>
 8009120:	e00f      	b.n	8009142 <__swbuf_r+0x8e>
 8009122:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <__swbuf_r+0x9c>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d101      	bne.n	800912c <__swbuf_r+0x78>
 8009128:	68ac      	ldr	r4, [r5, #8]
 800912a:	e7d0      	b.n	80090ce <__swbuf_r+0x1a>
 800912c:	4b09      	ldr	r3, [pc, #36]	; (8009154 <__swbuf_r+0xa0>)
 800912e:	429c      	cmp	r4, r3
 8009130:	bf08      	it	eq
 8009132:	68ec      	ldreq	r4, [r5, #12]
 8009134:	e7cb      	b.n	80090ce <__swbuf_r+0x1a>
 8009136:	4621      	mov	r1, r4
 8009138:	4628      	mov	r0, r5
 800913a:	f000 f81f 	bl	800917c <__swsetup_r>
 800913e:	2800      	cmp	r0, #0
 8009140:	d0cc      	beq.n	80090dc <__swbuf_r+0x28>
 8009142:	f04f 37ff 	mov.w	r7, #4294967295
 8009146:	4638      	mov	r0, r7
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914a:	bf00      	nop
 800914c:	08009894 	.word	0x08009894
 8009150:	080098b4 	.word	0x080098b4
 8009154:	08009874 	.word	0x08009874

08009158 <_write_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4605      	mov	r5, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	2200      	movs	r2, #0
 8009162:	4c05      	ldr	r4, [pc, #20]	; (8009178 <_write_r+0x20>)
 8009164:	6022      	str	r2, [r4, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7f8 fb3b 	bl	80017e2 <_write>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_write_r+0x1e>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	b103      	cbz	r3, 8009176 <_write_r+0x1e>
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	200013f4 	.word	0x200013f4

0800917c <__swsetup_r>:
 800917c:	4b32      	ldr	r3, [pc, #200]	; (8009248 <__swsetup_r+0xcc>)
 800917e:	b570      	push	{r4, r5, r6, lr}
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	4606      	mov	r6, r0
 8009184:	460c      	mov	r4, r1
 8009186:	b125      	cbz	r5, 8009192 <__swsetup_r+0x16>
 8009188:	69ab      	ldr	r3, [r5, #24]
 800918a:	b913      	cbnz	r3, 8009192 <__swsetup_r+0x16>
 800918c:	4628      	mov	r0, r5
 800918e:	f7ff fa41 	bl	8008614 <__sinit>
 8009192:	4b2e      	ldr	r3, [pc, #184]	; (800924c <__swsetup_r+0xd0>)
 8009194:	429c      	cmp	r4, r3
 8009196:	d10f      	bne.n	80091b8 <__swsetup_r+0x3c>
 8009198:	686c      	ldr	r4, [r5, #4]
 800919a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	0715      	lsls	r5, r2, #28
 80091a2:	d42c      	bmi.n	80091fe <__swsetup_r+0x82>
 80091a4:	06d0      	lsls	r0, r2, #27
 80091a6:	d411      	bmi.n	80091cc <__swsetup_r+0x50>
 80091a8:	2209      	movs	r2, #9
 80091aa:	6032      	str	r2, [r6, #0]
 80091ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	f04f 30ff 	mov.w	r0, #4294967295
 80091b6:	e03e      	b.n	8009236 <__swsetup_r+0xba>
 80091b8:	4b25      	ldr	r3, [pc, #148]	; (8009250 <__swsetup_r+0xd4>)
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d101      	bne.n	80091c2 <__swsetup_r+0x46>
 80091be:	68ac      	ldr	r4, [r5, #8]
 80091c0:	e7eb      	b.n	800919a <__swsetup_r+0x1e>
 80091c2:	4b24      	ldr	r3, [pc, #144]	; (8009254 <__swsetup_r+0xd8>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	bf08      	it	eq
 80091c8:	68ec      	ldreq	r4, [r5, #12]
 80091ca:	e7e6      	b.n	800919a <__swsetup_r+0x1e>
 80091cc:	0751      	lsls	r1, r2, #29
 80091ce:	d512      	bpl.n	80091f6 <__swsetup_r+0x7a>
 80091d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d2:	b141      	cbz	r1, 80091e6 <__swsetup_r+0x6a>
 80091d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d8:	4299      	cmp	r1, r3
 80091da:	d002      	beq.n	80091e2 <__swsetup_r+0x66>
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 f99b 	bl	8009518 <_free_r>
 80091e2:	2300      	movs	r3, #0
 80091e4:	6363      	str	r3, [r4, #52]	; 0x34
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	2300      	movs	r3, #0
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f043 0308 	orr.w	r3, r3, #8
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	b94b      	cbnz	r3, 8009216 <__swsetup_r+0x9a>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920c:	d003      	beq.n	8009216 <__swsetup_r+0x9a>
 800920e:	4621      	mov	r1, r4
 8009210:	4630      	mov	r0, r6
 8009212:	f000 f917 	bl	8009444 <__smakebuf_r>
 8009216:	89a2      	ldrh	r2, [r4, #12]
 8009218:	f012 0301 	ands.w	r3, r2, #1
 800921c:	d00c      	beq.n	8009238 <__swsetup_r+0xbc>
 800921e:	2300      	movs	r3, #0
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	6963      	ldr	r3, [r4, #20]
 8009224:	425b      	negs	r3, r3
 8009226:	61a3      	str	r3, [r4, #24]
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	b953      	cbnz	r3, 8009242 <__swsetup_r+0xc6>
 800922c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009230:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009234:	d1ba      	bne.n	80091ac <__swsetup_r+0x30>
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	0792      	lsls	r2, r2, #30
 800923a:	bf58      	it	pl
 800923c:	6963      	ldrpl	r3, [r4, #20]
 800923e:	60a3      	str	r3, [r4, #8]
 8009240:	e7f2      	b.n	8009228 <__swsetup_r+0xac>
 8009242:	2000      	movs	r0, #0
 8009244:	e7f7      	b.n	8009236 <__swsetup_r+0xba>
 8009246:	bf00      	nop
 8009248:	2000017c 	.word	0x2000017c
 800924c:	08009894 	.word	0x08009894
 8009250:	080098b4 	.word	0x080098b4
 8009254:	08009874 	.word	0x08009874

08009258 <_close_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	2300      	movs	r3, #0
 800925c:	4c05      	ldr	r4, [pc, #20]	; (8009274 <_close_r+0x1c>)
 800925e:	4605      	mov	r5, r0
 8009260:	4608      	mov	r0, r1
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	f7f8 fad9 	bl	800181a <_close>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_close_r+0x1a>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	b103      	cbz	r3, 8009272 <_close_r+0x1a>
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	200013f4 	.word	0x200013f4

08009278 <__sflush_r>:
 8009278:	898a      	ldrh	r2, [r1, #12]
 800927a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927e:	4605      	mov	r5, r0
 8009280:	0710      	lsls	r0, r2, #28
 8009282:	460c      	mov	r4, r1
 8009284:	d458      	bmi.n	8009338 <__sflush_r+0xc0>
 8009286:	684b      	ldr	r3, [r1, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc05      	bgt.n	8009298 <__sflush_r+0x20>
 800928c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	dc02      	bgt.n	8009298 <__sflush_r+0x20>
 8009292:	2000      	movs	r0, #0
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800929a:	2e00      	cmp	r6, #0
 800929c:	d0f9      	beq.n	8009292 <__sflush_r+0x1a>
 800929e:	2300      	movs	r3, #0
 80092a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092a4:	682f      	ldr	r7, [r5, #0]
 80092a6:	6a21      	ldr	r1, [r4, #32]
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	d032      	beq.n	8009312 <__sflush_r+0x9a>
 80092ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	075a      	lsls	r2, r3, #29
 80092b2:	d505      	bpl.n	80092c0 <__sflush_r+0x48>
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	1ac0      	subs	r0, r0, r3
 80092b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092ba:	b10b      	cbz	r3, 80092c0 <__sflush_r+0x48>
 80092bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092be:	1ac0      	subs	r0, r0, r3
 80092c0:	2300      	movs	r3, #0
 80092c2:	4602      	mov	r2, r0
 80092c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092c6:	6a21      	ldr	r1, [r4, #32]
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b0      	blx	r6
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	d106      	bne.n	80092e0 <__sflush_r+0x68>
 80092d2:	6829      	ldr	r1, [r5, #0]
 80092d4:	291d      	cmp	r1, #29
 80092d6:	d848      	bhi.n	800936a <__sflush_r+0xf2>
 80092d8:	4a29      	ldr	r2, [pc, #164]	; (8009380 <__sflush_r+0x108>)
 80092da:	40ca      	lsrs	r2, r1
 80092dc:	07d6      	lsls	r6, r2, #31
 80092de:	d544      	bpl.n	800936a <__sflush_r+0xf2>
 80092e0:	2200      	movs	r2, #0
 80092e2:	6062      	str	r2, [r4, #4]
 80092e4:	6922      	ldr	r2, [r4, #16]
 80092e6:	04d9      	lsls	r1, r3, #19
 80092e8:	6022      	str	r2, [r4, #0]
 80092ea:	d504      	bpl.n	80092f6 <__sflush_r+0x7e>
 80092ec:	1c42      	adds	r2, r0, #1
 80092ee:	d101      	bne.n	80092f4 <__sflush_r+0x7c>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b903      	cbnz	r3, 80092f6 <__sflush_r+0x7e>
 80092f4:	6560      	str	r0, [r4, #84]	; 0x54
 80092f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092f8:	602f      	str	r7, [r5, #0]
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d0c9      	beq.n	8009292 <__sflush_r+0x1a>
 80092fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009302:	4299      	cmp	r1, r3
 8009304:	d002      	beq.n	800930c <__sflush_r+0x94>
 8009306:	4628      	mov	r0, r5
 8009308:	f000 f906 	bl	8009518 <_free_r>
 800930c:	2000      	movs	r0, #0
 800930e:	6360      	str	r0, [r4, #52]	; 0x34
 8009310:	e7c0      	b.n	8009294 <__sflush_r+0x1c>
 8009312:	2301      	movs	r3, #1
 8009314:	4628      	mov	r0, r5
 8009316:	47b0      	blx	r6
 8009318:	1c41      	adds	r1, r0, #1
 800931a:	d1c8      	bne.n	80092ae <__sflush_r+0x36>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0c5      	beq.n	80092ae <__sflush_r+0x36>
 8009322:	2b1d      	cmp	r3, #29
 8009324:	d001      	beq.n	800932a <__sflush_r+0xb2>
 8009326:	2b16      	cmp	r3, #22
 8009328:	d101      	bne.n	800932e <__sflush_r+0xb6>
 800932a:	602f      	str	r7, [r5, #0]
 800932c:	e7b1      	b.n	8009292 <__sflush_r+0x1a>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	e7ad      	b.n	8009294 <__sflush_r+0x1c>
 8009338:	690f      	ldr	r7, [r1, #16]
 800933a:	2f00      	cmp	r7, #0
 800933c:	d0a9      	beq.n	8009292 <__sflush_r+0x1a>
 800933e:	0793      	lsls	r3, r2, #30
 8009340:	bf18      	it	ne
 8009342:	2300      	movne	r3, #0
 8009344:	680e      	ldr	r6, [r1, #0]
 8009346:	bf08      	it	eq
 8009348:	694b      	ldreq	r3, [r1, #20]
 800934a:	eba6 0807 	sub.w	r8, r6, r7
 800934e:	600f      	str	r7, [r1, #0]
 8009350:	608b      	str	r3, [r1, #8]
 8009352:	f1b8 0f00 	cmp.w	r8, #0
 8009356:	dd9c      	ble.n	8009292 <__sflush_r+0x1a>
 8009358:	4643      	mov	r3, r8
 800935a:	463a      	mov	r2, r7
 800935c:	6a21      	ldr	r1, [r4, #32]
 800935e:	4628      	mov	r0, r5
 8009360:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009362:	47b0      	blx	r6
 8009364:	2800      	cmp	r0, #0
 8009366:	dc06      	bgt.n	8009376 <__sflush_r+0xfe>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	e78e      	b.n	8009294 <__sflush_r+0x1c>
 8009376:	4407      	add	r7, r0
 8009378:	eba8 0800 	sub.w	r8, r8, r0
 800937c:	e7e9      	b.n	8009352 <__sflush_r+0xda>
 800937e:	bf00      	nop
 8009380:	20400001 	.word	0x20400001

08009384 <_fflush_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	690b      	ldr	r3, [r1, #16]
 8009388:	4605      	mov	r5, r0
 800938a:	460c      	mov	r4, r1
 800938c:	b1db      	cbz	r3, 80093c6 <_fflush_r+0x42>
 800938e:	b118      	cbz	r0, 8009398 <_fflush_r+0x14>
 8009390:	6983      	ldr	r3, [r0, #24]
 8009392:	b90b      	cbnz	r3, 8009398 <_fflush_r+0x14>
 8009394:	f7ff f93e 	bl	8008614 <__sinit>
 8009398:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <_fflush_r+0x48>)
 800939a:	429c      	cmp	r4, r3
 800939c:	d109      	bne.n	80093b2 <_fflush_r+0x2e>
 800939e:	686c      	ldr	r4, [r5, #4]
 80093a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a4:	b17b      	cbz	r3, 80093c6 <_fflush_r+0x42>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ae:	f7ff bf63 	b.w	8009278 <__sflush_r>
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <_fflush_r+0x4c>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	d101      	bne.n	80093bc <_fflush_r+0x38>
 80093b8:	68ac      	ldr	r4, [r5, #8]
 80093ba:	e7f1      	b.n	80093a0 <_fflush_r+0x1c>
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <_fflush_r+0x50>)
 80093be:	429c      	cmp	r4, r3
 80093c0:	bf08      	it	eq
 80093c2:	68ec      	ldreq	r4, [r5, #12]
 80093c4:	e7ec      	b.n	80093a0 <_fflush_r+0x1c>
 80093c6:	2000      	movs	r0, #0
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	08009894 	.word	0x08009894
 80093d0:	080098b4 	.word	0x080098b4
 80093d4:	08009874 	.word	0x08009874

080093d8 <_lseek_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	4611      	mov	r1, r2
 80093e0:	2200      	movs	r2, #0
 80093e2:	4c05      	ldr	r4, [pc, #20]	; (80093f8 <_lseek_r+0x20>)
 80093e4:	6022      	str	r2, [r4, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f7f8 fa3b 	bl	8001862 <_lseek>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_lseek_r+0x1e>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_lseek_r+0x1e>
 80093f4:	602b      	str	r3, [r5, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	200013f4 	.word	0x200013f4

080093fc <__swhatbuf_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	460e      	mov	r6, r1
 8009400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009404:	b096      	sub	sp, #88	; 0x58
 8009406:	2900      	cmp	r1, #0
 8009408:	4614      	mov	r4, r2
 800940a:	461d      	mov	r5, r3
 800940c:	da07      	bge.n	800941e <__swhatbuf_r+0x22>
 800940e:	2300      	movs	r3, #0
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	89b3      	ldrh	r3, [r6, #12]
 8009414:	061a      	lsls	r2, r3, #24
 8009416:	d410      	bmi.n	800943a <__swhatbuf_r+0x3e>
 8009418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941c:	e00e      	b.n	800943c <__swhatbuf_r+0x40>
 800941e:	466a      	mov	r2, sp
 8009420:	f000 f8fe 	bl	8009620 <_fstat_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	dbf2      	blt.n	800940e <__swhatbuf_r+0x12>
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800942e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009432:	425a      	negs	r2, r3
 8009434:	415a      	adcs	r2, r3
 8009436:	602a      	str	r2, [r5, #0]
 8009438:	e7ee      	b.n	8009418 <__swhatbuf_r+0x1c>
 800943a:	2340      	movs	r3, #64	; 0x40
 800943c:	2000      	movs	r0, #0
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	b016      	add	sp, #88	; 0x58
 8009442:	bd70      	pop	{r4, r5, r6, pc}

08009444 <__smakebuf_r>:
 8009444:	898b      	ldrh	r3, [r1, #12]
 8009446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009448:	079d      	lsls	r5, r3, #30
 800944a:	4606      	mov	r6, r0
 800944c:	460c      	mov	r4, r1
 800944e:	d507      	bpl.n	8009460 <__smakebuf_r+0x1c>
 8009450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	6123      	str	r3, [r4, #16]
 8009458:	2301      	movs	r3, #1
 800945a:	6163      	str	r3, [r4, #20]
 800945c:	b002      	add	sp, #8
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	ab01      	add	r3, sp, #4
 8009462:	466a      	mov	r2, sp
 8009464:	f7ff ffca 	bl	80093fc <__swhatbuf_r>
 8009468:	9900      	ldr	r1, [sp, #0]
 800946a:	4605      	mov	r5, r0
 800946c:	4630      	mov	r0, r6
 800946e:	f7ff f95b 	bl	8008728 <_malloc_r>
 8009472:	b948      	cbnz	r0, 8009488 <__smakebuf_r+0x44>
 8009474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d4ef      	bmi.n	800945c <__smakebuf_r+0x18>
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e7e3      	b.n	8009450 <__smakebuf_r+0xc>
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <__smakebuf_r+0x7c>)
 800948a:	62b3      	str	r3, [r6, #40]	; 0x28
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	6120      	str	r0, [r4, #16]
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	b15b      	cbz	r3, 80094b8 <__smakebuf_r+0x74>
 80094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f8cd 	bl	8009644 <_isatty_r>
 80094aa:	b128      	cbz	r0, 80094b8 <__smakebuf_r+0x74>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	431d      	orrs	r5, r3
 80094bc:	81a5      	strh	r5, [r4, #12]
 80094be:	e7cd      	b.n	800945c <__smakebuf_r+0x18>
 80094c0:	080085dd 	.word	0x080085dd

080094c4 <memchr>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	b2c9      	uxtb	r1, r1
 80094c8:	4402      	add	r2, r0
 80094ca:	4290      	cmp	r0, r2
 80094cc:	4603      	mov	r3, r0
 80094ce:	d101      	bne.n	80094d4 <memchr+0x10>
 80094d0:	2300      	movs	r3, #0
 80094d2:	e003      	b.n	80094dc <memchr+0x18>
 80094d4:	781c      	ldrb	r4, [r3, #0]
 80094d6:	3001      	adds	r0, #1
 80094d8:	428c      	cmp	r4, r1
 80094da:	d1f6      	bne.n	80094ca <memchr+0x6>
 80094dc:	4618      	mov	r0, r3
 80094de:	bd10      	pop	{r4, pc}

080094e0 <memmove>:
 80094e0:	4288      	cmp	r0, r1
 80094e2:	b510      	push	{r4, lr}
 80094e4:	eb01 0302 	add.w	r3, r1, r2
 80094e8:	d807      	bhi.n	80094fa <memmove+0x1a>
 80094ea:	1e42      	subs	r2, r0, #1
 80094ec:	4299      	cmp	r1, r3
 80094ee:	d00a      	beq.n	8009506 <memmove+0x26>
 80094f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094f8:	e7f8      	b.n	80094ec <memmove+0xc>
 80094fa:	4283      	cmp	r3, r0
 80094fc:	d9f5      	bls.n	80094ea <memmove+0xa>
 80094fe:	1881      	adds	r1, r0, r2
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	42d3      	cmn	r3, r2
 8009504:	d100      	bne.n	8009508 <memmove+0x28>
 8009506:	bd10      	pop	{r4, pc}
 8009508:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009510:	e7f7      	b.n	8009502 <memmove+0x22>

08009512 <__malloc_lock>:
 8009512:	4770      	bx	lr

08009514 <__malloc_unlock>:
 8009514:	4770      	bx	lr
	...

08009518 <_free_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4605      	mov	r5, r0
 800951c:	2900      	cmp	r1, #0
 800951e:	d043      	beq.n	80095a8 <_free_r+0x90>
 8009520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009524:	1f0c      	subs	r4, r1, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfb8      	it	lt
 800952a:	18e4      	addlt	r4, r4, r3
 800952c:	f7ff fff1 	bl	8009512 <__malloc_lock>
 8009530:	4a1e      	ldr	r2, [pc, #120]	; (80095ac <_free_r+0x94>)
 8009532:	6813      	ldr	r3, [r2, #0]
 8009534:	4610      	mov	r0, r2
 8009536:	b933      	cbnz	r3, 8009546 <_free_r+0x2e>
 8009538:	6063      	str	r3, [r4, #4]
 800953a:	6014      	str	r4, [r2, #0]
 800953c:	4628      	mov	r0, r5
 800953e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009542:	f7ff bfe7 	b.w	8009514 <__malloc_unlock>
 8009546:	42a3      	cmp	r3, r4
 8009548:	d90b      	bls.n	8009562 <_free_r+0x4a>
 800954a:	6821      	ldr	r1, [r4, #0]
 800954c:	1862      	adds	r2, r4, r1
 800954e:	4293      	cmp	r3, r2
 8009550:	bf01      	itttt	eq
 8009552:	681a      	ldreq	r2, [r3, #0]
 8009554:	685b      	ldreq	r3, [r3, #4]
 8009556:	1852      	addeq	r2, r2, r1
 8009558:	6022      	streq	r2, [r4, #0]
 800955a:	6063      	str	r3, [r4, #4]
 800955c:	6004      	str	r4, [r0, #0]
 800955e:	e7ed      	b.n	800953c <_free_r+0x24>
 8009560:	4613      	mov	r3, r2
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	b10a      	cbz	r2, 800956a <_free_r+0x52>
 8009566:	42a2      	cmp	r2, r4
 8009568:	d9fa      	bls.n	8009560 <_free_r+0x48>
 800956a:	6819      	ldr	r1, [r3, #0]
 800956c:	1858      	adds	r0, r3, r1
 800956e:	42a0      	cmp	r0, r4
 8009570:	d10b      	bne.n	800958a <_free_r+0x72>
 8009572:	6820      	ldr	r0, [r4, #0]
 8009574:	4401      	add	r1, r0
 8009576:	1858      	adds	r0, r3, r1
 8009578:	4282      	cmp	r2, r0
 800957a:	6019      	str	r1, [r3, #0]
 800957c:	d1de      	bne.n	800953c <_free_r+0x24>
 800957e:	6810      	ldr	r0, [r2, #0]
 8009580:	6852      	ldr	r2, [r2, #4]
 8009582:	4401      	add	r1, r0
 8009584:	6019      	str	r1, [r3, #0]
 8009586:	605a      	str	r2, [r3, #4]
 8009588:	e7d8      	b.n	800953c <_free_r+0x24>
 800958a:	d902      	bls.n	8009592 <_free_r+0x7a>
 800958c:	230c      	movs	r3, #12
 800958e:	602b      	str	r3, [r5, #0]
 8009590:	e7d4      	b.n	800953c <_free_r+0x24>
 8009592:	6820      	ldr	r0, [r4, #0]
 8009594:	1821      	adds	r1, r4, r0
 8009596:	428a      	cmp	r2, r1
 8009598:	bf01      	itttt	eq
 800959a:	6811      	ldreq	r1, [r2, #0]
 800959c:	6852      	ldreq	r2, [r2, #4]
 800959e:	1809      	addeq	r1, r1, r0
 80095a0:	6021      	streq	r1, [r4, #0]
 80095a2:	6062      	str	r2, [r4, #4]
 80095a4:	605c      	str	r4, [r3, #4]
 80095a6:	e7c9      	b.n	800953c <_free_r+0x24>
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	20000424 	.word	0x20000424

080095b0 <_realloc_r>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	4607      	mov	r7, r0
 80095b4:	4614      	mov	r4, r2
 80095b6:	460e      	mov	r6, r1
 80095b8:	b921      	cbnz	r1, 80095c4 <_realloc_r+0x14>
 80095ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095be:	4611      	mov	r1, r2
 80095c0:	f7ff b8b2 	b.w	8008728 <_malloc_r>
 80095c4:	b922      	cbnz	r2, 80095d0 <_realloc_r+0x20>
 80095c6:	f7ff ffa7 	bl	8009518 <_free_r>
 80095ca:	4625      	mov	r5, r4
 80095cc:	4628      	mov	r0, r5
 80095ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d0:	f000 f848 	bl	8009664 <_malloc_usable_size_r>
 80095d4:	42a0      	cmp	r0, r4
 80095d6:	d20f      	bcs.n	80095f8 <_realloc_r+0x48>
 80095d8:	4621      	mov	r1, r4
 80095da:	4638      	mov	r0, r7
 80095dc:	f7ff f8a4 	bl	8008728 <_malloc_r>
 80095e0:	4605      	mov	r5, r0
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0f2      	beq.n	80095cc <_realloc_r+0x1c>
 80095e6:	4631      	mov	r1, r6
 80095e8:	4622      	mov	r2, r4
 80095ea:	f7fe ff73 	bl	80084d4 <memcpy>
 80095ee:	4631      	mov	r1, r6
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ff91 	bl	8009518 <_free_r>
 80095f6:	e7e9      	b.n	80095cc <_realloc_r+0x1c>
 80095f8:	4635      	mov	r5, r6
 80095fa:	e7e7      	b.n	80095cc <_realloc_r+0x1c>

080095fc <_read_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4605      	mov	r5, r0
 8009600:	4608      	mov	r0, r1
 8009602:	4611      	mov	r1, r2
 8009604:	2200      	movs	r2, #0
 8009606:	4c05      	ldr	r4, [pc, #20]	; (800961c <_read_r+0x20>)
 8009608:	6022      	str	r2, [r4, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	f7f8 f8cc 	bl	80017a8 <_read>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_read_r+0x1e>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	b103      	cbz	r3, 800961a <_read_r+0x1e>
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	200013f4 	.word	0x200013f4

08009620 <_fstat_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	2300      	movs	r3, #0
 8009624:	4c06      	ldr	r4, [pc, #24]	; (8009640 <_fstat_r+0x20>)
 8009626:	4605      	mov	r5, r0
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	f7f8 f8ff 	bl	8001830 <_fstat>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d102      	bne.n	800963c <_fstat_r+0x1c>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	b103      	cbz	r3, 800963c <_fstat_r+0x1c>
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	200013f4 	.word	0x200013f4

08009644 <_isatty_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	2300      	movs	r3, #0
 8009648:	4c05      	ldr	r4, [pc, #20]	; (8009660 <_isatty_r+0x1c>)
 800964a:	4605      	mov	r5, r0
 800964c:	4608      	mov	r0, r1
 800964e:	6023      	str	r3, [r4, #0]
 8009650:	f7f8 f8fd 	bl	800184e <_isatty>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_isatty_r+0x1a>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	b103      	cbz	r3, 800965e <_isatty_r+0x1a>
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	200013f4 	.word	0x200013f4

08009664 <_malloc_usable_size_r>:
 8009664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009668:	1f18      	subs	r0, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	bfbc      	itt	lt
 800966e:	580b      	ldrlt	r3, [r1, r0]
 8009670:	18c0      	addlt	r0, r0, r3
 8009672:	4770      	bx	lr

08009674 <_init>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr

08009680 <_fini>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr
